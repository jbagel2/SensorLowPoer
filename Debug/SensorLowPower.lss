
SensorLowPower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000017a2  00001836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  0080012c  0080012c  00001862  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f57  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b74  00000000  00000000  00003a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b90  00000000  00000000  00004611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006fc  00000000  00000000  000051a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c4f  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001949  00000000  00000000  000064ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    /* Use static payload length ... */
    payload_len = pay_length;
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
       4:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_1>
       8:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_2>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_6>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
      40:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
      48:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_18>
      4c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_19>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2159>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ea       	ldi	r30, 0xA2	; 162
     17e:	f7 e1       	ldi	r31, 0x17	; 23
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 32       	cpi	r26, 0x2C	; 44
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ac e2       	ldi	r26, 0x2C	; 44
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 3d       	cpi	r26, 0xDC	; 220
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
     1a0:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <_Z13ADCsingleREADh>:
int ADCsingleREAD(uint8_t ADCn_touse)
{
	int ADCval;

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega8A__) || defined(__AVR_ATmega88__)
	ADMUX = ADCn_touse;         // use #1 ADC
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
     1ae:	80 81       	ld	r24, Z
     1b0:	80 64       	ori	r24, 0x40	; 64
     1b2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 7d       	andi	r24, 0xDF	; 223
     1b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);// | (1 << ADPS0);
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	86 60       	ori	r24, 0x06	; 6
     1c2:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
     1c4:	80 81       	ld	r24, Z
     1c6:	8e 7f       	andi	r24, 0xFE	; 254
     1c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
     1ca:	80 81       	ld	r24, Z
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
     1d0:	80 81       	ld	r24, Z
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
     1d6:	80 81       	ld	r24, Z
     1d8:	86 fd       	sbrc	r24, 6
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <_Z13ADCsingleREADh+0x2e>


	ADCval = ADCL;
     1dc:	20 91 78 00 	lds	r18, 0x0078
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
     1e0:	80 91 79 00 	lds	r24, 0x0079
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	98 2f       	mov	r25, r24
     1e8:	88 27       	eor	r24, r24
#endif

	//ADCSRA &= ~(1 << ADEN); 
	return ADCval;
}
     1ea:	82 0f       	add	r24, r18
     1ec:	91 1d       	adc	r25, r1
     1ee:	08 95       	ret

000001f0 <__vector_21>:
	
}


ISR(ADC_vect)
{
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	8f 93       	push	r24
	ADCvalue = ADCH;          // only need to read the high value for 8 bit
     1fc:	80 91 79 00 	lds	r24, 0x0079
     200:	80 93 2c 01 	sts	0x012C, r24
	// REMEMBER: once ADCH is read the ADC will update
	
	// if you need the value of ADCH in multiple spots, read it into a register
	// and use the register and not the ADCH

}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <readDHT22>:
 * at the header file (DHT22.h).
 */
#include "dht22New.h"

DHT22_ERROR_t readDHT22(DHT22_DATA_t* data)
{
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <readDHT22+0x1a>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// Pin needs to start HIGH, wait until it is HIGH with a timeout
	retryCount = 0;
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
     22e:	52 98       	cbi	0x0a, 2	; 10
     230:	2e e7       	ldi	r18, 0x7E	; 126
     232:	03 c0       	rjmp	.+6      	; 0x23a <readDHT22+0x2a>
     234:	21 50       	subi	r18, 0x01	; 1
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     236:	09 f4       	brne	.+2      	; 0x23a <readDHT22+0x2a>
     238:	b7 c0       	rjmp	.+366    	; 0x3a8 <readDHT22+0x198>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	35 e0       	ldi	r19, 0x05	; 5
     23c:	3a 95       	dec	r19
     23e:	f1 f7       	brne	.-4      	; 0x23c <readDHT22+0x2c>
     240:	00 00       	nop
		retryCount++;
		_delay_us(2);
	} while( !( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ) );				//!DIRECT_READ(reg, bitmask)
     242:	4a 9b       	sbis	0x09, 2	; 9
     244:	f7 cf       	rjmp	.-18     	; 0x234 <readDHT22+0x24>

	
	// Send the activate pulse
//	cli();
	DHT22_PORT_OUT &= ~(1 << ( DHT22_PIN )); 							//DIRECT_WRITE_LOW(reg, bitmask);
     246:	5a 98       	cbi	0x0b, 2	; 11
	DHT22_DDR |= 1 << ( DHT22_PIN );								//DIRECT_MODE_OUTPUT(reg, bitmask); // Output Low
     248:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	ef e9       	ldi	r30, 0x9F	; 159
     24c:	ff e0       	ldi	r31, 0x0F	; 15
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <readDHT22+0x3e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <readDHT22+0x44>
     254:	00 00       	nop
//	sei();
	_delay_ms(2); 										// spec is 1 to 10ms
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));							// Switch back to input so pin can float
     256:	52 98       	cbi	0x0a, 2	; 10
	DHT22_PORT_OUT |= (1 << ( DHT22_PIN )); // Enable pullup.
     258:	5a 9a       	sbi	0x0b, 2	; 11
     25a:	2a e1       	ldi	r18, 0x1A	; 26
     25c:	03 c0       	rjmp	.+6      	; 0x264 <readDHT22+0x54>
     25e:	21 50       	subi	r18, 0x01	; 1

	// Find the start of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
     260:	09 f4       	brne	.+2      	; 0x264 <readDHT22+0x54>
     262:	a4 c0       	rjmp	.+328    	; 0x3ac <readDHT22+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	f5 e0       	ldi	r31, 0x05	; 5
     266:	fa 95       	dec	r31
     268:	f1 f7       	brne	.-4      	; 0x266 <readDHT22+0x56>
     26a:	00 00       	nop
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ); // While pin is 1.
     26c:	4a 99       	sbic	0x09, 2	; 9
     26e:	f7 cf       	rjmp	.-18     	; 0x25e <readDHT22+0x4e>
     270:	23 e3       	ldi	r18, 0x33	; 51
     272:	03 c0       	rjmp	.+6      	; 0x27a <readDHT22+0x6a>
     274:	21 50       	subi	r18, 0x01	; 1

	// Find the transition of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     276:	09 f4       	brne	.+2      	; 0x27a <readDHT22+0x6a>
     278:	9b c0       	rjmp	.+310    	; 0x3b0 <readDHT22+0x1a0>
     27a:	35 e0       	ldi	r19, 0x05	; 5
     27c:	3a 95       	dec	r19
     27e:	f1 f7       	brne	.-4      	; 0x27c <readDHT22+0x6c>
     280:	00 00       	nop
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     282:	4a 9b       	sbis	0x09, 2	; 9
     284:	f7 cf       	rjmp	.-18     	; 0x274 <readDHT22+0x64>
     286:	23 e3       	ldi	r18, 0x33	; 51
     288:	03 c0       	rjmp	.+6      	; 0x290 <readDHT22+0x80>
     28a:	21 50       	subi	r18, 0x01	; 1

	// Find the end of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     28c:	09 f4       	brne	.+2      	; 0x290 <readDHT22+0x80>
     28e:	92 c0       	rjmp	.+292    	; 0x3b4 <readDHT22+0x1a4>
     290:	e5 e0       	ldi	r30, 0x05	; 5
     292:	ea 95       	dec	r30
     294:	f1 f7       	brne	.-4      	; 0x292 <readDHT22+0x82>
     296:	00 00       	nop
		{
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     298:	4a 99       	sbic	0x09, 2	; 9
     29a:	f7 cf       	rjmp	.-18     	; 0x28a <readDHT22+0x7a>
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	d1 2c       	mov	r13, r1
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	10 e0       	ldi	r17, 0x00	; 0
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2aa:	e1 2c       	mov	r14, r1
			{
				rawTemperature |= (1 << (31 - i));
			}
			if ((i > 31) && (i < 40))  // CRC data
			{
				checkSum |= (1 << (39 - i));
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f7 e2       	ldi	r31, 0x27	; 39
     2b0:	8f 2e       	mov	r8, r31
     2b2:	91 2c       	mov	r9, r1
     2b4:	f0 2d       	mov	r31, r0
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	70 e0       	ldi	r23, 0x00	; 0
			{
				rawHumidity |= (1 << (15 - i));
			}
			if ((i > 15) && (i < 32))  // Temperature
			{
				rawTemperature |= (1 << (31 - i));
     2ba:	af e1       	ldi	r26, 0x1F	; 31
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
		{
			if (i < 16) // Humidity 
			{
				rawHumidity |= (1 << (15 - i));
     2be:	0f 2e       	mov	r0, r31
     2c0:	ff e0       	ldi	r31, 0x0F	; 15
     2c2:	6f 2e       	mov	r6, r31
     2c4:	71 2c       	mov	r7, r1
     2c6:	f0 2d       	mov	r31, r0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <readDHT22+0xc2>
	{
		// Find the start of the sync pulse
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
     2ca:	14 32       	cpi	r17, 0x24	; 36
     2cc:	10 f0       	brcs	.+4      	; 0x2d2 <readDHT22+0xc2>
     2ce:	74 c0       	rjmp	.+232    	; 0x3b8 <readDHT22+0x1a8>
     2d0:	1e 2d       	mov	r17, r14
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
     2d2:	1f 5f       	subi	r17, 0xFF	; 255
     2d4:	f5 e0       	ldi	r31, 0x05	; 5
     2d6:	fa 95       	dec	r31
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <readDHT22+0xc6>
     2da:	00 00       	nop
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2dc:	4a 9b       	sbis	0x09, 2	; 9
     2de:	f5 cf       	rjmp	.-22     	; 0x2ca <readDHT22+0xba>
     2e0:	1e 2d       	mov	r17, r14
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <readDHT22+0xda>
		
		// Measure the width of the data pulse
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
     2e4:	13 33       	cpi	r17, 0x33	; 51
     2e6:	09 f4       	brne	.+2      	; 0x2ea <readDHT22+0xda>
     2e8:	69 c0       	rjmp	.+210    	; 0x3bc <readDHT22+0x1ac>
			{
				return DHT_ERROR_DATA_TIMEOUT;
			}
			retryCount++;
     2ea:	1f 5f       	subi	r17, 0xFF	; 255
     2ec:	e5 e0       	ldi	r30, 0x05	; 5
     2ee:	ea 95       	dec	r30
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <readDHT22+0xde>
     2f2:	00 00       	nop
			_delay_us(2);
		} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     2f4:	4a 99       	sbic	0x09, 2	; 9
     2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <readDHT22+0xd4>

		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
     2f8:	15 31       	cpi	r17, 0x15	; 21
     2fa:	80 f1       	brcs	.+96     	; 0x35c <readDHT22+0x14c>
		{
			if (i < 16) // Humidity 
     2fc:	00 31       	cpi	r16, 0x10	; 16
     2fe:	70 f4       	brcc	.+28     	; 0x31c <readDHT22+0x10c>
			{
				rawHumidity |= (1 << (15 - i));
     300:	53 01       	movw	r10, r6
     302:	a0 1a       	sub	r10, r16
     304:	b1 08       	sbc	r11, r1
     306:	ba 82       	std	Y+2, r11	; 0x02
     308:	a9 82       	std	Y+1, r10	; 0x01
     30a:	5b 01       	movw	r10, r22
     30c:	09 80       	ldd	r0, Y+1	; 0x01
     30e:	02 c0       	rjmp	.+4      	; 0x314 <readDHT22+0x104>
     310:	aa 0c       	add	r10, r10
     312:	bb 1c       	adc	r11, r11
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <readDHT22+0x100>
     318:	4a 29       	or	r20, r10
     31a:	5b 29       	or	r21, r11
			}
			if ((i > 15) && (i < 32))  // Temperature
     31c:	10 ef       	ldi	r17, 0xF0	; 240
     31e:	10 0f       	add	r17, r16
     320:	10 31       	cpi	r17, 0x10	; 16
     322:	70 f4       	brcc	.+28     	; 0x340 <readDHT22+0x130>
			{
				rawTemperature |= (1 << (31 - i));
     324:	fd 01       	movw	r30, r26
     326:	e0 1b       	sub	r30, r16
     328:	f1 09       	sbc	r31, r1
     32a:	fa 83       	std	Y+2, r31	; 0x02
     32c:	e9 83       	std	Y+1, r30	; 0x01
     32e:	5b 01       	movw	r10, r22
     330:	09 80       	ldd	r0, Y+1	; 0x01
     332:	02 c0       	rjmp	.+4      	; 0x338 <readDHT22+0x128>
     334:	aa 0c       	add	r10, r10
     336:	bb 1c       	adc	r11, r11
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <readDHT22+0x124>
     33c:	2a 29       	or	r18, r10
     33e:	3b 29       	or	r19, r11
			}
			if ((i > 31) && (i < 40))  // CRC data
     340:	10 ee       	ldi	r17, 0xE0	; 224
     342:	10 0f       	add	r17, r16
     344:	18 30       	cpi	r17, 0x08	; 8
     346:	50 f4       	brcc	.+20     	; 0x35c <readDHT22+0x14c>
			{
				checkSum |= (1 << (39 - i));
     348:	54 01       	movw	r10, r8
     34a:	a0 1a       	sub	r10, r16
     34c:	b1 08       	sbc	r11, r1
     34e:	fb 01       	movw	r30, r22
     350:	02 c0       	rjmp	.+4      	; 0x356 <readDHT22+0x146>
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	aa 94       	dec	r10
     358:	e2 f7       	brpl	.-8      	; 0x352 <readDHT22+0x142>
     35a:	de 2a       	or	r13, r30
	
	
	// Here sensor pulled down to start transmitting bits.

	// Read the 40 bit data stream
	for(i = 0; i < DHT22_DATA_BIT_COUNT; i++)
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	08 32       	cpi	r16, 0x28	; 40
     360:	08 f4       	brcc	.+2      	; 0x364 <readDHT22+0x154>
     362:	b6 cf       	rjmp	.-148    	; 0x2d0 <readDHT22+0xc0>
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     364:	ed 2d       	mov	r30, r13
     366:	f0 e0       	ldi	r31, 0x00	; 0
	// 26~28us == logical 0
	// 70us	   == logical 1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
     368:	a5 2f       	mov	r26, r21
     36a:	bb 27       	eor	r27, r27
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     36c:	a4 0f       	add	r26, r20
     36e:	b1 1d       	adc	r27, r1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
     370:	63 2f       	mov	r22, r19
     372:	77 27       	eor	r23, r23
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     374:	6a 0f       	add	r22, r26
     376:	7b 1f       	adc	r23, r27
     378:	62 0f       	add	r22, r18
     37a:	71 1d       	adc	r23, r1
     37c:	77 27       	eor	r23, r23
     37e:	e6 17       	cp	r30, r22
     380:	f7 07       	cpc	r31, r23
     382:	f1 f4       	brne	.+60     	; 0x3c0 <readDHT22+0x1b0>
		{
			data->temperature_integral = (int8_t)(rawTemperature / 10);
			data->temperature_decimal = (uint8_t)(rawTemperature % 10);			
		}
#else
		if(rawTemperature & 0x8000)	// Check if temperature is below zero, non standard way of encoding negative numbers!
     384:	33 23       	and	r19, r19
     386:	44 f4       	brge	.+16     	; 0x398 <readDHT22+0x188>
		{
			rawTemperature &= 0x7FFF; // Remove signal bit
     388:	3f 77       	andi	r19, 0x7F	; 127
			data->raw_temperature = ((int16_t)rawTemperature) * -1;
     38a:	31 95       	neg	r19
     38c:	21 95       	neg	r18
     38e:	31 09       	sbc	r19, r1
     390:	fc 01       	movw	r30, r24
     392:	31 83       	std	Z+1, r19	; 0x01
     394:	20 83       	st	Z, r18
     396:	03 c0       	rjmp	.+6      	; 0x39e <readDHT22+0x18e>
		} else
		{
			data->raw_temperature  = rawTemperature;
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
		}	
		data->raw_humidity = rawHumidity;
     39e:	fc 01       	movw	r30, r24
     3a0:	53 83       	std	Z+3, r21	; 0x03
     3a2:	42 83       	std	Z+2, r20	; 0x02
#endif
		return DHT_ERROR_NONE;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <readDHT22+0x1b2>
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
		{
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <readDHT22+0x1b2>
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			return DHT_ERROR_ACK_TOO_LONG;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
			{
				return DHT_ERROR_SYNC_TIMEOUT;
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
			{
				return DHT_ERROR_DATA_TIMEOUT;
     3bc:	85 e0       	ldi	r24, 0x05	; 5
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <readDHT22+0x1b2>
		}	
		data->raw_humidity = rawHumidity;
#endif
		return DHT_ERROR_NONE;
	}
	return DHT_ERROR_CHECKSUM;
     3c0:	86 e0       	ldi	r24, 0x06	; 6
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	7f 90       	pop	r7
     3dc:	6f 90       	pop	r6
     3de:	08 95       	ret

000003e0 <_Z14PowerReductionv>:
const static uint8_t WDT_Multiplyer = 4;


void PowerReduction()
{
	PRR |= (1<<PRTIM1) | (1<<PRTIM2) | (1<<PRTWI);
     3e0:	e4 e6       	ldi	r30, 0x64	; 100
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	88 6c       	ori	r24, 0xC8	; 200
     3e8:	80 83       	st	Z, r24
     3ea:	08 95       	ret

000003ec <_Z24GotToSleepAndWaitForWorkv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	2f e7       	ldi	r18, 0x7F	; 127
     3ee:	8a e1       	ldi	r24, 0x1A	; 26
     3f0:	96 e0       	ldi	r25, 0x06	; 6
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <_Z24GotToSleepAndWaitForWorkv+0x6>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <_Z24GotToSleepAndWaitForWorkv+0x10>
     3fc:	00 00       	nop
}

void GotToSleepAndWaitForWork()
{
	_delay_ms(250);
	cli();
     3fe:	f8 94       	cli
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     400:	83 b7       	in	r24, 0x33	; 51
     402:	81 7f       	andi	r24, 0xF1	; 241
     404:	84 60       	ori	r24, 0x04	; 4
     406:	83 bf       	out	0x33, r24	; 51
	
	sleep_enable();
     408:	83 b7       	in	r24, 0x33	; 51
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	83 bf       	out	0x33, r24	; 51
	sei();
     40e:	78 94       	sei

	sleep_cpu();
     410:	88 95       	sleep
	cli();
     412:	f8 94       	cli
	sleep_disable();
     414:	83 b7       	in	r24, 0x33	; 51
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	83 bf       	out	0x33, r24	; 51
     41a:	8f eb       	ldi	r24, 0xBF	; 191
     41c:	9d e5       	ldi	r25, 0x5D	; 93
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <_Z24GotToSleepAndWaitForWorkv+0x32>
     422:	00 c0       	rjmp	.+0      	; 0x424 <_Z24GotToSleepAndWaitForWorkv+0x38>
     424:	00 00       	nop

	_delay_ms(12);
	sei();
     426:	78 94       	sei
     428:	08 95       	ret

0000042a <_Z29WDTPowerSave_RunAtSystemStartv>:
}

void WDTPowerSave_RunAtSystemStart()
{
	cli();
     42a:	f8 94       	cli
	
	wdt_enable(WDTO_8S);
     42c:	29 e2       	ldi	r18, 0x29	; 41
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	a8 95       	wdr
     438:	80 93 60 00 	sts	0x0060, r24
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	20 93 60 00 	sts	0x0060, r18
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     442:	e0 e6       	ldi	r30, 0x60	; 96
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 65       	ori	r24, 0x50	; 80
     44a:	80 83       	st	Z, r24
     44c:	08 95       	ret

0000044e <__vector_6>:


uint8_t WDTTriggerCount = 1;

ISR(WDT_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	
	cli();
     470:	f8 94       	cli
	
	//MCUSR = 0;
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     472:	e0 e6       	ldi	r30, 0x60	; 96
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 65       	ori	r24, 0x50	; 80
     47a:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDIF);
     47c:	80 81       	ld	r24, Z
     47e:	8f 77       	andi	r24, 0x7F	; 127
     480:	80 83       	st	Z, r24
	
	//wdt_reset();
	//WDTCSR |= (1<<WDIE);
	//WDTCSR = (0<<WDIF);
	wdt_triggered = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 4d 01 	sts	0x014D, r24
	if(WDTTriggerCount < WDT_Multiplyer)
     488:	80 91 00 01 	lds	r24, 0x0100
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	48 f4       	brcc	.+18     	; 0x4a2 <__vector_6+0x54>
	{
		WDTTriggerCount++;
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 00 01 	sts	0x0100, r24
		GotToSleepAndWaitForWork();
     496:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
	}
	if(WDTTriggerCount >= WDT_Multiplyer)
     49a:	80 91 00 01 	lds	r24, 0x0100
     49e:	84 30       	cpi	r24, 0x04	; 4
     4a0:	18 f0       	brcs	.+6      	; 0x4a8 <__vector_6+0x5a>
	{
		WDTTriggerCount = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 00 01 	sts	0x0100, r24
	}
	sei();
     4a8:	78 94       	sei
	//_delay_ms(150);
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <_Z10ReadMotionv>:
volatile uint8_t motionStatus = 0;


int ReadMotion()
{
	motionStatus = 0;
     4cc:	10 92 4c 01 	sts	0x014C, r1
	 //Just incase set motion pin to input
	 if(MOTION_PIN & (1<<MOTION_PIN_NUM))
     4d0:	4b 9b       	sbis	0x09, 3	; 9
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <_Z10ReadMotionv+0xe>
	 {
		 motionStatus = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 4c 01 	sts	0x014C, r24
	 }	
	return motionStatus;	
     4da:	80 91 4c 01 	lds	r24, 0x014C
}
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <_Z18configureMotionISRv>:

#if MOTION_ENABLE_ISR
volatile uint8_t MotionDetected = 0;
void configureMotionISR()
{
	cli();
     4e2:	f8 94       	cli
	EICRA |= (1<<ISC10) | (1<<ISC11); //Set for Rising Edge trigger
     4e4:	e9 e6       	ldi	r30, 0x69	; 105
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8c 60       	ori	r24, 0x0C	; 12
     4ec:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1) | (1<<INT0);
     4ee:	8d b3       	in	r24, 0x1d	; 29
     4f0:	83 60       	ori	r24, 0x03	; 3
     4f2:	8d bb       	out	0x1d, r24	; 29
     4f4:	08 95       	ret

000004f6 <__vector_2>:
};


//ISR for Motion INT1
ISR(INT1_vect)
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	8f 93       	push	r24
	cli();
     502:	f8 94       	cli
	sleep_disable();
     504:	83 b7       	in	r24, 0x33	; 51
     506:	8e 7f       	andi	r24, 0xFE	; 254
     508:	83 bf       	out	0x33, r24	; 51
	motionStatus = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 4c 01 	sts	0x014C, r24
	MotionDetected = 1;
     510:	80 93 4b 01 	sts	0x014B, r24
	EIMSK &= ~(1<<INT1); //Disable Interupt untill it has a chance to transmit, is re-enabled after transmit	
     514:	e9 98       	cbi	0x1d, 1	; 29
	sei();	
     516:	78 94       	sei
}
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_1>:

ISR(INT0_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1

//test wake from sleep for data receive
//should only need to be here to wake and notice there is USART data

}
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <_Z11CheckMotionv>:

uint8_t justTriggeredByMotionISR = 0;

void CheckMotion()
{
	if(MotionDetected)
     538:	80 91 4b 01 	lds	r24, 0x014B
     53c:	88 23       	and	r24, r24
     53e:	29 f1       	breq	.+74     	; 0x58a <_Z11CheckMotionv+0x52>
	{
		//MotionDetected = 0;
		justTriggeredByMotionISR = 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 2d 01 	sts	0x012D, r24
		sprintf(buffer,"M:%d\r\n",1);
     546:	1f 92       	push	r1
     548:	8f 93       	push	r24
     54a:	84 e2       	ldi	r24, 0x24	; 36
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	8f e2       	ldi	r24, 0x2F	; 47
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	0e 94 4f 0b 	call	0x169e	; 0x169e <sprintf>
		serial.sendString(buffer);
     55e:	8f e2       	ldi	r24, 0x2F	; 47
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN6Serial10sendStringEPKc>
		MotionDetected = 0;
     566:	10 92 4b 01 	sts	0x014B, r1
     56a:	2f e7       	ldi	r18, 0x7F	; 127
     56c:	89 ea       	ldi	r24, 0xA9	; 169
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	21 50       	subi	r18, 0x01	; 1
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <_Z11CheckMotionv+0x38>
     578:	00 c0       	rjmp	.+0      	; 0x57a <_Z11CheckMotionv+0x42>
     57a:	00 00       	nop
		_delay_ms(150); // wait for transmission to finish		
		EIMSK |= (1<<INT1);
     57c:	e9 9a       	sbi	0x1d, 1	; 29
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	08 95       	ret

0000058c <main>:
uint8_t tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
//NRF24 references

int main(void)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	00 d0       	rcall	.+0      	; 0x592 <main+0x6>
     592:	00 d0       	rcall	.+0      	; 0x594 <main+0x8>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	nrf24_tx_address(tx_address);
	nrf24_rx_address(rx_address);
	#endif
	
	
	DDRD &= ~(1<<3); //set motion Pin as input
     598:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1<<3); //Make sure pullup is disabled.
     59a:	5b 98       	cbi	0x0b, 3	; 11
	WDTPowerSave_RunAtSystemStart();
     59c:	0e 94 15 02 	call	0x42a	; 0x42a <_Z29WDTPowerSave_RunAtSystemStartv>
	PowerReduction();
     5a0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z14PowerReductionv>
	init(); //Starts timer for millis and micro and delay()
     5a4:	0e 94 b2 04 	call	0x964	; 0x964 <init>
	delay(250);
     5a8:	6a ef       	ldi	r22, 0xFA	; 250
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 88 04 	call	0x910	; 0x910 <delay>
	
	
	serial.begin();
     5b4:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN6Serial5beginEv>
	uint16_t light = 0;
	uint8_t motionData = 0;
	serial.sendString("Boot Complete\r\n");
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN6Serial10sendStringEPKc>
	double Ftemp = 0.0;
	DHT22_DATA_t sensor_values;
	configureMotionISR();
     5c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z18configureMotionISRv>
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f1 e1       	ldi	r31, 0x11	; 17
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	ff 2e       	mov	r15, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	0f e2       	ldi	r16, 0x2F	; 47
     5d2:	11 e0       	ldi	r17, 0x01	; 1
	DHT22_DATA_t sensor_values;
	configureMotionISR();
	//DHT22_ERROR_t error;
    for(;;)
	{		
		if(!justTriggeredByMotionISR)
     5d4:	80 91 2d 01 	lds	r24, 0x012D
     5d8:	81 11       	cpse	r24, r1
     5da:	4f c0       	rjmp	.+158    	; 0x67a <main+0xee>
		{ 
		 cli();
     5dc:	f8 94       	cli
		 readDHT22(&sensor_values);		 
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 08 01 	call	0x210	; 0x210 <readDHT22>
		 sei();
     5e6:	78 94       	sei
		 light = ADCsingleREAD(0);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z13ADCsingleREADh>
     5ee:	d8 2e       	mov	r13, r24
     5f0:	c9 2e       	mov	r12, r25
		 motionData = ReadMotion();
     5f2:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z10ReadMotionv>
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     5f6:	9c 01       	movw	r18, r24
     5f8:	33 27       	eor	r19, r19
     5fa:	3f 93       	push	r19
     5fc:	2f 93       	push	r18
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	6b 81       	ldd	r22, Y+3	; 0x03
     604:	7c 81       	ldd	r23, Y+4	; 0x04
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__floatunsisf>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e2       	ldi	r20, 0x20	; 32
     614:	51 e4       	ldi	r21, 0x41	; 65
     616:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	7f 93       	push	r23
     620:	6f 93       	push	r22
		 cli();
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
     622:	69 81       	ldd	r22, Y+1	; 0x01
     624:	7a 81       	ldd	r23, Y+2	; 0x02
     626:	88 27       	eor	r24, r24
     628:	77 fd       	sbrc	r23, 7
     62a:	80 95       	com	r24
     62c:	98 2f       	mov	r25, r24
     62e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatsisf>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e2       	ldi	r20, 0x20	; 32
     638:	51 e4       	ldi	r21, 0x41	; 65
     63a:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
     63e:	26 e6       	ldi	r18, 0x66	; 102
     640:	36 e6       	ldi	r19, 0x66	; 102
     642:	46 ee       	ldi	r20, 0xE6	; 230
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsf3>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	52 e4       	ldi	r21, 0x42	; 66
     652:	0e 94 c0 04 	call	0x980	; 0x980 <__addsf3>
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	7f 93       	push	r23
     65c:	6f 93       	push	r22
     65e:	ff 92       	push	r15
     660:	ef 92       	push	r14
     662:	1f 93       	push	r17
     664:	0f 93       	push	r16
     666:	0e 94 4f 0b 	call	0x169e	; 0x169e <sprintf>
		 
		 /* Or you might want to power down after TX */
		 // nrf24_powerDown();
		 
		 
		 serial.sendString(buffer);
     66a:	c8 01       	movw	r24, r16
     66c:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN6Serial10sendStringEPKc>
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
		}
		if(serial.UART_RX_Data_Waiting)
     67a:	80 91 2e 01 	lds	r24, 0x012E
     67e:	81 11       	cpse	r24, r1
     680:	02 c0       	rjmp	.+4      	; 0x686 <main+0xfa>
			//serial.RxBuf
			//serial.sendString(serial.getReceivedData());
		}
		else
		{
			justTriggeredByMotionISR = 0;
     682:	10 92 2d 01 	sts	0x012D, r1
	wdt_enable(WDTO_8S);	
}

void Reset_WDT_Timer()
{
	wdt_reset();
     686:	a8 95       	wdr
		}
		 Reset_WDT_Timer();
		 GotToSleepAndWaitForWork();
     688:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
		 CheckMotion();
     68c:	0e 94 9c 02 	call	0x538	; 0x538 <_Z11CheckMotionv>
				
	}
     690:	a1 cf       	rjmp	.-190    	; 0x5d4 <main+0x48>

00000692 <_Z16add_charToBufferh>:

void add_charToBuffer(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     692:	40 91 92 01 	lds	r20, 0x0192
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	4f 5f       	subi	r20, 0xFF	; 255
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	4f 73       	andi	r20, 0x3F	; 63
     69e:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail );/* wait for free space in buffer */	
     6a0:	20 91 91 01 	lds	r18, 0x0191
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	42 17       	cp	r20, r18
     6a8:	53 07       	cpc	r21, r19
     6aa:	d1 f3       	breq	.-12     	; 0x6a0 <_Z16add_charToBufferh+0xe>

	TxBuf[tmphead] = data;
     6ac:	fa 01       	movw	r30, r20
     6ae:	ed 56       	subi	r30, 0x6D	; 109
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     6b4:	40 93 92 01 	sts	0x0192, r20

	/* enable UDRE interrupt */
	UCSRB    |= (1<<UDRIE0);
     6b8:	e1 ec       	ldi	r30, 0xC1	; 193
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	80 62       	ori	r24, 0x20	; 32
     6c0:	80 83       	st	Z, r24
     6c2:	08 95       	ret

000006c4 <_Z18add_charToRxBufferh>:

void add_charToRxBuffer(uint8_t data)
{
	uint16_t tmpheadRx;

	tmpheadRx  = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
     6c4:	40 91 50 01 	lds	r20, 0x0150
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	4f 5f       	subi	r20, 0xFF	; 255
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	4f 73       	andi	r20, 0x3F	; 63
     6d0:	55 27       	eor	r21, r21

	while ( tmpheadRx == UART_RxTail );/* wait for free space in buffer */
     6d2:	20 91 4f 01 	lds	r18, 0x014F
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	42 17       	cp	r20, r18
     6da:	53 07       	cpc	r21, r19
     6dc:	d1 f3       	breq	.-12     	; 0x6d2 <_Z18add_charToRxBufferh+0xe>

	RxBuf[tmpheadRx] = data;
     6de:	fa 01       	movw	r30, r20
     6e0:	ef 5a       	subi	r30, 0xAF	; 175
     6e2:	fe 4f       	sbci	r31, 0xFE	; 254
     6e4:	80 83       	st	Z, r24
	UART_RxHead = tmpheadRx;
     6e6:	40 93 50 01 	sts	0x0150, r20

	/* enable UDRE interrupt */
	UCSRB    |= (1<<UDRIE0);
     6ea:	e1 ec       	ldi	r30, 0xC1	; 193
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	80 62       	ori	r24, 0x20	; 32
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <_Z10uart0_putsPKc>:

	} /* uart0_putc */
	
void uart0_puts(const char *s )
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	while (*s) {
     6fc:	88 81       	ld	r24, Y
     6fe:	88 23       	and	r24, r24
     700:	31 f0       	breq	.+12     	; 0x70e <_Z10uart0_putsPKc+0x18>
     702:	21 96       	adiw	r28, 0x01	; 1
		add_charToBuffer(*s++);
     704:	0e 94 49 03 	call	0x692	; 0x692 <_Z16add_charToBufferh>

	} /* uart0_putc */
	
void uart0_puts(const char *s )
{
	while (*s) {
     708:	89 91       	ld	r24, Y+
     70a:	81 11       	cpse	r24, r1
     70c:	fb cf       	rjmp	.-10     	; 0x704 <_Z10uart0_putsPKc+0xe>
		add_charToBuffer(*s++);
	}
} /* uart0_puts */
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <_Z15configureSerialv>:

void configureSerial()
{
	UBRRH = UBRRH_VALUE;
     714:	10 92 c5 00 	sts	0x00C5, r1
	UBRRL = UBRRL_VALUE;
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSRA |= (1<<U2X);
     71e:	e0 ec       	ldi	r30, 0xC0	; 192
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 83       	st	Z, r24
     728:	08 95       	ret

0000072a <_Z11startSerialv>:
	#endif	
}

void startSerial()
{
	UART_TxHead = 0;
     72a:	10 92 92 01 	sts	0x0192, r1
	UART_TxTail = 0;
     72e:	10 92 91 01 	sts	0x0191, r1
	//UART_RxHead = 0;
	//UART_RxTail = 0;
	//Enables Both RX and TX
	UCSRB |= (1<<RXEN) | (1<<TXEN);
     732:	e1 ec       	ldi	r30, 0xC1	; 193
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	88 61       	ori	r24, 0x18	; 24
     73a:	80 83       	st	Z, r24
	
	//Enables RX Complete Interupt
	UCSR0B |= (1<<RXCIE0);
     73c:	80 81       	ld	r24, Z
     73e:	80 68       	ori	r24, 0x80	; 128
     740:	80 83       	st	Z, r24
	sei();
     742:	78 94       	sei
     744:	08 95       	ret

00000746 <_ZN6Serial10sendStringEPKc>:


char *textBuf;
void Serial::sendString(const char *text)
{	
	uart0_puts(text);
     746:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z10uart0_putsPKc>
	sei();
     74a:	78 94       	sei
	UCSR0B |= (1<<UDRIE0);
     74c:	e1 ec       	ldi	r30, 0xC1	; 193
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	80 62       	ori	r24, 0x20	; 32
     754:	80 83       	st	Z, r24
     756:	08 95       	ret

00000758 <_ZN6Serial5beginEv>:



void Serial::begin()
{
	configureSerial();
     758:	0e 94 8a 03 	call	0x714	; 0x714 <_Z15configureSerialv>
	startSerial();
     75c:	0e 94 95 03 	call	0x72a	; 0x72a <_Z11startSerialv>
     760:	08 95       	ret

00000762 <__vector_18>:

#define UART0_TRANSMIT_INTERRUPT USART_UDRE_vect

uint8_t incomming;
ISR(USART_RX_vect)
{
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	cli();
     784:	f8 94       	cli
	sleep_disable();
     786:	83 b7       	in	r24, 0x33	; 51
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	83 bf       	out	0x33, r24	; 51
	EIMSK &= ~(1<<INT0);
     78c:	e8 98       	cbi	0x1d, 0	; 29
	
	
	incomming = UDR;
     78e:	80 91 c6 00 	lds	r24, 0x00C6
     792:	80 93 4e 01 	sts	0x014E, r24
	UCSRA &= ~(1<<RXC);
     796:	e0 ec       	ldi	r30, 0xC0	; 192
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	80 83       	st	Z, r24

	if((incomming != '\0') || (incomming != '\r'))
	{		
		add_charToRxBuffer(incomming);
     7a0:	80 91 4e 01 	lds	r24, 0x014E
     7a4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z18add_charToRxBufferh>
	}
	
	//Echo back for testing
	//UDR = incomming;
	
	EIMSK |= (1<<INT0);
     7a8:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
     7aa:	78 94       	sei
}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
	uint16_t tmptail;

 	if ( UART_TxHead != UART_TxTail) {
     7e0:	90 91 92 01 	lds	r25, 0x0192
     7e4:	80 91 91 01 	lds	r24, 0x0191
     7e8:	98 17       	cp	r25, r24
     7ea:	79 f0       	breq	.+30     	; 0x80a <__vector_19+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
     7ec:	80 91 91 01 	lds	r24, 0x0191
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	8f 73       	andi	r24, 0x3F	; 63
     7f6:	99 27       	eor	r25, r25
		UART_TxTail = tmptail;
     7f8:	80 93 91 01 	sts	0x0191, r24
		/* get one byte from buffer and write it to UART */
		UDR = TxBuf[tmptail];  /* start transmission */
     7fc:	fc 01       	movw	r30, r24
     7fe:	ed 56       	subi	r30, 0x6D	; 109
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	80 81       	ld	r24, Z
     804:	80 93 c6 00 	sts	0x00C6, r24
     808:	05 c0       	rjmp	.+10     	; 0x814 <__vector_19+0x46>
		} else {
		/* tx buffer empty, disable UDRE interrupt */
		UCSRB &= ~(1<<UDRIE0);		
     80a:	e1 ec       	ldi	r30, 0xC1	; 193
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8f 7d       	andi	r24, 0xDF	; 223
     812:	80 83       	st	Z, r24
	}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     83c:	80 91 d4 01 	lds	r24, 0x01D4
     840:	90 91 d5 01 	lds	r25, 0x01D5
     844:	a0 91 d6 01 	lds	r26, 0x01D6
     848:	b0 91 d7 01 	lds	r27, 0x01D7
	unsigned char f = timer0_fract;
     84c:	30 91 d3 01 	lds	r19, 0x01D3

	m += MILLIS_INC;
	f += FRACT_INC;
     850:	26 e0       	ldi	r18, 0x06	; 6
     852:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     854:	2d 37       	cpi	r18, 0x7D	; 125
     856:	20 f4       	brcc	.+8      	; 0x860 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     858:	02 96       	adiw	r24, 0x02	; 2
     85a:	a1 1d       	adc	r26, r1
     85c:	b1 1d       	adc	r27, r1
     85e:	05 c0       	rjmp	.+10     	; 0x86a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     860:	29 e8       	ldi	r18, 0x89	; 137
     862:	23 0f       	add	r18, r19
		m += 1;
     864:	03 96       	adiw	r24, 0x03	; 3
     866:	a1 1d       	adc	r26, r1
     868:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     86a:	20 93 d3 01 	sts	0x01D3, r18
	timer0_millis = m;
     86e:	80 93 d4 01 	sts	0x01D4, r24
     872:	90 93 d5 01 	sts	0x01D5, r25
     876:	a0 93 d6 01 	sts	0x01D6, r26
     87a:	b0 93 d7 01 	sts	0x01D7, r27
	timer0_overflow_count++;
     87e:	80 91 d8 01 	lds	r24, 0x01D8
     882:	90 91 d9 01 	lds	r25, 0x01D9
     886:	a0 91 da 01 	lds	r26, 0x01DA
     88a:	b0 91 db 01 	lds	r27, 0x01DB
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
     894:	80 93 d8 01 	sts	0x01D8, r24
     898:	90 93 d9 01 	sts	0x01D9, r25
     89c:	a0 93 da 01 	sts	0x01DA, r26
     8a0:	b0 93 db 01 	sts	0x01DB, r27
}
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	3f 91       	pop	r19
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     8ba:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     8bc:	f8 94       	cli
	m = timer0_overflow_count;
     8be:	80 91 d8 01 	lds	r24, 0x01D8
     8c2:	90 91 d9 01 	lds	r25, 0x01D9
     8c6:	a0 91 da 01 	lds	r26, 0x01DA
     8ca:	b0 91 db 01 	lds	r27, 0x01DB
	#if defined(TCNT0)
	t = TCNT0;
     8ce:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     8d0:	a8 9b       	sbis	0x15, 0	; 21
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <micros+0x1e>
     8d4:	2f 3f       	cpi	r18, 0xFF	; 255
     8d6:	c1 f4       	brne	.+48     	; 0x908 <__stack+0x9>
	#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
	m++;
	#endif

	SREG = oldSREG;
     8d8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     8da:	ba 2f       	mov	r27, r26
     8dc:	a9 2f       	mov	r26, r25
     8de:	98 2f       	mov	r25, r24
     8e0:	88 27       	eor	r24, r24
     8e2:	82 0f       	add	r24, r18
     8e4:	91 1d       	adc	r25, r1
     8e6:	a1 1d       	adc	r26, r1
     8e8:	b1 1d       	adc	r27, r1
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	aa 1f       	adc	r26, r26
     8f0:	bb 1f       	adc	r27, r27
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	bc 01       	movw	r22, r24
     8fc:	cd 01       	movw	r24, r26
     8fe:	66 0f       	add	r22, r22
     900:	77 1f       	adc	r23, r23
     902:	88 1f       	adc	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	08 95       	ret
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
	m++;
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	a1 1d       	adc	r26, r1
     90c:	b1 1d       	adc	r27, r1
     90e:	e4 cf       	rjmp	.-56     	; 0x8d8 <micros+0x1e>

00000910 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	6b 01       	movw	r12, r22
     91e:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     920:	0e 94 5d 04 	call	0x8ba	; 0x8ba <micros>
     924:	eb 01       	movw	r28, r22

	while (ms > 0) {
     926:	c1 14       	cp	r12, r1
     928:	d1 04       	cpc	r13, r1
     92a:	e1 04       	cpc	r14, r1
     92c:	f1 04       	cpc	r15, r1
     92e:	99 f0       	breq	.+38     	; 0x956 <delay+0x46>
		if (((uint16_t)micros() - start) >= 1000) {
     930:	0e 94 5d 04 	call	0x8ba	; 0x8ba <micros>
     934:	6c 1b       	sub	r22, r28
     936:	7d 0b       	sbc	r23, r29
     938:	68 3e       	cpi	r22, 0xE8	; 232
     93a:	73 40       	sbci	r23, 0x03	; 3
     93c:	38 f0       	brcs	.+14     	; 0x94c <delay+0x3c>
			ms--;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	c8 1a       	sub	r12, r24
     942:	d1 08       	sbc	r13, r1
     944:	e1 08       	sbc	r14, r1
     946:	f1 08       	sbc	r15, r1
			start += 1000;
     948:	c8 51       	subi	r28, 0x18	; 24
     94a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     94c:	c1 14       	cp	r12, r1
     94e:	d1 04       	cpc	r13, r1
     950:	e1 04       	cpc	r14, r1
     952:	f1 04       	cpc	r15, r1
     954:	69 f7       	brne	.-38     	; 0x930 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	08 95       	ret

00000964 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     964:	78 94       	sei
	
	///#if defined(__AVR_ATMEGA328P__) 
	//Setting up timer
	//328
	#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
     966:	84 b5       	in	r24, 0x24	; 36
     968:	83 60       	ori	r24, 0x03	; 3
     96a:	84 bd       	out	0x24, r24	; 36
	//#if F_CPU==(16000000UL)
	TCCR0B |= (1<<CS01) | (1<<CS00);
     96c:	85 b5       	in	r24, 0x25	; 37
     96e:	83 60       	ori	r24, 0x03	; 3
     970:	85 bd       	out	0x25, r24	; 37
	//#elif F_CPU==(1000000UL)
	//TCCR0B |= (0<<CS01) | (1<<CS00);
	//#endif
	
	//Enabling Timer OVF Interupt
	TIMSK0 |= (1<< TOIE0);
     972:	ee e6       	ldi	r30, 0x6E	; 110
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 83       	st	Z, r24
     97c:	08 95       	ret

0000097e <__subsf3>:
     97e:	50 58       	subi	r21, 0x80	; 128

00000980 <__addsf3>:
     980:	bb 27       	eor	r27, r27
     982:	aa 27       	eor	r26, r26
     984:	0e d0       	rcall	.+28     	; 0x9a2 <__addsf3x>
     986:	1c c1       	rjmp	.+568    	; 0xbc0 <__fp_round>
     988:	0d d1       	rcall	.+538    	; 0xba4 <__fp_pscA>
     98a:	30 f0       	brcs	.+12     	; 0x998 <__addsf3+0x18>
     98c:	12 d1       	rcall	.+548    	; 0xbb2 <__fp_pscB>
     98e:	20 f0       	brcs	.+8      	; 0x998 <__addsf3+0x18>
     990:	31 f4       	brne	.+12     	; 0x99e <__addsf3+0x1e>
     992:	9f 3f       	cpi	r25, 0xFF	; 255
     994:	11 f4       	brne	.+4      	; 0x99a <__addsf3+0x1a>
     996:	1e f4       	brtc	.+6      	; 0x99e <__addsf3+0x1e>
     998:	02 c1       	rjmp	.+516    	; 0xb9e <__fp_nan>
     99a:	0e f4       	brtc	.+2      	; 0x99e <__addsf3+0x1e>
     99c:	e0 95       	com	r30
     99e:	e7 fb       	bst	r30, 7
     9a0:	f8 c0       	rjmp	.+496    	; 0xb92 <__fp_inf>

000009a2 <__addsf3x>:
     9a2:	e9 2f       	mov	r30, r25
     9a4:	1e d1       	rcall	.+572    	; 0xbe2 <__fp_split3>
     9a6:	80 f3       	brcs	.-32     	; 0x988 <__addsf3+0x8>
     9a8:	ba 17       	cp	r27, r26
     9aa:	62 07       	cpc	r22, r18
     9ac:	73 07       	cpc	r23, r19
     9ae:	84 07       	cpc	r24, r20
     9b0:	95 07       	cpc	r25, r21
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <__addsf3x+0x18>
     9b4:	71 f4       	brne	.+28     	; 0x9d2 <__addsf3x+0x30>
     9b6:	9e f5       	brtc	.+102    	; 0xa1e <__addsf3x+0x7c>
     9b8:	36 c1       	rjmp	.+620    	; 0xc26 <__fp_zero>
     9ba:	0e f4       	brtc	.+2      	; 0x9be <__addsf3x+0x1c>
     9bc:	e0 95       	com	r30
     9be:	0b 2e       	mov	r0, r27
     9c0:	ba 2f       	mov	r27, r26
     9c2:	a0 2d       	mov	r26, r0
     9c4:	0b 01       	movw	r0, r22
     9c6:	b9 01       	movw	r22, r18
     9c8:	90 01       	movw	r18, r0
     9ca:	0c 01       	movw	r0, r24
     9cc:	ca 01       	movw	r24, r20
     9ce:	a0 01       	movw	r20, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	ff 27       	eor	r31, r31
     9d4:	59 1b       	sub	r21, r25
     9d6:	99 f0       	breq	.+38     	; 0x9fe <__addsf3x+0x5c>
     9d8:	59 3f       	cpi	r21, 0xF9	; 249
     9da:	50 f4       	brcc	.+20     	; 0x9f0 <__addsf3x+0x4e>
     9dc:	50 3e       	cpi	r21, 0xE0	; 224
     9de:	68 f1       	brcs	.+90     	; 0xa3a <__addsf3x+0x98>
     9e0:	1a 16       	cp	r1, r26
     9e2:	f0 40       	sbci	r31, 0x00	; 0
     9e4:	a2 2f       	mov	r26, r18
     9e6:	23 2f       	mov	r18, r19
     9e8:	34 2f       	mov	r19, r20
     9ea:	44 27       	eor	r20, r20
     9ec:	58 5f       	subi	r21, 0xF8	; 248
     9ee:	f3 cf       	rjmp	.-26     	; 0x9d6 <__addsf3x+0x34>
     9f0:	46 95       	lsr	r20
     9f2:	37 95       	ror	r19
     9f4:	27 95       	ror	r18
     9f6:	a7 95       	ror	r26
     9f8:	f0 40       	sbci	r31, 0x00	; 0
     9fa:	53 95       	inc	r21
     9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__addsf3x+0x4e>
     9fe:	7e f4       	brtc	.+30     	; 0xa1e <__addsf3x+0x7c>
     a00:	1f 16       	cp	r1, r31
     a02:	ba 0b       	sbc	r27, r26
     a04:	62 0b       	sbc	r22, r18
     a06:	73 0b       	sbc	r23, r19
     a08:	84 0b       	sbc	r24, r20
     a0a:	ba f0       	brmi	.+46     	; 0xa3a <__addsf3x+0x98>
     a0c:	91 50       	subi	r25, 0x01	; 1
     a0e:	a1 f0       	breq	.+40     	; 0xa38 <__addsf3x+0x96>
     a10:	ff 0f       	add	r31, r31
     a12:	bb 1f       	adc	r27, r27
     a14:	66 1f       	adc	r22, r22
     a16:	77 1f       	adc	r23, r23
     a18:	88 1f       	adc	r24, r24
     a1a:	c2 f7       	brpl	.-16     	; 0xa0c <__addsf3x+0x6a>
     a1c:	0e c0       	rjmp	.+28     	; 0xa3a <__addsf3x+0x98>
     a1e:	ba 0f       	add	r27, r26
     a20:	62 1f       	adc	r22, r18
     a22:	73 1f       	adc	r23, r19
     a24:	84 1f       	adc	r24, r20
     a26:	48 f4       	brcc	.+18     	; 0xa3a <__addsf3x+0x98>
     a28:	87 95       	ror	r24
     a2a:	77 95       	ror	r23
     a2c:	67 95       	ror	r22
     a2e:	b7 95       	ror	r27
     a30:	f7 95       	ror	r31
     a32:	9e 3f       	cpi	r25, 0xFE	; 254
     a34:	08 f0       	brcs	.+2      	; 0xa38 <__addsf3x+0x96>
     a36:	b3 cf       	rjmp	.-154    	; 0x99e <__addsf3+0x1e>
     a38:	93 95       	inc	r25
     a3a:	88 0f       	add	r24, r24
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <__addsf3x+0x9e>
     a3e:	99 27       	eor	r25, r25
     a40:	ee 0f       	add	r30, r30
     a42:	97 95       	ror	r25
     a44:	87 95       	ror	r24
     a46:	08 95       	ret

00000a48 <__divsf3>:
     a48:	0c d0       	rcall	.+24     	; 0xa62 <__divsf3x>
     a4a:	ba c0       	rjmp	.+372    	; 0xbc0 <__fp_round>
     a4c:	b2 d0       	rcall	.+356    	; 0xbb2 <__fp_pscB>
     a4e:	40 f0       	brcs	.+16     	; 0xa60 <__divsf3+0x18>
     a50:	a9 d0       	rcall	.+338    	; 0xba4 <__fp_pscA>
     a52:	30 f0       	brcs	.+12     	; 0xa60 <__divsf3+0x18>
     a54:	21 f4       	brne	.+8      	; 0xa5e <__divsf3+0x16>
     a56:	5f 3f       	cpi	r21, 0xFF	; 255
     a58:	19 f0       	breq	.+6      	; 0xa60 <__divsf3+0x18>
     a5a:	9b c0       	rjmp	.+310    	; 0xb92 <__fp_inf>
     a5c:	51 11       	cpse	r21, r1
     a5e:	e4 c0       	rjmp	.+456    	; 0xc28 <__fp_szero>
     a60:	9e c0       	rjmp	.+316    	; 0xb9e <__fp_nan>

00000a62 <__divsf3x>:
     a62:	bf d0       	rcall	.+382    	; 0xbe2 <__fp_split3>
     a64:	98 f3       	brcs	.-26     	; 0xa4c <__divsf3+0x4>

00000a66 <__divsf3_pse>:
     a66:	99 23       	and	r25, r25
     a68:	c9 f3       	breq	.-14     	; 0xa5c <__divsf3+0x14>
     a6a:	55 23       	and	r21, r21
     a6c:	b1 f3       	breq	.-20     	; 0xa5a <__divsf3+0x12>
     a6e:	95 1b       	sub	r25, r21
     a70:	55 0b       	sbc	r21, r21
     a72:	bb 27       	eor	r27, r27
     a74:	aa 27       	eor	r26, r26
     a76:	62 17       	cp	r22, r18
     a78:	73 07       	cpc	r23, r19
     a7a:	84 07       	cpc	r24, r20
     a7c:	38 f0       	brcs	.+14     	; 0xa8c <__divsf3_pse+0x26>
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	44 1f       	adc	r20, r20
     a88:	aa 1f       	adc	r26, r26
     a8a:	a9 f3       	breq	.-22     	; 0xa76 <__divsf3_pse+0x10>
     a8c:	33 d0       	rcall	.+102    	; 0xaf4 <__divsf3_pse+0x8e>
     a8e:	0e 2e       	mov	r0, r30
     a90:	3a f0       	brmi	.+14     	; 0xaa0 <__divsf3_pse+0x3a>
     a92:	e0 e8       	ldi	r30, 0x80	; 128
     a94:	30 d0       	rcall	.+96     	; 0xaf6 <__divsf3_pse+0x90>
     a96:	91 50       	subi	r25, 0x01	; 1
     a98:	50 40       	sbci	r21, 0x00	; 0
     a9a:	e6 95       	lsr	r30
     a9c:	00 1c       	adc	r0, r0
     a9e:	ca f7       	brpl	.-14     	; 0xa92 <__divsf3_pse+0x2c>
     aa0:	29 d0       	rcall	.+82     	; 0xaf4 <__divsf3_pse+0x8e>
     aa2:	fe 2f       	mov	r31, r30
     aa4:	27 d0       	rcall	.+78     	; 0xaf4 <__divsf3_pse+0x8e>
     aa6:	66 0f       	add	r22, r22
     aa8:	77 1f       	adc	r23, r23
     aaa:	88 1f       	adc	r24, r24
     aac:	bb 1f       	adc	r27, r27
     aae:	26 17       	cp	r18, r22
     ab0:	37 07       	cpc	r19, r23
     ab2:	48 07       	cpc	r20, r24
     ab4:	ab 07       	cpc	r26, r27
     ab6:	b0 e8       	ldi	r27, 0x80	; 128
     ab8:	09 f0       	breq	.+2      	; 0xabc <__divsf3_pse+0x56>
     aba:	bb 0b       	sbc	r27, r27
     abc:	80 2d       	mov	r24, r0
     abe:	bf 01       	movw	r22, r30
     ac0:	ff 27       	eor	r31, r31
     ac2:	93 58       	subi	r25, 0x83	; 131
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	2a f0       	brmi	.+10     	; 0xad2 <__divsf3_pse+0x6c>
     ac8:	9e 3f       	cpi	r25, 0xFE	; 254
     aca:	51 05       	cpc	r21, r1
     acc:	68 f0       	brcs	.+26     	; 0xae8 <__divsf3_pse+0x82>
     ace:	61 c0       	rjmp	.+194    	; 0xb92 <__fp_inf>
     ad0:	ab c0       	rjmp	.+342    	; 0xc28 <__fp_szero>
     ad2:	5f 3f       	cpi	r21, 0xFF	; 255
     ad4:	ec f3       	brlt	.-6      	; 0xad0 <__divsf3_pse+0x6a>
     ad6:	98 3e       	cpi	r25, 0xE8	; 232
     ad8:	dc f3       	brlt	.-10     	; 0xad0 <__divsf3_pse+0x6a>
     ada:	86 95       	lsr	r24
     adc:	77 95       	ror	r23
     ade:	67 95       	ror	r22
     ae0:	b7 95       	ror	r27
     ae2:	f7 95       	ror	r31
     ae4:	9f 5f       	subi	r25, 0xFF	; 255
     ae6:	c9 f7       	brne	.-14     	; 0xada <__divsf3_pse+0x74>
     ae8:	88 0f       	add	r24, r24
     aea:	91 1d       	adc	r25, r1
     aec:	96 95       	lsr	r25
     aee:	87 95       	ror	r24
     af0:	97 f9       	bld	r25, 7
     af2:	08 95       	ret
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	88 1f       	adc	r24, r24
     afc:	bb 1f       	adc	r27, r27
     afe:	62 17       	cp	r22, r18
     b00:	73 07       	cpc	r23, r19
     b02:	84 07       	cpc	r24, r20
     b04:	ba 07       	cpc	r27, r26
     b06:	20 f0       	brcs	.+8      	; 0xb10 <__divsf3_pse+0xaa>
     b08:	62 1b       	sub	r22, r18
     b0a:	73 0b       	sbc	r23, r19
     b0c:	84 0b       	sbc	r24, r20
     b0e:	ba 0b       	sbc	r27, r26
     b10:	ee 1f       	adc	r30, r30
     b12:	88 f7       	brcc	.-30     	; 0xaf6 <__divsf3_pse+0x90>
     b14:	e0 95       	com	r30
     b16:	08 95       	ret

00000b18 <__floatunsisf>:
     b18:	e8 94       	clt
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <__floatsisf+0x12>

00000b1c <__floatsisf>:
     b1c:	97 fb       	bst	r25, 7
     b1e:	3e f4       	brtc	.+14     	; 0xb2e <__floatsisf+0x12>
     b20:	90 95       	com	r25
     b22:	80 95       	com	r24
     b24:	70 95       	com	r23
     b26:	61 95       	neg	r22
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	8f 4f       	sbci	r24, 0xFF	; 255
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	99 23       	and	r25, r25
     b30:	a9 f0       	breq	.+42     	; 0xb5c <__floatsisf+0x40>
     b32:	f9 2f       	mov	r31, r25
     b34:	96 e9       	ldi	r25, 0x96	; 150
     b36:	bb 27       	eor	r27, r27
     b38:	93 95       	inc	r25
     b3a:	f6 95       	lsr	r31
     b3c:	87 95       	ror	r24
     b3e:	77 95       	ror	r23
     b40:	67 95       	ror	r22
     b42:	b7 95       	ror	r27
     b44:	f1 11       	cpse	r31, r1
     b46:	f8 cf       	rjmp	.-16     	; 0xb38 <__floatsisf+0x1c>
     b48:	fa f4       	brpl	.+62     	; 0xb88 <__floatsisf+0x6c>
     b4a:	bb 0f       	add	r27, r27
     b4c:	11 f4       	brne	.+4      	; 0xb52 <__floatsisf+0x36>
     b4e:	60 ff       	sbrs	r22, 0
     b50:	1b c0       	rjmp	.+54     	; 0xb88 <__floatsisf+0x6c>
     b52:	6f 5f       	subi	r22, 0xFF	; 255
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	8f 4f       	sbci	r24, 0xFF	; 255
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	16 c0       	rjmp	.+44     	; 0xb88 <__floatsisf+0x6c>
     b5c:	88 23       	and	r24, r24
     b5e:	11 f0       	breq	.+4      	; 0xb64 <__floatsisf+0x48>
     b60:	96 e9       	ldi	r25, 0x96	; 150
     b62:	11 c0       	rjmp	.+34     	; 0xb86 <__floatsisf+0x6a>
     b64:	77 23       	and	r23, r23
     b66:	21 f0       	breq	.+8      	; 0xb70 <__floatsisf+0x54>
     b68:	9e e8       	ldi	r25, 0x8E	; 142
     b6a:	87 2f       	mov	r24, r23
     b6c:	76 2f       	mov	r23, r22
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <__floatsisf+0x5e>
     b70:	66 23       	and	r22, r22
     b72:	71 f0       	breq	.+28     	; 0xb90 <__floatsisf+0x74>
     b74:	96 e8       	ldi	r25, 0x86	; 134
     b76:	86 2f       	mov	r24, r22
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	2a f0       	brmi	.+10     	; 0xb88 <__floatsisf+0x6c>
     b7e:	9a 95       	dec	r25
     b80:	66 0f       	add	r22, r22
     b82:	77 1f       	adc	r23, r23
     b84:	88 1f       	adc	r24, r24
     b86:	da f7       	brpl	.-10     	; 0xb7e <__floatsisf+0x62>
     b88:	88 0f       	add	r24, r24
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	97 f9       	bld	r25, 7
     b90:	08 95       	ret

00000b92 <__fp_inf>:
     b92:	97 f9       	bld	r25, 7
     b94:	9f 67       	ori	r25, 0x7F	; 127
     b96:	80 e8       	ldi	r24, 0x80	; 128
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	08 95       	ret

00000b9e <__fp_nan>:
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	80 ec       	ldi	r24, 0xC0	; 192
     ba2:	08 95       	ret

00000ba4 <__fp_pscA>:
     ba4:	00 24       	eor	r0, r0
     ba6:	0a 94       	dec	r0
     ba8:	16 16       	cp	r1, r22
     baa:	17 06       	cpc	r1, r23
     bac:	18 06       	cpc	r1, r24
     bae:	09 06       	cpc	r0, r25
     bb0:	08 95       	ret

00000bb2 <__fp_pscB>:
     bb2:	00 24       	eor	r0, r0
     bb4:	0a 94       	dec	r0
     bb6:	12 16       	cp	r1, r18
     bb8:	13 06       	cpc	r1, r19
     bba:	14 06       	cpc	r1, r20
     bbc:	05 06       	cpc	r0, r21
     bbe:	08 95       	ret

00000bc0 <__fp_round>:
     bc0:	09 2e       	mov	r0, r25
     bc2:	03 94       	inc	r0
     bc4:	00 0c       	add	r0, r0
     bc6:	11 f4       	brne	.+4      	; 0xbcc <__fp_round+0xc>
     bc8:	88 23       	and	r24, r24
     bca:	52 f0       	brmi	.+20     	; 0xbe0 <__fp_round+0x20>
     bcc:	bb 0f       	add	r27, r27
     bce:	40 f4       	brcc	.+16     	; 0xbe0 <__fp_round+0x20>
     bd0:	bf 2b       	or	r27, r31
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0x18>
     bd4:	60 ff       	sbrs	r22, 0
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__fp_round+0x20>
     bd8:	6f 5f       	subi	r22, 0xFF	; 255
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	8f 4f       	sbci	r24, 0xFF	; 255
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	08 95       	ret

00000be2 <__fp_split3>:
     be2:	57 fd       	sbrc	r21, 7
     be4:	90 58       	subi	r25, 0x80	; 128
     be6:	44 0f       	add	r20, r20
     be8:	55 1f       	adc	r21, r21
     bea:	59 f0       	breq	.+22     	; 0xc02 <__fp_splitA+0x10>
     bec:	5f 3f       	cpi	r21, 0xFF	; 255
     bee:	71 f0       	breq	.+28     	; 0xc0c <__fp_splitA+0x1a>
     bf0:	47 95       	ror	r20

00000bf2 <__fp_splitA>:
     bf2:	88 0f       	add	r24, r24
     bf4:	97 fb       	bst	r25, 7
     bf6:	99 1f       	adc	r25, r25
     bf8:	61 f0       	breq	.+24     	; 0xc12 <__fp_splitA+0x20>
     bfa:	9f 3f       	cpi	r25, 0xFF	; 255
     bfc:	79 f0       	breq	.+30     	; 0xc1c <__fp_splitA+0x2a>
     bfe:	87 95       	ror	r24
     c00:	08 95       	ret
     c02:	12 16       	cp	r1, r18
     c04:	13 06       	cpc	r1, r19
     c06:	14 06       	cpc	r1, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	f2 cf       	rjmp	.-28     	; 0xbf0 <__fp_split3+0xe>
     c0c:	46 95       	lsr	r20
     c0e:	f1 df       	rcall	.-30     	; 0xbf2 <__fp_splitA>
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <__fp_splitA+0x30>
     c12:	16 16       	cp	r1, r22
     c14:	17 06       	cpc	r1, r23
     c16:	18 06       	cpc	r1, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	f1 cf       	rjmp	.-30     	; 0xbfe <__fp_splitA+0xc>
     c1c:	86 95       	lsr	r24
     c1e:	71 05       	cpc	r23, r1
     c20:	61 05       	cpc	r22, r1
     c22:	08 94       	sec
     c24:	08 95       	ret

00000c26 <__fp_zero>:
     c26:	e8 94       	clt

00000c28 <__fp_szero>:
     c28:	bb 27       	eor	r27, r27
     c2a:	66 27       	eor	r22, r22
     c2c:	77 27       	eor	r23, r23
     c2e:	cb 01       	movw	r24, r22
     c30:	97 f9       	bld	r25, 7
     c32:	08 95       	ret

00000c34 <__mulsf3>:
     c34:	0b d0       	rcall	.+22     	; 0xc4c <__mulsf3x>
     c36:	c4 cf       	rjmp	.-120    	; 0xbc0 <__fp_round>
     c38:	b5 df       	rcall	.-150    	; 0xba4 <__fp_pscA>
     c3a:	28 f0       	brcs	.+10     	; 0xc46 <__mulsf3+0x12>
     c3c:	ba df       	rcall	.-140    	; 0xbb2 <__fp_pscB>
     c3e:	18 f0       	brcs	.+6      	; 0xc46 <__mulsf3+0x12>
     c40:	95 23       	and	r25, r21
     c42:	09 f0       	breq	.+2      	; 0xc46 <__mulsf3+0x12>
     c44:	a6 cf       	rjmp	.-180    	; 0xb92 <__fp_inf>
     c46:	ab cf       	rjmp	.-170    	; 0xb9e <__fp_nan>
     c48:	11 24       	eor	r1, r1
     c4a:	ee cf       	rjmp	.-36     	; 0xc28 <__fp_szero>

00000c4c <__mulsf3x>:
     c4c:	ca df       	rcall	.-108    	; 0xbe2 <__fp_split3>
     c4e:	a0 f3       	brcs	.-24     	; 0xc38 <__mulsf3+0x4>

00000c50 <__mulsf3_pse>:
     c50:	95 9f       	mul	r25, r21
     c52:	d1 f3       	breq	.-12     	; 0xc48 <__mulsf3+0x14>
     c54:	95 0f       	add	r25, r21
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	55 1f       	adc	r21, r21
     c5a:	62 9f       	mul	r22, r18
     c5c:	f0 01       	movw	r30, r0
     c5e:	72 9f       	mul	r23, r18
     c60:	bb 27       	eor	r27, r27
     c62:	f0 0d       	add	r31, r0
     c64:	b1 1d       	adc	r27, r1
     c66:	63 9f       	mul	r22, r19
     c68:	aa 27       	eor	r26, r26
     c6a:	f0 0d       	add	r31, r0
     c6c:	b1 1d       	adc	r27, r1
     c6e:	aa 1f       	adc	r26, r26
     c70:	64 9f       	mul	r22, r20
     c72:	66 27       	eor	r22, r22
     c74:	b0 0d       	add	r27, r0
     c76:	a1 1d       	adc	r26, r1
     c78:	66 1f       	adc	r22, r22
     c7a:	82 9f       	mul	r24, r18
     c7c:	22 27       	eor	r18, r18
     c7e:	b0 0d       	add	r27, r0
     c80:	a1 1d       	adc	r26, r1
     c82:	62 1f       	adc	r22, r18
     c84:	73 9f       	mul	r23, r19
     c86:	b0 0d       	add	r27, r0
     c88:	a1 1d       	adc	r26, r1
     c8a:	62 1f       	adc	r22, r18
     c8c:	83 9f       	mul	r24, r19
     c8e:	a0 0d       	add	r26, r0
     c90:	61 1d       	adc	r22, r1
     c92:	22 1f       	adc	r18, r18
     c94:	74 9f       	mul	r23, r20
     c96:	33 27       	eor	r19, r19
     c98:	a0 0d       	add	r26, r0
     c9a:	61 1d       	adc	r22, r1
     c9c:	23 1f       	adc	r18, r19
     c9e:	84 9f       	mul	r24, r20
     ca0:	60 0d       	add	r22, r0
     ca2:	21 1d       	adc	r18, r1
     ca4:	82 2f       	mov	r24, r18
     ca6:	76 2f       	mov	r23, r22
     ca8:	6a 2f       	mov	r22, r26
     caa:	11 24       	eor	r1, r1
     cac:	9f 57       	subi	r25, 0x7F	; 127
     cae:	50 40       	sbci	r21, 0x00	; 0
     cb0:	8a f0       	brmi	.+34     	; 0xcd4 <__mulsf3_pse+0x84>
     cb2:	e1 f0       	breq	.+56     	; 0xcec <__mulsf3_pse+0x9c>
     cb4:	88 23       	and	r24, r24
     cb6:	4a f0       	brmi	.+18     	; 0xcca <__mulsf3_pse+0x7a>
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	bb 1f       	adc	r27, r27
     cbe:	66 1f       	adc	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	88 1f       	adc	r24, r24
     cc4:	91 50       	subi	r25, 0x01	; 1
     cc6:	50 40       	sbci	r21, 0x00	; 0
     cc8:	a9 f7       	brne	.-22     	; 0xcb4 <__mulsf3_pse+0x64>
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	51 05       	cpc	r21, r1
     cce:	70 f0       	brcs	.+28     	; 0xcec <__mulsf3_pse+0x9c>
     cd0:	60 cf       	rjmp	.-320    	; 0xb92 <__fp_inf>
     cd2:	aa cf       	rjmp	.-172    	; 0xc28 <__fp_szero>
     cd4:	5f 3f       	cpi	r21, 0xFF	; 255
     cd6:	ec f3       	brlt	.-6      	; 0xcd2 <__mulsf3_pse+0x82>
     cd8:	98 3e       	cpi	r25, 0xE8	; 232
     cda:	dc f3       	brlt	.-10     	; 0xcd2 <__mulsf3_pse+0x82>
     cdc:	86 95       	lsr	r24
     cde:	77 95       	ror	r23
     ce0:	67 95       	ror	r22
     ce2:	b7 95       	ror	r27
     ce4:	f7 95       	ror	r31
     ce6:	e7 95       	ror	r30
     ce8:	9f 5f       	subi	r25, 0xFF	; 255
     cea:	c1 f7       	brne	.-16     	; 0xcdc <__mulsf3_pse+0x8c>
     cec:	fe 2b       	or	r31, r30
     cee:	88 0f       	add	r24, r24
     cf0:	91 1d       	adc	r25, r1
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	97 f9       	bld	r25, 7
     cf8:	08 95       	ret

00000cfa <vfprintf>:
     cfa:	a3 e1       	ldi	r26, 0x13	; 19
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e8       	ldi	r30, 0x83	; 131
     d00:	f6 e0       	ldi	r31, 0x06	; 6
     d02:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__prologue_saves__>
     d06:	7c 01       	movw	r14, r24
     d08:	1b 01       	movw	r2, r22
     d0a:	6a 01       	movw	r12, r20
     d0c:	fc 01       	movw	r30, r24
     d0e:	17 82       	std	Z+7, r1	; 0x07
     d10:	16 82       	std	Z+6, r1	; 0x06
     d12:	83 81       	ldd	r24, Z+3	; 0x03
     d14:	81 ff       	sbrs	r24, 1
     d16:	66 c3       	rjmp	.+1740   	; 0x13e4 <vfprintf+0x6ea>
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	4b 01       	movw	r8, r22
     d20:	f7 01       	movw	r30, r14
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	f1 01       	movw	r30, r2
     d26:	93 fd       	sbrc	r25, 3
     d28:	85 91       	lpm	r24, Z+
     d2a:	93 ff       	sbrs	r25, 3
     d2c:	81 91       	ld	r24, Z+
     d2e:	1f 01       	movw	r2, r30
     d30:	88 23       	and	r24, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <vfprintf+0x3c>
     d34:	53 c3       	rjmp	.+1702   	; 0x13dc <vfprintf+0x6e2>
     d36:	85 32       	cpi	r24, 0x25	; 37
     d38:	39 f4       	brne	.+14     	; 0xd48 <vfprintf+0x4e>
     d3a:	93 fd       	sbrc	r25, 3
     d3c:	85 91       	lpm	r24, Z+
     d3e:	93 ff       	sbrs	r25, 3
     d40:	81 91       	ld	r24, Z+
     d42:	1f 01       	movw	r2, r30
     d44:	85 32       	cpi	r24, 0x25	; 37
     d46:	39 f4       	brne	.+14     	; 0xd56 <vfprintf+0x5c>
     d48:	b7 01       	movw	r22, r14
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     d50:	56 01       	movw	r10, r12
     d52:	65 01       	movw	r12, r10
     d54:	e5 cf       	rjmp	.-54     	; 0xd20 <vfprintf+0x26>
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	51 2c       	mov	r5, r1
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	20 32       	cpi	r18, 0x20	; 32
     d5e:	a0 f4       	brcc	.+40     	; 0xd88 <vfprintf+0x8e>
     d60:	8b 32       	cpi	r24, 0x2B	; 43
     d62:	69 f0       	breq	.+26     	; 0xd7e <vfprintf+0x84>
     d64:	30 f4       	brcc	.+12     	; 0xd72 <vfprintf+0x78>
     d66:	80 32       	cpi	r24, 0x20	; 32
     d68:	59 f0       	breq	.+22     	; 0xd80 <vfprintf+0x86>
     d6a:	83 32       	cpi	r24, 0x23	; 35
     d6c:	69 f4       	brne	.+26     	; 0xd88 <vfprintf+0x8e>
     d6e:	20 61       	ori	r18, 0x10	; 16
     d70:	2c c0       	rjmp	.+88     	; 0xdca <vfprintf+0xd0>
     d72:	8d 32       	cpi	r24, 0x2D	; 45
     d74:	39 f0       	breq	.+14     	; 0xd84 <vfprintf+0x8a>
     d76:	80 33       	cpi	r24, 0x30	; 48
     d78:	39 f4       	brne	.+14     	; 0xd88 <vfprintf+0x8e>
     d7a:	21 60       	ori	r18, 0x01	; 1
     d7c:	26 c0       	rjmp	.+76     	; 0xdca <vfprintf+0xd0>
     d7e:	22 60       	ori	r18, 0x02	; 2
     d80:	24 60       	ori	r18, 0x04	; 4
     d82:	23 c0       	rjmp	.+70     	; 0xdca <vfprintf+0xd0>
     d84:	28 60       	ori	r18, 0x08	; 8
     d86:	21 c0       	rjmp	.+66     	; 0xdca <vfprintf+0xd0>
     d88:	27 fd       	sbrc	r18, 7
     d8a:	27 c0       	rjmp	.+78     	; 0xdda <vfprintf+0xe0>
     d8c:	30 ed       	ldi	r19, 0xD0	; 208
     d8e:	38 0f       	add	r19, r24
     d90:	3a 30       	cpi	r19, 0x0A	; 10
     d92:	78 f4       	brcc	.+30     	; 0xdb2 <vfprintf+0xb8>
     d94:	26 ff       	sbrs	r18, 6
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0xaa>
     d98:	fa e0       	ldi	r31, 0x0A	; 10
     d9a:	1f 9f       	mul	r17, r31
     d9c:	30 0d       	add	r19, r0
     d9e:	11 24       	eor	r1, r1
     da0:	13 2f       	mov	r17, r19
     da2:	13 c0       	rjmp	.+38     	; 0xdca <vfprintf+0xd0>
     da4:	6a e0       	ldi	r22, 0x0A	; 10
     da6:	56 9e       	mul	r5, r22
     da8:	30 0d       	add	r19, r0
     daa:	11 24       	eor	r1, r1
     dac:	53 2e       	mov	r5, r19
     dae:	20 62       	ori	r18, 0x20	; 32
     db0:	0c c0       	rjmp	.+24     	; 0xdca <vfprintf+0xd0>
     db2:	8e 32       	cpi	r24, 0x2E	; 46
     db4:	21 f4       	brne	.+8      	; 0xdbe <vfprintf+0xc4>
     db6:	26 fd       	sbrc	r18, 6
     db8:	11 c3       	rjmp	.+1570   	; 0x13dc <vfprintf+0x6e2>
     dba:	20 64       	ori	r18, 0x40	; 64
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0xd0>
     dbe:	8c 36       	cpi	r24, 0x6C	; 108
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <vfprintf+0xcc>
     dc2:	20 68       	ori	r18, 0x80	; 128
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0xd0>
     dc6:	88 36       	cpi	r24, 0x68	; 104
     dc8:	41 f4       	brne	.+16     	; 0xdda <vfprintf+0xe0>
     dca:	f1 01       	movw	r30, r2
     dcc:	93 fd       	sbrc	r25, 3
     dce:	85 91       	lpm	r24, Z+
     dd0:	93 ff       	sbrs	r25, 3
     dd2:	81 91       	ld	r24, Z+
     dd4:	1f 01       	movw	r2, r30
     dd6:	81 11       	cpse	r24, r1
     dd8:	c1 cf       	rjmp	.-126    	; 0xd5c <vfprintf+0x62>
     dda:	9b eb       	ldi	r25, 0xBB	; 187
     ddc:	98 0f       	add	r25, r24
     dde:	93 30       	cpi	r25, 0x03	; 3
     de0:	18 f4       	brcc	.+6      	; 0xde8 <vfprintf+0xee>
     de2:	20 61       	ori	r18, 0x10	; 16
     de4:	80 5e       	subi	r24, 0xE0	; 224
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0xfa>
     de8:	9b e9       	ldi	r25, 0x9B	; 155
     dea:	98 0f       	add	r25, r24
     dec:	93 30       	cpi	r25, 0x03	; 3
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <vfprintf+0xf8>
     df0:	aa c1       	rjmp	.+852    	; 0x1146 <vfprintf+0x44c>
     df2:	2f 7e       	andi	r18, 0xEF	; 239
     df4:	26 ff       	sbrs	r18, 6
     df6:	16 e0       	ldi	r17, 0x06	; 6
     df8:	2f 73       	andi	r18, 0x3F	; 63
     dfa:	72 2e       	mov	r7, r18
     dfc:	85 36       	cpi	r24, 0x65	; 101
     dfe:	21 f4       	brne	.+8      	; 0xe08 <vfprintf+0x10e>
     e00:	f2 2f       	mov	r31, r18
     e02:	f0 64       	ori	r31, 0x40	; 64
     e04:	7f 2e       	mov	r7, r31
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <vfprintf+0x11e>
     e08:	86 36       	cpi	r24, 0x66	; 102
     e0a:	21 f4       	brne	.+8      	; 0xe14 <vfprintf+0x11a>
     e0c:	62 2f       	mov	r22, r18
     e0e:	60 68       	ori	r22, 0x80	; 128
     e10:	76 2e       	mov	r7, r22
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x11e>
     e14:	11 11       	cpse	r17, r1
     e16:	11 50       	subi	r17, 0x01	; 1
     e18:	77 fe       	sbrs	r7, 7
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <vfprintf+0x130>
     e1c:	1c 33       	cpi	r17, 0x3C	; 60
     e1e:	48 f4       	brcc	.+18     	; 0xe32 <vfprintf+0x138>
     e20:	44 24       	eor	r4, r4
     e22:	43 94       	inc	r4
     e24:	41 0e       	add	r4, r17
     e26:	27 e0       	ldi	r18, 0x07	; 7
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <vfprintf+0x146>
     e2a:	18 30       	cpi	r17, 0x08	; 8
     e2c:	30 f4       	brcc	.+12     	; 0xe3a <vfprintf+0x140>
     e2e:	21 2f       	mov	r18, r17
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <vfprintf+0x144>
     e32:	27 e0       	ldi	r18, 0x07	; 7
     e34:	4c e3       	ldi	r20, 0x3C	; 60
     e36:	44 2e       	mov	r4, r20
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <vfprintf+0x146>
     e3a:	27 e0       	ldi	r18, 0x07	; 7
     e3c:	17 e0       	ldi	r17, 0x07	; 7
     e3e:	41 2c       	mov	r4, r1
     e40:	56 01       	movw	r10, r12
     e42:	74 e0       	ldi	r23, 0x04	; 4
     e44:	a7 0e       	add	r10, r23
     e46:	b1 1c       	adc	r11, r1
     e48:	f6 01       	movw	r30, r12
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	04 2d       	mov	r16, r4
     e54:	a4 01       	movw	r20, r8
     e56:	0e 94 2f 0a 	call	0x145e	; 0x145e <__ftoa_engine>
     e5a:	6c 01       	movw	r12, r24
     e5c:	09 81       	ldd	r16, Y+1	; 0x01
     e5e:	00 ff       	sbrs	r16, 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x16c>
     e62:	03 ff       	sbrs	r16, 3
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <vfprintf+0x178>
     e66:	71 fc       	sbrc	r7, 1
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <vfprintf+0x17e>
     e6a:	72 fc       	sbrc	r7, 2
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <vfprintf+0x184>
     e6e:	61 2c       	mov	r6, r1
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <vfprintf+0x188>
     e72:	3d e2       	ldi	r19, 0x2D	; 45
     e74:	63 2e       	mov	r6, r19
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <vfprintf+0x188>
     e78:	2b e2       	ldi	r18, 0x2B	; 43
     e7a:	62 2e       	mov	r6, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x188>
     e7e:	90 e2       	ldi	r25, 0x20	; 32
     e80:	69 2e       	mov	r6, r25
     e82:	80 2f       	mov	r24, r16
     e84:	8c 70       	andi	r24, 0x0C	; 12
     e86:	99 f1       	breq	.+102    	; 0xeee <vfprintf+0x1f4>
     e88:	66 20       	and	r6, r6
     e8a:	11 f0       	breq	.+4      	; 0xe90 <vfprintf+0x196>
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <vfprintf+0x198>
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	85 15       	cp	r24, r5
     e94:	10 f0       	brcs	.+4      	; 0xe9a <vfprintf+0x1a0>
     e96:	51 2c       	mov	r5, r1
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <vfprintf+0x1b6>
     e9a:	58 1a       	sub	r5, r24
     e9c:	73 fc       	sbrc	r7, 3
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <vfprintf+0x1b6>
     ea0:	b7 01       	movw	r22, r14
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     eaa:	5a 94       	dec	r5
     eac:	c9 f7       	brne	.-14     	; 0xea0 <vfprintf+0x1a6>
     eae:	f3 cf       	rjmp	.-26     	; 0xe96 <vfprintf+0x19c>
     eb0:	66 20       	and	r6, r6
     eb2:	29 f0       	breq	.+10     	; 0xebe <vfprintf+0x1c4>
     eb4:	b7 01       	movw	r22, r14
     eb6:	86 2d       	mov	r24, r6
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     ebe:	03 fd       	sbrc	r16, 3
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <vfprintf+0x1ce>
     ec2:	0c e6       	ldi	r16, 0x6C	; 108
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <vfprintf+0x1d2>
     ec8:	08 e6       	ldi	r16, 0x68	; 104
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	f7 2d       	mov	r31, r7
     ece:	f0 71       	andi	r31, 0x10	; 16
     ed0:	7f 2e       	mov	r7, r31
     ed2:	f8 01       	movw	r30, r16
     ed4:	84 91       	lpm	r24, Z
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <vfprintf+0x1e2>
     eda:	76 c2       	rjmp	.+1260   	; 0x13c8 <vfprintf+0x6ce>
     edc:	71 10       	cpse	r7, r1
     ede:	80 52       	subi	r24, 0x20	; 32
     ee0:	b7 01       	movw	r22, r14
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	f2 cf       	rjmp	.-28     	; 0xed2 <vfprintf+0x1d8>
     eee:	77 fe       	sbrs	r7, 7
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <vfprintf+0x216>
     ef2:	4c 0c       	add	r4, r12
     ef4:	04 ff       	sbrs	r16, 4
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <vfprintf+0x206>
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	81 33       	cpi	r24, 0x31	; 49
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x206>
     efe:	4a 94       	dec	r4
     f00:	14 14       	cp	r1, r4
     f02:	74 f5       	brge	.+92     	; 0xf60 <vfprintf+0x266>
     f04:	f8 e0       	ldi	r31, 0x08	; 8
     f06:	f4 15       	cp	r31, r4
     f08:	78 f5       	brcc	.+94     	; 0xf68 <vfprintf+0x26e>
     f0a:	88 e0       	ldi	r24, 0x08	; 8
     f0c:	48 2e       	mov	r4, r24
     f0e:	2c c0       	rjmp	.+88     	; 0xf68 <vfprintf+0x26e>
     f10:	76 fc       	sbrc	r7, 6
     f12:	2a c0       	rjmp	.+84     	; 0xf68 <vfprintf+0x26e>
     f14:	81 2f       	mov	r24, r17
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	8c 15       	cp	r24, r12
     f1a:	9d 05       	cpc	r25, r13
     f1c:	9c f0       	brlt	.+38     	; 0xf44 <vfprintf+0x24a>
     f1e:	6c ef       	ldi	r22, 0xFC	; 252
     f20:	c6 16       	cp	r12, r22
     f22:	6f ef       	ldi	r22, 0xFF	; 255
     f24:	d6 06       	cpc	r13, r22
     f26:	74 f0       	brlt	.+28     	; 0xf44 <vfprintf+0x24a>
     f28:	77 2d       	mov	r23, r7
     f2a:	70 68       	ori	r23, 0x80	; 128
     f2c:	77 2e       	mov	r7, r23
     f2e:	0a c0       	rjmp	.+20     	; 0xf44 <vfprintf+0x24a>
     f30:	e2 e0       	ldi	r30, 0x02	; 2
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	ec 0f       	add	r30, r28
     f36:	fd 1f       	adc	r31, r29
     f38:	e1 0f       	add	r30, r17
     f3a:	f1 1d       	adc	r31, r1
     f3c:	80 81       	ld	r24, Z
     f3e:	80 33       	cpi	r24, 0x30	; 48
     f40:	19 f4       	brne	.+6      	; 0xf48 <vfprintf+0x24e>
     f42:	11 50       	subi	r17, 0x01	; 1
     f44:	11 11       	cpse	r17, r1
     f46:	f4 cf       	rjmp	.-24     	; 0xf30 <vfprintf+0x236>
     f48:	77 fe       	sbrs	r7, 7
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <vfprintf+0x26e>
     f4c:	44 24       	eor	r4, r4
     f4e:	43 94       	inc	r4
     f50:	41 0e       	add	r4, r17
     f52:	81 2f       	mov	r24, r17
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	c8 16       	cp	r12, r24
     f58:	d9 06       	cpc	r13, r25
     f5a:	2c f4       	brge	.+10     	; 0xf66 <vfprintf+0x26c>
     f5c:	1c 19       	sub	r17, r12
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <vfprintf+0x26e>
     f60:	44 24       	eor	r4, r4
     f62:	43 94       	inc	r4
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <vfprintf+0x26e>
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	77 fe       	sbrs	r7, 7
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <vfprintf+0x280>
     f6c:	1c 14       	cp	r1, r12
     f6e:	1d 04       	cpc	r1, r13
     f70:	3c f4       	brge	.+14     	; 0xf80 <vfprintf+0x286>
     f72:	96 01       	movw	r18, r12
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <vfprintf+0x28a>
     f7a:	25 e0       	ldi	r18, 0x05	; 5
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x28a>
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	66 20       	and	r6, r6
     f86:	11 f0       	breq	.+4      	; 0xf8c <vfprintf+0x292>
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	11 23       	and	r17, r17
     f8e:	31 f0       	breq	.+12     	; 0xf9c <vfprintf+0x2a2>
     f90:	41 2f       	mov	r20, r17
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	24 0f       	add	r18, r20
     f9a:	35 1f       	adc	r19, r21
     f9c:	45 2d       	mov	r20, r5
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	24 17       	cp	r18, r20
     fa2:	35 07       	cpc	r19, r21
     fa4:	14 f4       	brge	.+4      	; 0xfaa <vfprintf+0x2b0>
     fa6:	52 1a       	sub	r5, r18
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <vfprintf+0x2b2>
     faa:	51 2c       	mov	r5, r1
     fac:	87 2d       	mov	r24, r7
     fae:	89 70       	andi	r24, 0x09	; 9
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <vfprintf+0x2ca>
     fb2:	55 20       	and	r5, r5
     fb4:	39 f0       	breq	.+14     	; 0xfc4 <vfprintf+0x2ca>
     fb6:	b7 01       	movw	r22, r14
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     fc0:	5a 94       	dec	r5
     fc2:	f7 cf       	rjmp	.-18     	; 0xfb2 <vfprintf+0x2b8>
     fc4:	66 20       	and	r6, r6
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <vfprintf+0x2d8>
     fc8:	b7 01       	movw	r22, r14
     fca:	86 2d       	mov	r24, r6
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     fd2:	73 fc       	sbrc	r7, 3
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <vfprintf+0x2ee>
     fd6:	55 20       	and	r5, r5
     fd8:	39 f0       	breq	.+14     	; 0xfe8 <vfprintf+0x2ee>
     fda:	b7 01       	movw	r22, r14
     fdc:	80 e3       	ldi	r24, 0x30	; 48
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     fe4:	5a 94       	dec	r5
     fe6:	f7 cf       	rjmp	.-18     	; 0xfd6 <vfprintf+0x2dc>
     fe8:	77 fe       	sbrs	r7, 7
     fea:	5f c0       	rjmp	.+190    	; 0x10aa <vfprintf+0x3b0>
     fec:	9c 2d       	mov	r25, r12
     fee:	8d 2d       	mov	r24, r13
     ff0:	d7 fe       	sbrs	r13, 7
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x2fe>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	69 2e       	mov	r6, r25
     ffa:	78 2e       	mov	r7, r24
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	c6 01       	movw	r24, r12
    1002:	84 19       	sub	r24, r4
    1004:	91 09       	sbc	r25, r1
    1006:	9d 87       	std	Y+13, r25	; 0x0d
    1008:	8c 87       	std	Y+12, r24	; 0x0c
    100a:	96 01       	movw	r18, r12
    100c:	26 19       	sub	r18, r6
    100e:	37 09       	sbc	r19, r7
    1010:	28 0d       	add	r18, r8
    1012:	39 1d       	adc	r19, r9
    1014:	81 2f       	mov	r24, r17
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	ee 27       	eor	r30, r30
    101a:	ff 27       	eor	r31, r31
    101c:	e8 1b       	sub	r30, r24
    101e:	f9 0b       	sbc	r31, r25
    1020:	ff 87       	std	Y+15, r31	; 0x0f
    1022:	ee 87       	std	Y+14, r30	; 0x0e
    1024:	ff ef       	ldi	r31, 0xFF	; 255
    1026:	6f 16       	cp	r6, r31
    1028:	7f 06       	cpc	r7, r31
    102a:	69 f4       	brne	.+26     	; 0x1046 <vfprintf+0x34c>
    102c:	b7 01       	movw	r22, r14
    102e:	8e e2       	ldi	r24, 0x2E	; 46
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	2b 8b       	std	Y+19, r18	; 0x13
    1034:	3a 8b       	std	Y+18, r19	; 0x12
    1036:	48 8b       	std	Y+16, r20	; 0x10
    1038:	59 8b       	std	Y+17, r21	; 0x11
    103a:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    103e:	59 89       	ldd	r21, Y+17	; 0x11
    1040:	48 89       	ldd	r20, Y+16	; 0x10
    1042:	3a 89       	ldd	r19, Y+18	; 0x12
    1044:	2b 89       	ldd	r18, Y+19	; 0x13
    1046:	c6 14       	cp	r12, r6
    1048:	d7 04       	cpc	r13, r7
    104a:	54 f0       	brlt	.+20     	; 0x1060 <vfprintf+0x366>
    104c:	6c 85       	ldd	r22, Y+12	; 0x0c
    104e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1050:	66 15       	cp	r22, r6
    1052:	77 05       	cpc	r23, r7
    1054:	2c f4       	brge	.+10     	; 0x1060 <vfprintf+0x366>
    1056:	f9 01       	movw	r30, r18
    1058:	e4 0f       	add	r30, r20
    105a:	f5 1f       	adc	r31, r21
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <vfprintf+0x368>
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	71 e0       	ldi	r23, 0x01	; 1
    1064:	67 1a       	sub	r6, r23
    1066:	71 08       	sbc	r7, r1
    1068:	4f 5f       	subi	r20, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	ee 85       	ldd	r30, Y+14	; 0x0e
    106e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1070:	6e 16       	cp	r6, r30
    1072:	7f 06       	cpc	r7, r31
    1074:	6c f0       	brlt	.+26     	; 0x1090 <vfprintf+0x396>
    1076:	b7 01       	movw	r22, r14
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	2b 8b       	std	Y+19, r18	; 0x13
    107c:	3a 8b       	std	Y+18, r19	; 0x12
    107e:	48 8b       	std	Y+16, r20	; 0x10
    1080:	59 8b       	std	Y+17, r21	; 0x11
    1082:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1086:	2b 89       	ldd	r18, Y+19	; 0x13
    1088:	3a 89       	ldd	r19, Y+18	; 0x12
    108a:	48 89       	ldd	r20, Y+16	; 0x10
    108c:	59 89       	ldd	r21, Y+17	; 0x11
    108e:	ca cf       	rjmp	.-108    	; 0x1024 <vfprintf+0x32a>
    1090:	6c 14       	cp	r6, r12
    1092:	7d 04       	cpc	r7, r13
    1094:	39 f4       	brne	.+14     	; 0x10a4 <vfprintf+0x3aa>
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	96 33       	cpi	r25, 0x36	; 54
    109a:	18 f4       	brcc	.+6      	; 0x10a2 <vfprintf+0x3a8>
    109c:	95 33       	cpi	r25, 0x35	; 53
    109e:	11 f4       	brne	.+4      	; 0x10a4 <vfprintf+0x3aa>
    10a0:	04 ff       	sbrs	r16, 4
    10a2:	81 e3       	ldi	r24, 0x31	; 49
    10a4:	b7 01       	movw	r22, r14
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	4b c0       	rjmp	.+150    	; 0x1140 <vfprintf+0x446>
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	81 33       	cpi	r24, 0x31	; 49
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <vfprintf+0x3b8>
    10b0:	0f 7e       	andi	r16, 0xEF	; 239
    10b2:	b7 01       	movw	r22, r14
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    10ba:	11 11       	cpse	r17, r1
    10bc:	05 c0       	rjmp	.+10     	; 0x10c8 <vfprintf+0x3ce>
    10be:	74 fe       	sbrs	r7, 4
    10c0:	18 c0       	rjmp	.+48     	; 0x10f2 <vfprintf+0x3f8>
    10c2:	85 e4       	ldi	r24, 0x45	; 69
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	17 c0       	rjmp	.+46     	; 0x10f6 <vfprintf+0x3fc>
    10c8:	b7 01       	movw	r22, r14
    10ca:	8e e2       	ldi	r24, 0x2E	; 46
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	66 24       	eor	r6, r6
    10d6:	63 94       	inc	r6
    10d8:	68 0e       	add	r6, r24
    10da:	f4 01       	movw	r30, r8
    10dc:	e8 0f       	add	r30, r24
    10de:	f1 1d       	adc	r31, r1
    10e0:	80 81       	ld	r24, Z
    10e2:	b7 01       	movw	r22, r14
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    10ea:	11 50       	subi	r17, 0x01	; 1
    10ec:	41 f3       	breq	.-48     	; 0x10be <vfprintf+0x3c4>
    10ee:	86 2d       	mov	r24, r6
    10f0:	f1 cf       	rjmp	.-30     	; 0x10d4 <vfprintf+0x3da>
    10f2:	85 e6       	ldi	r24, 0x65	; 101
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	b7 01       	movw	r22, r14
    10f8:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    10fc:	d7 fc       	sbrc	r13, 7
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <vfprintf+0x410>
    1100:	c1 14       	cp	r12, r1
    1102:	d1 04       	cpc	r13, r1
    1104:	39 f4       	brne	.+14     	; 0x1114 <vfprintf+0x41a>
    1106:	04 ff       	sbrs	r16, 4
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <vfprintf+0x41a>
    110a:	d1 94       	neg	r13
    110c:	c1 94       	neg	r12
    110e:	d1 08       	sbc	r13, r1
    1110:	8d e2       	ldi	r24, 0x2D	; 45
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <vfprintf+0x41c>
    1114:	8b e2       	ldi	r24, 0x2B	; 43
    1116:	b7 01       	movw	r22, r14
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    111e:	80 e3       	ldi	r24, 0x30	; 48
    1120:	6a e0       	ldi	r22, 0x0A	; 10
    1122:	c6 16       	cp	r12, r22
    1124:	d1 04       	cpc	r13, r1
    1126:	2c f0       	brlt	.+10     	; 0x1132 <vfprintf+0x438>
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	fa e0       	ldi	r31, 0x0A	; 10
    112c:	cf 1a       	sub	r12, r31
    112e:	d1 08       	sbc	r13, r1
    1130:	f7 cf       	rjmp	.-18     	; 0x1120 <vfprintf+0x426>
    1132:	b7 01       	movw	r22, r14
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    113a:	b7 01       	movw	r22, r14
    113c:	c6 01       	movw	r24, r12
    113e:	c0 96       	adiw	r24, 0x30	; 48
    1140:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1144:	41 c1       	rjmp	.+642    	; 0x13c8 <vfprintf+0x6ce>
    1146:	83 36       	cpi	r24, 0x63	; 99
    1148:	31 f0       	breq	.+12     	; 0x1156 <vfprintf+0x45c>
    114a:	83 37       	cpi	r24, 0x73	; 115
    114c:	79 f0       	breq	.+30     	; 0x116c <vfprintf+0x472>
    114e:	83 35       	cpi	r24, 0x53	; 83
    1150:	09 f0       	breq	.+2      	; 0x1154 <vfprintf+0x45a>
    1152:	58 c0       	rjmp	.+176    	; 0x1204 <vfprintf+0x50a>
    1154:	21 c0       	rjmp	.+66     	; 0x1198 <vfprintf+0x49e>
    1156:	56 01       	movw	r10, r12
    1158:	72 e0       	ldi	r23, 0x02	; 2
    115a:	a7 0e       	add	r10, r23
    115c:	b1 1c       	adc	r11, r1
    115e:	f6 01       	movw	r30, r12
    1160:	80 81       	ld	r24, Z
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	64 01       	movw	r12, r8
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <vfprintf+0x49a>
    116c:	56 01       	movw	r10, r12
    116e:	f2 e0       	ldi	r31, 0x02	; 2
    1170:	af 0e       	add	r10, r31
    1172:	b1 1c       	adc	r11, r1
    1174:	f6 01       	movw	r30, r12
    1176:	c0 80       	ld	r12, Z
    1178:	d1 80       	ldd	r13, Z+1	; 0x01
    117a:	26 ff       	sbrs	r18, 6
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <vfprintf+0x48a>
    117e:	61 2f       	mov	r22, r17
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x48e>
    1184:	6f ef       	ldi	r22, 0xFF	; 255
    1186:	7f ef       	ldi	r23, 0xFF	; 255
    1188:	c6 01       	movw	r24, r12
    118a:	2b 8b       	std	Y+19, r18	; 0x13
    118c:	0e 94 12 0b 	call	0x1624	; 0x1624 <strnlen>
    1190:	8c 01       	movw	r16, r24
    1192:	2b 89       	ldd	r18, Y+19	; 0x13
    1194:	2f 77       	andi	r18, 0x7F	; 127
    1196:	15 c0       	rjmp	.+42     	; 0x11c2 <vfprintf+0x4c8>
    1198:	56 01       	movw	r10, r12
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	af 0e       	add	r10, r31
    119e:	b1 1c       	adc	r11, r1
    11a0:	f6 01       	movw	r30, r12
    11a2:	c0 80       	ld	r12, Z
    11a4:	d1 80       	ldd	r13, Z+1	; 0x01
    11a6:	26 ff       	sbrs	r18, 6
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <vfprintf+0x4b6>
    11aa:	61 2f       	mov	r22, r17
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x4ba>
    11b0:	6f ef       	ldi	r22, 0xFF	; 255
    11b2:	7f ef       	ldi	r23, 0xFF	; 255
    11b4:	c6 01       	movw	r24, r12
    11b6:	2b 8b       	std	Y+19, r18	; 0x13
    11b8:	0e 94 07 0b 	call	0x160e	; 0x160e <strnlen_P>
    11bc:	8c 01       	movw	r16, r24
    11be:	2b 89       	ldd	r18, Y+19	; 0x13
    11c0:	20 68       	ori	r18, 0x80	; 128
    11c2:	72 2e       	mov	r7, r18
    11c4:	23 fd       	sbrc	r18, 3
    11c6:	1a c0       	rjmp	.+52     	; 0x11fc <vfprintf+0x502>
    11c8:	85 2d       	mov	r24, r5
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	08 17       	cp	r16, r24
    11ce:	19 07       	cpc	r17, r25
    11d0:	a8 f4       	brcc	.+42     	; 0x11fc <vfprintf+0x502>
    11d2:	b7 01       	movw	r22, r14
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    11dc:	5a 94       	dec	r5
    11de:	f4 cf       	rjmp	.-24     	; 0x11c8 <vfprintf+0x4ce>
    11e0:	f6 01       	movw	r30, r12
    11e2:	77 fc       	sbrc	r7, 7
    11e4:	85 91       	lpm	r24, Z+
    11e6:	77 fe       	sbrs	r7, 7
    11e8:	81 91       	ld	r24, Z+
    11ea:	6f 01       	movw	r12, r30
    11ec:	b7 01       	movw	r22, r14
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    11f4:	51 10       	cpse	r5, r1
    11f6:	5a 94       	dec	r5
    11f8:	01 50       	subi	r16, 0x01	; 1
    11fa:	11 09       	sbc	r17, r1
    11fc:	01 15       	cp	r16, r1
    11fe:	11 05       	cpc	r17, r1
    1200:	79 f7       	brne	.-34     	; 0x11e0 <vfprintf+0x4e6>
    1202:	e2 c0       	rjmp	.+452    	; 0x13c8 <vfprintf+0x6ce>
    1204:	84 36       	cpi	r24, 0x64	; 100
    1206:	11 f0       	breq	.+4      	; 0x120c <vfprintf+0x512>
    1208:	89 36       	cpi	r24, 0x69	; 105
    120a:	51 f5       	brne	.+84     	; 0x1260 <vfprintf+0x566>
    120c:	56 01       	movw	r10, r12
    120e:	27 ff       	sbrs	r18, 7
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <vfprintf+0x52a>
    1212:	f4 e0       	ldi	r31, 0x04	; 4
    1214:	af 0e       	add	r10, r31
    1216:	b1 1c       	adc	r11, r1
    1218:	f6 01       	movw	r30, r12
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	0a c0       	rjmp	.+20     	; 0x1238 <vfprintf+0x53e>
    1224:	f2 e0       	ldi	r31, 0x02	; 2
    1226:	af 0e       	add	r10, r31
    1228:	b1 1c       	adc	r11, r1
    122a:	f6 01       	movw	r30, r12
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	88 27       	eor	r24, r24
    1232:	77 fd       	sbrc	r23, 7
    1234:	80 95       	com	r24
    1236:	98 2f       	mov	r25, r24
    1238:	02 2f       	mov	r16, r18
    123a:	0f 76       	andi	r16, 0x6F	; 111
    123c:	97 ff       	sbrs	r25, 7
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <vfprintf+0x556>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	00 68       	ori	r16, 0x80	; 128
    1250:	2a e0       	ldi	r18, 0x0A	; 10
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a4 01       	movw	r20, r8
    1256:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__ultoa_invert>
    125a:	c8 2e       	mov	r12, r24
    125c:	c8 18       	sub	r12, r8
    125e:	3e c0       	rjmp	.+124    	; 0x12dc <vfprintf+0x5e2>
    1260:	02 2f       	mov	r16, r18
    1262:	85 37       	cpi	r24, 0x75	; 117
    1264:	21 f4       	brne	.+8      	; 0x126e <vfprintf+0x574>
    1266:	0f 7e       	andi	r16, 0xEF	; 239
    1268:	2a e0       	ldi	r18, 0x0A	; 10
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	1d c0       	rjmp	.+58     	; 0x12a8 <vfprintf+0x5ae>
    126e:	09 7f       	andi	r16, 0xF9	; 249
    1270:	8f 36       	cpi	r24, 0x6F	; 111
    1272:	91 f0       	breq	.+36     	; 0x1298 <vfprintf+0x59e>
    1274:	18 f4       	brcc	.+6      	; 0x127c <vfprintf+0x582>
    1276:	88 35       	cpi	r24, 0x58	; 88
    1278:	59 f0       	breq	.+22     	; 0x1290 <vfprintf+0x596>
    127a:	b0 c0       	rjmp	.+352    	; 0x13dc <vfprintf+0x6e2>
    127c:	80 37       	cpi	r24, 0x70	; 112
    127e:	19 f0       	breq	.+6      	; 0x1286 <vfprintf+0x58c>
    1280:	88 37       	cpi	r24, 0x78	; 120
    1282:	11 f0       	breq	.+4      	; 0x1288 <vfprintf+0x58e>
    1284:	ab c0       	rjmp	.+342    	; 0x13dc <vfprintf+0x6e2>
    1286:	00 61       	ori	r16, 0x10	; 16
    1288:	04 ff       	sbrs	r16, 4
    128a:	09 c0       	rjmp	.+18     	; 0x129e <vfprintf+0x5a4>
    128c:	04 60       	ori	r16, 0x04	; 4
    128e:	07 c0       	rjmp	.+14     	; 0x129e <vfprintf+0x5a4>
    1290:	24 ff       	sbrs	r18, 4
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <vfprintf+0x5aa>
    1294:	06 60       	ori	r16, 0x06	; 6
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <vfprintf+0x5aa>
    1298:	28 e0       	ldi	r18, 0x08	; 8
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <vfprintf+0x5ae>
    129e:	20 e1       	ldi	r18, 0x10	; 16
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <vfprintf+0x5ae>
    12a4:	20 e1       	ldi	r18, 0x10	; 16
    12a6:	32 e0       	ldi	r19, 0x02	; 2
    12a8:	56 01       	movw	r10, r12
    12aa:	07 ff       	sbrs	r16, 7
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <vfprintf+0x5c6>
    12ae:	f4 e0       	ldi	r31, 0x04	; 4
    12b0:	af 0e       	add	r10, r31
    12b2:	b1 1c       	adc	r11, r1
    12b4:	f6 01       	movw	r30, r12
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <vfprintf+0x5d6>
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	af 0e       	add	r10, r31
    12c4:	b1 1c       	adc	r11, r1
    12c6:	f6 01       	movw	r30, r12
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a4 01       	movw	r20, r8
    12d2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__ultoa_invert>
    12d6:	c8 2e       	mov	r12, r24
    12d8:	c8 18       	sub	r12, r8
    12da:	0f 77       	andi	r16, 0x7F	; 127
    12dc:	06 ff       	sbrs	r16, 6
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <vfprintf+0x5fc>
    12e0:	20 2f       	mov	r18, r16
    12e2:	2e 7f       	andi	r18, 0xFE	; 254
    12e4:	c1 16       	cp	r12, r17
    12e6:	50 f4       	brcc	.+20     	; 0x12fc <vfprintf+0x602>
    12e8:	04 ff       	sbrs	r16, 4
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <vfprintf+0x606>
    12ec:	02 fd       	sbrc	r16, 2
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <vfprintf+0x606>
    12f0:	20 2f       	mov	r18, r16
    12f2:	2e 7e       	andi	r18, 0xEE	; 238
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <vfprintf+0x606>
    12f6:	dc 2c       	mov	r13, r12
    12f8:	20 2f       	mov	r18, r16
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <vfprintf+0x608>
    12fc:	dc 2c       	mov	r13, r12
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <vfprintf+0x608>
    1300:	d1 2e       	mov	r13, r17
    1302:	24 ff       	sbrs	r18, 4
    1304:	0d c0       	rjmp	.+26     	; 0x1320 <vfprintf+0x626>
    1306:	fe 01       	movw	r30, r28
    1308:	ec 0d       	add	r30, r12
    130a:	f1 1d       	adc	r31, r1
    130c:	80 81       	ld	r24, Z
    130e:	80 33       	cpi	r24, 0x30	; 48
    1310:	11 f4       	brne	.+4      	; 0x1316 <vfprintf+0x61c>
    1312:	29 7e       	andi	r18, 0xE9	; 233
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x62e>
    1316:	22 ff       	sbrs	r18, 2
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0x62c>
    131a:	d3 94       	inc	r13
    131c:	d3 94       	inc	r13
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <vfprintf+0x62e>
    1320:	82 2f       	mov	r24, r18
    1322:	86 78       	andi	r24, 0x86	; 134
    1324:	09 f0       	breq	.+2      	; 0x1328 <vfprintf+0x62e>
    1326:	d3 94       	inc	r13
    1328:	23 fd       	sbrc	r18, 3
    132a:	13 c0       	rjmp	.+38     	; 0x1352 <vfprintf+0x658>
    132c:	20 ff       	sbrs	r18, 0
    132e:	06 c0       	rjmp	.+12     	; 0x133c <vfprintf+0x642>
    1330:	1c 2d       	mov	r17, r12
    1332:	d5 14       	cp	r13, r5
    1334:	18 f4       	brcc	.+6      	; 0x133c <vfprintf+0x642>
    1336:	15 0d       	add	r17, r5
    1338:	1d 19       	sub	r17, r13
    133a:	d5 2c       	mov	r13, r5
    133c:	d5 14       	cp	r13, r5
    133e:	68 f4       	brcc	.+26     	; 0x135a <vfprintf+0x660>
    1340:	b7 01       	movw	r22, r14
    1342:	80 e2       	ldi	r24, 0x20	; 32
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	2b 8b       	std	Y+19, r18	; 0x13
    1348:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    134c:	d3 94       	inc	r13
    134e:	2b 89       	ldd	r18, Y+19	; 0x13
    1350:	f5 cf       	rjmp	.-22     	; 0x133c <vfprintf+0x642>
    1352:	d5 14       	cp	r13, r5
    1354:	10 f4       	brcc	.+4      	; 0x135a <vfprintf+0x660>
    1356:	5d 18       	sub	r5, r13
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x662>
    135a:	51 2c       	mov	r5, r1
    135c:	24 ff       	sbrs	r18, 4
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <vfprintf+0x68a>
    1360:	b7 01       	movw	r22, r14
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2b 8b       	std	Y+19, r18	; 0x13
    1368:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    136c:	2b 89       	ldd	r18, Y+19	; 0x13
    136e:	22 ff       	sbrs	r18, 2
    1370:	17 c0       	rjmp	.+46     	; 0x13a0 <vfprintf+0x6a6>
    1372:	21 ff       	sbrs	r18, 1
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x682>
    1376:	88 e5       	ldi	r24, 0x58	; 88
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x686>
    137c:	88 e7       	ldi	r24, 0x78	; 120
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b7 01       	movw	r22, r14
    1382:	0c c0       	rjmp	.+24     	; 0x139c <vfprintf+0x6a2>
    1384:	82 2f       	mov	r24, r18
    1386:	86 78       	andi	r24, 0x86	; 134
    1388:	59 f0       	breq	.+22     	; 0x13a0 <vfprintf+0x6a6>
    138a:	21 fd       	sbrc	r18, 1
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x698>
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <vfprintf+0x69a>
    1392:	8b e2       	ldi	r24, 0x2B	; 43
    1394:	27 fd       	sbrc	r18, 7
    1396:	8d e2       	ldi	r24, 0x2D	; 45
    1398:	b7 01       	movw	r22, r14
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    13a0:	c1 16       	cp	r12, r17
    13a2:	38 f4       	brcc	.+14     	; 0x13b2 <vfprintf+0x6b8>
    13a4:	b7 01       	movw	r22, r14
    13a6:	80 e3       	ldi	r24, 0x30	; 48
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    13ae:	11 50       	subi	r17, 0x01	; 1
    13b0:	f7 cf       	rjmp	.-18     	; 0x13a0 <vfprintf+0x6a6>
    13b2:	ca 94       	dec	r12
    13b4:	f4 01       	movw	r30, r8
    13b6:	ec 0d       	add	r30, r12
    13b8:	f1 1d       	adc	r31, r1
    13ba:	80 81       	ld	r24, Z
    13bc:	b7 01       	movw	r22, r14
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    13c4:	c1 10       	cpse	r12, r1
    13c6:	f5 cf       	rjmp	.-22     	; 0x13b2 <vfprintf+0x6b8>
    13c8:	55 20       	and	r5, r5
    13ca:	09 f4       	brne	.+2      	; 0x13ce <vfprintf+0x6d4>
    13cc:	c2 cc       	rjmp	.-1660   	; 0xd52 <vfprintf+0x58>
    13ce:	b7 01       	movw	r22, r14
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    13d8:	5a 94       	dec	r5
    13da:	f6 cf       	rjmp	.-20     	; 0x13c8 <vfprintf+0x6ce>
    13dc:	f7 01       	movw	r30, r14
    13de:	86 81       	ldd	r24, Z+6	; 0x06
    13e0:	97 81       	ldd	r25, Z+7	; 0x07
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfprintf+0x6ee>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	63 96       	adiw	r28, 0x13	; 19
    13ea:	e2 e1       	ldi	r30, 0x12	; 18
    13ec:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__epilogue_restores__>

000013f0 <__prologue_saves__>:
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	ca 1b       	sub	r28, r26
    141a:	db 0b       	sbc	r29, r27
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	09 94       	ijmp

00001428 <__epilogue_restores__>:
    1428:	2a 88       	ldd	r2, Y+18	; 0x12
    142a:	39 88       	ldd	r3, Y+17	; 0x11
    142c:	48 88       	ldd	r4, Y+16	; 0x10
    142e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1430:	6e 84       	ldd	r6, Y+14	; 0x0e
    1432:	7d 84       	ldd	r7, Y+13	; 0x0d
    1434:	8c 84       	ldd	r8, Y+12	; 0x0c
    1436:	9b 84       	ldd	r9, Y+11	; 0x0b
    1438:	aa 84       	ldd	r10, Y+10	; 0x0a
    143a:	b9 84       	ldd	r11, Y+9	; 0x09
    143c:	c8 84       	ldd	r12, Y+8	; 0x08
    143e:	df 80       	ldd	r13, Y+7	; 0x07
    1440:	ee 80       	ldd	r14, Y+6	; 0x06
    1442:	fd 80       	ldd	r15, Y+5	; 0x05
    1444:	0c 81       	ldd	r16, Y+4	; 0x04
    1446:	1b 81       	ldd	r17, Y+3	; 0x03
    1448:	aa 81       	ldd	r26, Y+2	; 0x02
    144a:	b9 81       	ldd	r27, Y+1	; 0x01
    144c:	ce 0f       	add	r28, r30
    144e:	d1 1d       	adc	r29, r1
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	ed 01       	movw	r28, r26
    145c:	08 95       	ret

0000145e <__ftoa_engine>:
    145e:	28 30       	cpi	r18, 0x08	; 8
    1460:	08 f0       	brcs	.+2      	; 0x1464 <__ftoa_engine+0x6>
    1462:	27 e0       	ldi	r18, 0x07	; 7
    1464:	33 27       	eor	r19, r19
    1466:	da 01       	movw	r26, r20
    1468:	99 0f       	add	r25, r25
    146a:	31 1d       	adc	r19, r1
    146c:	87 fd       	sbrc	r24, 7
    146e:	91 60       	ori	r25, 0x01	; 1
    1470:	00 96       	adiw	r24, 0x00	; 0
    1472:	61 05       	cpc	r22, r1
    1474:	71 05       	cpc	r23, r1
    1476:	39 f4       	brne	.+14     	; 0x1486 <__ftoa_engine+0x28>
    1478:	32 60       	ori	r19, 0x02	; 2
    147a:	2e 5f       	subi	r18, 0xFE	; 254
    147c:	3d 93       	st	X+, r19
    147e:	30 e3       	ldi	r19, 0x30	; 48
    1480:	2a 95       	dec	r18
    1482:	e1 f7       	brne	.-8      	; 0x147c <__ftoa_engine+0x1e>
    1484:	08 95       	ret
    1486:	9f 3f       	cpi	r25, 0xFF	; 255
    1488:	30 f0       	brcs	.+12     	; 0x1496 <__ftoa_engine+0x38>
    148a:	80 38       	cpi	r24, 0x80	; 128
    148c:	71 05       	cpc	r23, r1
    148e:	61 05       	cpc	r22, r1
    1490:	09 f0       	breq	.+2      	; 0x1494 <__ftoa_engine+0x36>
    1492:	3c 5f       	subi	r19, 0xFC	; 252
    1494:	3c 5f       	subi	r19, 0xFC	; 252
    1496:	3d 93       	st	X+, r19
    1498:	91 30       	cpi	r25, 0x01	; 1
    149a:	08 f0       	brcs	.+2      	; 0x149e <__ftoa_engine+0x40>
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	91 1d       	adc	r25, r1
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	1f 93       	push	r17
    14a6:	0f 93       	push	r16
    14a8:	ff 92       	push	r15
    14aa:	ef 92       	push	r14
    14ac:	19 2f       	mov	r17, r25
    14ae:	98 7f       	andi	r25, 0xF8	; 248
    14b0:	96 95       	lsr	r25
    14b2:	e9 2f       	mov	r30, r25
    14b4:	96 95       	lsr	r25
    14b6:	96 95       	lsr	r25
    14b8:	e9 0f       	add	r30, r25
    14ba:	ff 27       	eor	r31, r31
    14bc:	e6 53       	subi	r30, 0x36	; 54
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	99 27       	eor	r25, r25
    14c2:	33 27       	eor	r19, r19
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	a7 01       	movw	r20, r14
    14ca:	e7 01       	movw	r28, r14
    14cc:	05 90       	lpm	r0, Z+
    14ce:	08 94       	sec
    14d0:	07 94       	ror	r0
    14d2:	28 f4       	brcc	.+10     	; 0x14de <__ftoa_engine+0x80>
    14d4:	36 0f       	add	r19, r22
    14d6:	e7 1e       	adc	r14, r23
    14d8:	f8 1e       	adc	r15, r24
    14da:	49 1f       	adc	r20, r25
    14dc:	51 1d       	adc	r21, r1
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	06 94       	lsr	r0
    14e8:	a1 f7       	brne	.-24     	; 0x14d2 <__ftoa_engine+0x74>
    14ea:	05 90       	lpm	r0, Z+
    14ec:	07 94       	ror	r0
    14ee:	28 f4       	brcc	.+10     	; 0x14fa <__ftoa_engine+0x9c>
    14f0:	e7 0e       	add	r14, r23
    14f2:	f8 1e       	adc	r15, r24
    14f4:	49 1f       	adc	r20, r25
    14f6:	56 1f       	adc	r21, r22
    14f8:	c1 1d       	adc	r28, r1
    14fa:	77 0f       	add	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	66 1f       	adc	r22, r22
    1502:	06 94       	lsr	r0
    1504:	a1 f7       	brne	.-24     	; 0x14ee <__ftoa_engine+0x90>
    1506:	05 90       	lpm	r0, Z+
    1508:	07 94       	ror	r0
    150a:	28 f4       	brcc	.+10     	; 0x1516 <__ftoa_engine+0xb8>
    150c:	f8 0e       	add	r15, r24
    150e:	49 1f       	adc	r20, r25
    1510:	56 1f       	adc	r21, r22
    1512:	c7 1f       	adc	r28, r23
    1514:	d1 1d       	adc	r29, r1
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	66 1f       	adc	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	06 94       	lsr	r0
    1520:	a1 f7       	brne	.-24     	; 0x150a <__ftoa_engine+0xac>
    1522:	05 90       	lpm	r0, Z+
    1524:	07 94       	ror	r0
    1526:	20 f4       	brcc	.+8      	; 0x1530 <__ftoa_engine+0xd2>
    1528:	49 0f       	add	r20, r25
    152a:	56 1f       	adc	r21, r22
    152c:	c7 1f       	adc	r28, r23
    152e:	d8 1f       	adc	r29, r24
    1530:	99 0f       	add	r25, r25
    1532:	66 1f       	adc	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	06 94       	lsr	r0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__ftoa_engine+0xc8>
    153c:	84 91       	lpm	r24, Z
    153e:	10 95       	com	r17
    1540:	17 70       	andi	r17, 0x07	; 7
    1542:	41 f0       	breq	.+16     	; 0x1554 <__ftoa_engine+0xf6>
    1544:	d6 95       	lsr	r29
    1546:	c7 95       	ror	r28
    1548:	57 95       	ror	r21
    154a:	47 95       	ror	r20
    154c:	f7 94       	ror	r15
    154e:	e7 94       	ror	r14
    1550:	1a 95       	dec	r17
    1552:	c1 f7       	brne	.-16     	; 0x1544 <__ftoa_engine+0xe6>
    1554:	e0 e7       	ldi	r30, 0x70	; 112
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	68 94       	set
    155a:	15 90       	lpm	r1, Z+
    155c:	15 91       	lpm	r17, Z+
    155e:	35 91       	lpm	r19, Z+
    1560:	65 91       	lpm	r22, Z+
    1562:	95 91       	lpm	r25, Z+
    1564:	05 90       	lpm	r0, Z+
    1566:	7f e2       	ldi	r23, 0x2F	; 47
    1568:	73 95       	inc	r23
    156a:	e1 18       	sub	r14, r1
    156c:	f1 0a       	sbc	r15, r17
    156e:	43 0b       	sbc	r20, r19
    1570:	56 0b       	sbc	r21, r22
    1572:	c9 0b       	sbc	r28, r25
    1574:	d0 09       	sbc	r29, r0
    1576:	c0 f7       	brcc	.-16     	; 0x1568 <__ftoa_engine+0x10a>
    1578:	e1 0c       	add	r14, r1
    157a:	f1 1e       	adc	r15, r17
    157c:	43 1f       	adc	r20, r19
    157e:	56 1f       	adc	r21, r22
    1580:	c9 1f       	adc	r28, r25
    1582:	d0 1d       	adc	r29, r0
    1584:	7e f4       	brtc	.+30     	; 0x15a4 <__ftoa_engine+0x146>
    1586:	70 33       	cpi	r23, 0x30	; 48
    1588:	11 f4       	brne	.+4      	; 0x158e <__ftoa_engine+0x130>
    158a:	8a 95       	dec	r24
    158c:	e6 cf       	rjmp	.-52     	; 0x155a <__ftoa_engine+0xfc>
    158e:	e8 94       	clt
    1590:	01 50       	subi	r16, 0x01	; 1
    1592:	30 f0       	brcs	.+12     	; 0x15a0 <__ftoa_engine+0x142>
    1594:	08 0f       	add	r16, r24
    1596:	0a f4       	brpl	.+2      	; 0x159a <__ftoa_engine+0x13c>
    1598:	00 27       	eor	r16, r16
    159a:	02 17       	cp	r16, r18
    159c:	08 f4       	brcc	.+2      	; 0x15a0 <__ftoa_engine+0x142>
    159e:	20 2f       	mov	r18, r16
    15a0:	23 95       	inc	r18
    15a2:	02 2f       	mov	r16, r18
    15a4:	7a 33       	cpi	r23, 0x3A	; 58
    15a6:	28 f0       	brcs	.+10     	; 0x15b2 <__ftoa_engine+0x154>
    15a8:	79 e3       	ldi	r23, 0x39	; 57
    15aa:	7d 93       	st	X+, r23
    15ac:	2a 95       	dec	r18
    15ae:	e9 f7       	brne	.-6      	; 0x15aa <__ftoa_engine+0x14c>
    15b0:	10 c0       	rjmp	.+32     	; 0x15d2 <__ftoa_engine+0x174>
    15b2:	7d 93       	st	X+, r23
    15b4:	2a 95       	dec	r18
    15b6:	89 f6       	brne	.-94     	; 0x155a <__ftoa_engine+0xfc>
    15b8:	06 94       	lsr	r0
    15ba:	97 95       	ror	r25
    15bc:	67 95       	ror	r22
    15be:	37 95       	ror	r19
    15c0:	17 95       	ror	r17
    15c2:	17 94       	ror	r1
    15c4:	e1 18       	sub	r14, r1
    15c6:	f1 0a       	sbc	r15, r17
    15c8:	43 0b       	sbc	r20, r19
    15ca:	56 0b       	sbc	r21, r22
    15cc:	c9 0b       	sbc	r28, r25
    15ce:	d0 09       	sbc	r29, r0
    15d0:	98 f0       	brcs	.+38     	; 0x15f8 <__ftoa_engine+0x19a>
    15d2:	23 95       	inc	r18
    15d4:	7e 91       	ld	r23, -X
    15d6:	73 95       	inc	r23
    15d8:	7a 33       	cpi	r23, 0x3A	; 58
    15da:	08 f0       	brcs	.+2      	; 0x15de <__ftoa_engine+0x180>
    15dc:	70 e3       	ldi	r23, 0x30	; 48
    15de:	7c 93       	st	X, r23
    15e0:	20 13       	cpse	r18, r16
    15e2:	b8 f7       	brcc	.-18     	; 0x15d2 <__ftoa_engine+0x174>
    15e4:	7e 91       	ld	r23, -X
    15e6:	70 61       	ori	r23, 0x10	; 16
    15e8:	7d 93       	st	X+, r23
    15ea:	30 f0       	brcs	.+12     	; 0x15f8 <__ftoa_engine+0x19a>
    15ec:	83 95       	inc	r24
    15ee:	71 e3       	ldi	r23, 0x31	; 49
    15f0:	7d 93       	st	X+, r23
    15f2:	70 e3       	ldi	r23, 0x30	; 48
    15f4:	2a 95       	dec	r18
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <__ftoa_engine+0x192>
    15f8:	11 24       	eor	r1, r1
    15fa:	ef 90       	pop	r14
    15fc:	ff 90       	pop	r15
    15fe:	0f 91       	pop	r16
    1600:	1f 91       	pop	r17
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	99 27       	eor	r25, r25
    1608:	87 fd       	sbrc	r24, 7
    160a:	90 95       	com	r25
    160c:	08 95       	ret

0000160e <strnlen_P>:
    160e:	fc 01       	movw	r30, r24
    1610:	05 90       	lpm	r0, Z+
    1612:	61 50       	subi	r22, 0x01	; 1
    1614:	70 40       	sbci	r23, 0x00	; 0
    1616:	01 10       	cpse	r0, r1
    1618:	d8 f7       	brcc	.-10     	; 0x1610 <strnlen_P+0x2>
    161a:	80 95       	com	r24
    161c:	90 95       	com	r25
    161e:	8e 0f       	add	r24, r30
    1620:	9f 1f       	adc	r25, r31
    1622:	08 95       	ret

00001624 <strnlen>:
    1624:	fc 01       	movw	r30, r24
    1626:	61 50       	subi	r22, 0x01	; 1
    1628:	70 40       	sbci	r23, 0x00	; 0
    162a:	01 90       	ld	r0, Z+
    162c:	01 10       	cpse	r0, r1
    162e:	d8 f7       	brcc	.-10     	; 0x1626 <strnlen+0x2>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	8e 0f       	add	r24, r30
    1636:	9f 1f       	adc	r25, r31
    1638:	08 95       	ret

0000163a <fputc>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	18 2f       	mov	r17, r24
    1644:	09 2f       	mov	r16, r25
    1646:	eb 01       	movw	r28, r22
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 fd       	sbrc	r24, 1
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <fputc+0x1a>
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	20 c0       	rjmp	.+64     	; 0x1694 <fputc+0x5a>
    1654:	82 ff       	sbrs	r24, 2
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <fputc+0x3e>
    1658:	4e 81       	ldd	r20, Y+6	; 0x06
    165a:	5f 81       	ldd	r21, Y+7	; 0x07
    165c:	2c 81       	ldd	r18, Y+4	; 0x04
    165e:	3d 81       	ldd	r19, Y+5	; 0x05
    1660:	42 17       	cp	r20, r18
    1662:	53 07       	cpc	r21, r19
    1664:	7c f4       	brge	.+30     	; 0x1684 <fputc+0x4a>
    1666:	e8 81       	ld	r30, Y
    1668:	f9 81       	ldd	r31, Y+1	; 0x01
    166a:	9f 01       	movw	r18, r30
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	39 83       	std	Y+1, r19	; 0x01
    1672:	28 83       	st	Y, r18
    1674:	10 83       	st	Z, r17
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <fputc+0x4a>
    1678:	e8 85       	ldd	r30, Y+8	; 0x08
    167a:	f9 85       	ldd	r31, Y+9	; 0x09
    167c:	81 2f       	mov	r24, r17
    167e:	09 95       	icall
    1680:	89 2b       	or	r24, r25
    1682:	29 f7       	brne	.-54     	; 0x164e <fputc+0x14>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	3f 83       	std	Y+7, r19	; 0x07
    168e:	2e 83       	std	Y+6, r18	; 0x06
    1690:	81 2f       	mov	r24, r17
    1692:	90 2f       	mov	r25, r16
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	08 95       	ret

0000169e <sprintf>:
    169e:	ae e0       	ldi	r26, 0x0E	; 14
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e5       	ldi	r30, 0x55	; 85
    16a4:	fb e0       	ldi	r31, 0x0B	; 11
    16a6:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__prologue_saves__+0x1c>
    16aa:	0d 89       	ldd	r16, Y+21	; 0x15
    16ac:	1e 89       	ldd	r17, Y+22	; 0x16
    16ae:	86 e0       	ldi	r24, 0x06	; 6
    16b0:	8c 83       	std	Y+4, r24	; 0x04
    16b2:	1a 83       	std	Y+2, r17	; 0x02
    16b4:	09 83       	std	Y+1, r16	; 0x01
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	9f e7       	ldi	r25, 0x7F	; 127
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	ae 01       	movw	r20, r28
    16c0:	47 5e       	subi	r20, 0xE7	; 231
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	6f 89       	ldd	r22, Y+23	; 0x17
    16c6:	78 8d       	ldd	r23, Y+24	; 0x18
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vfprintf>
    16d0:	ef 81       	ldd	r30, Y+7	; 0x07
    16d2:	f8 85       	ldd	r31, Y+8	; 0x08
    16d4:	e0 0f       	add	r30, r16
    16d6:	f1 1f       	adc	r31, r17
    16d8:	10 82       	st	Z, r1
    16da:	2e 96       	adiw	r28, 0x0e	; 14
    16dc:	e4 e0       	ldi	r30, 0x04	; 4
    16de:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__epilogue_restores__+0x1c>

000016e2 <__ultoa_invert>:
    16e2:	fa 01       	movw	r30, r20
    16e4:	aa 27       	eor	r26, r26
    16e6:	28 30       	cpi	r18, 0x08	; 8
    16e8:	51 f1       	breq	.+84     	; 0x173e <__ultoa_invert+0x5c>
    16ea:	20 31       	cpi	r18, 0x10	; 16
    16ec:	81 f1       	breq	.+96     	; 0x174e <__ultoa_invert+0x6c>
    16ee:	e8 94       	clt
    16f0:	6f 93       	push	r22
    16f2:	6e 7f       	andi	r22, 0xFE	; 254
    16f4:	6e 5f       	subi	r22, 0xFE	; 254
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	af 4f       	sbci	r26, 0xFF	; 255
    16fe:	b1 e0       	ldi	r27, 0x01	; 1
    1700:	3e d0       	rcall	.+124    	; 0x177e <__ultoa_invert+0x9c>
    1702:	b4 e0       	ldi	r27, 0x04	; 4
    1704:	3c d0       	rcall	.+120    	; 0x177e <__ultoa_invert+0x9c>
    1706:	67 0f       	add	r22, r23
    1708:	78 1f       	adc	r23, r24
    170a:	89 1f       	adc	r24, r25
    170c:	9a 1f       	adc	r25, r26
    170e:	a1 1d       	adc	r26, r1
    1710:	68 0f       	add	r22, r24
    1712:	79 1f       	adc	r23, r25
    1714:	8a 1f       	adc	r24, r26
    1716:	91 1d       	adc	r25, r1
    1718:	a1 1d       	adc	r26, r1
    171a:	6a 0f       	add	r22, r26
    171c:	71 1d       	adc	r23, r1
    171e:	81 1d       	adc	r24, r1
    1720:	91 1d       	adc	r25, r1
    1722:	a1 1d       	adc	r26, r1
    1724:	20 d0       	rcall	.+64     	; 0x1766 <__ultoa_invert+0x84>
    1726:	09 f4       	brne	.+2      	; 0x172a <__ultoa_invert+0x48>
    1728:	68 94       	set
    172a:	3f 91       	pop	r19
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	26 9f       	mul	r18, r22
    1730:	11 24       	eor	r1, r1
    1732:	30 19       	sub	r19, r0
    1734:	30 5d       	subi	r19, 0xD0	; 208
    1736:	31 93       	st	Z+, r19
    1738:	de f6       	brtc	.-74     	; 0x16f0 <__ultoa_invert+0xe>
    173a:	cf 01       	movw	r24, r30
    173c:	08 95       	ret
    173e:	46 2f       	mov	r20, r22
    1740:	47 70       	andi	r20, 0x07	; 7
    1742:	40 5d       	subi	r20, 0xD0	; 208
    1744:	41 93       	st	Z+, r20
    1746:	b3 e0       	ldi	r27, 0x03	; 3
    1748:	0f d0       	rcall	.+30     	; 0x1768 <__ultoa_invert+0x86>
    174a:	c9 f7       	brne	.-14     	; 0x173e <__ultoa_invert+0x5c>
    174c:	f6 cf       	rjmp	.-20     	; 0x173a <__ultoa_invert+0x58>
    174e:	46 2f       	mov	r20, r22
    1750:	4f 70       	andi	r20, 0x0F	; 15
    1752:	40 5d       	subi	r20, 0xD0	; 208
    1754:	4a 33       	cpi	r20, 0x3A	; 58
    1756:	18 f0       	brcs	.+6      	; 0x175e <__ultoa_invert+0x7c>
    1758:	49 5d       	subi	r20, 0xD9	; 217
    175a:	31 fd       	sbrc	r19, 1
    175c:	40 52       	subi	r20, 0x20	; 32
    175e:	41 93       	st	Z+, r20
    1760:	02 d0       	rcall	.+4      	; 0x1766 <__ultoa_invert+0x84>
    1762:	a9 f7       	brne	.-22     	; 0x174e <__ultoa_invert+0x6c>
    1764:	ea cf       	rjmp	.-44     	; 0x173a <__ultoa_invert+0x58>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	a6 95       	lsr	r26
    176a:	97 95       	ror	r25
    176c:	87 95       	ror	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	ba 95       	dec	r27
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__ultoa_invert+0x86>
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	61 05       	cpc	r22, r1
    177a:	71 05       	cpc	r23, r1
    177c:	08 95       	ret
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	0a 2e       	mov	r0, r26
    1784:	06 94       	lsr	r0
    1786:	57 95       	ror	r21
    1788:	47 95       	ror	r20
    178a:	37 95       	ror	r19
    178c:	27 95       	ror	r18
    178e:	ba 95       	dec	r27
    1790:	c9 f7       	brne	.-14     	; 0x1784 <__ultoa_invert+0xa2>
    1792:	62 0f       	add	r22, r18
    1794:	73 1f       	adc	r23, r19
    1796:	84 1f       	adc	r24, r20
    1798:	95 1f       	adc	r25, r21
    179a:	a0 1d       	adc	r26, r0
    179c:	08 95       	ret

0000179e <_exit>:
    179e:	f8 94       	cli

000017a0 <__stop_program>:
    17a0:	ff cf       	rjmp	.-2      	; 0x17a0 <__stop_program>
