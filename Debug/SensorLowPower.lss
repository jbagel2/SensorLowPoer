
SensorLowPower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  00001aca  00001b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  008001e6  008001e6  00001c44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017ef  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2a  00000000  00000000  000036a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b53  00000000  00000000  000041d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a8  00000000  00000000  00004d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b02  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016ee  00000000  00000000  00005dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  000074bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_1>
       8:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_6>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_18>
      4c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_19>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2159>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ea ec       	ldi	r30, 0xCA	; 202
     17e:	fa e1       	ldi	r31, 0x1A	; 26
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 3e       	cpi	r26, 0xE6	; 230
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a6 ee       	ldi	r26, 0xE6	; 230
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ad 39       	cpi	r26, 0x9D	; 157
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <main>
     1a0:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <_Z13ADCsingleREADh>:
int ADCsingleREAD(uint8_t ADCn_touse)
{
	int ADCval;

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega8A__) || defined(__AVR_ATmega88__)
	ADMUX = ADCn_touse;         // use #1 ADC
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
     1ae:	80 81       	ld	r24, Z
     1b0:	80 64       	ori	r24, 0x40	; 64
     1b2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 7d       	andi	r24, 0xDF	; 223
     1b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);// | (1 << ADPS0);
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	86 60       	ori	r24, 0x06	; 6
     1c2:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
     1c4:	80 81       	ld	r24, Z
     1c6:	8e 7f       	andi	r24, 0xFE	; 254
     1c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
     1ca:	80 81       	ld	r24, Z
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
     1d0:	80 81       	ld	r24, Z
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
     1d6:	80 81       	ld	r24, Z
     1d8:	86 fd       	sbrc	r24, 6
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <_Z13ADCsingleREADh+0x2e>


	ADCval = ADCL;
     1dc:	20 91 78 00 	lds	r18, 0x0078
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
     1e0:	80 91 79 00 	lds	r24, 0x0079
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	98 2f       	mov	r25, r24
     1e8:	88 27       	eor	r24, r24
#endif

	//ADCSRA &= ~(1 << ADEN); 
	return ADCval;
}
     1ea:	82 0f       	add	r24, r18
     1ec:	91 1d       	adc	r25, r1
     1ee:	08 95       	ret

000001f0 <__vector_21>:
	
}


ISR(ADC_vect)
{
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	8f 93       	push	r24
	ADCvalue = ADCH;          // only need to read the high value for 8 bit
     1fc:	80 91 79 00 	lds	r24, 0x0079
     200:	80 93 e6 01 	sts	0x01E6, r24
	// REMEMBER: once ADCH is read the ADC will update
	
	// if you need the value of ADCH in multiple spots, read it into a register
	// and use the register and not the ADCH

}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <readDHT22>:
 * at the header file (DHT22.h).
 */
#include "dht22New.h"

DHT22_ERROR_t readDHT22(DHT22_DATA_t* data)
{
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <readDHT22+0x1a>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// Pin needs to start HIGH, wait until it is HIGH with a timeout
	retryCount = 0;
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
     22e:	52 98       	cbi	0x0a, 2	; 10
     230:	2e e7       	ldi	r18, 0x7E	; 126
     232:	03 c0       	rjmp	.+6      	; 0x23a <readDHT22+0x2a>
     234:	21 50       	subi	r18, 0x01	; 1
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     236:	09 f4       	brne	.+2      	; 0x23a <readDHT22+0x2a>
     238:	b7 c0       	rjmp	.+366    	; 0x3a8 <readDHT22+0x198>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	35 e0       	ldi	r19, 0x05	; 5
     23c:	3a 95       	dec	r19
     23e:	f1 f7       	brne	.-4      	; 0x23c <readDHT22+0x2c>
     240:	00 00       	nop
		retryCount++;
		_delay_us(2);
	} while( !( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ) );				//!DIRECT_READ(reg, bitmask)
     242:	4a 9b       	sbis	0x09, 2	; 9
     244:	f7 cf       	rjmp	.-18     	; 0x234 <readDHT22+0x24>

	
	// Send the activate pulse
//	cli();
	DHT22_PORT_OUT &= ~(1 << ( DHT22_PIN )); 							//DIRECT_WRITE_LOW(reg, bitmask);
     246:	5a 98       	cbi	0x0b, 2	; 11
	DHT22_DDR |= 1 << ( DHT22_PIN );								//DIRECT_MODE_OUTPUT(reg, bitmask); // Output Low
     248:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	ef e9       	ldi	r30, 0x9F	; 159
     24c:	ff e0       	ldi	r31, 0x0F	; 15
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <readDHT22+0x3e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <readDHT22+0x44>
     254:	00 00       	nop
//	sei();
	_delay_ms(2); 										// spec is 1 to 10ms
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));							// Switch back to input so pin can float
     256:	52 98       	cbi	0x0a, 2	; 10
	DHT22_PORT_OUT |= (1 << ( DHT22_PIN )); // Enable pullup.
     258:	5a 9a       	sbi	0x0b, 2	; 11
     25a:	2a e1       	ldi	r18, 0x1A	; 26
     25c:	03 c0       	rjmp	.+6      	; 0x264 <readDHT22+0x54>
     25e:	21 50       	subi	r18, 0x01	; 1

	// Find the start of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
     260:	09 f4       	brne	.+2      	; 0x264 <readDHT22+0x54>
     262:	a4 c0       	rjmp	.+328    	; 0x3ac <readDHT22+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	f5 e0       	ldi	r31, 0x05	; 5
     266:	fa 95       	dec	r31
     268:	f1 f7       	brne	.-4      	; 0x266 <readDHT22+0x56>
     26a:	00 00       	nop
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ); // While pin is 1.
     26c:	4a 99       	sbic	0x09, 2	; 9
     26e:	f7 cf       	rjmp	.-18     	; 0x25e <readDHT22+0x4e>
     270:	23 e3       	ldi	r18, 0x33	; 51
     272:	03 c0       	rjmp	.+6      	; 0x27a <readDHT22+0x6a>
     274:	21 50       	subi	r18, 0x01	; 1

	// Find the transition of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     276:	09 f4       	brne	.+2      	; 0x27a <readDHT22+0x6a>
     278:	9b c0       	rjmp	.+310    	; 0x3b0 <readDHT22+0x1a0>
     27a:	35 e0       	ldi	r19, 0x05	; 5
     27c:	3a 95       	dec	r19
     27e:	f1 f7       	brne	.-4      	; 0x27c <readDHT22+0x6c>
     280:	00 00       	nop
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     282:	4a 9b       	sbis	0x09, 2	; 9
     284:	f7 cf       	rjmp	.-18     	; 0x274 <readDHT22+0x64>
     286:	23 e3       	ldi	r18, 0x33	; 51
     288:	03 c0       	rjmp	.+6      	; 0x290 <readDHT22+0x80>
     28a:	21 50       	subi	r18, 0x01	; 1

	// Find the end of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     28c:	09 f4       	brne	.+2      	; 0x290 <readDHT22+0x80>
     28e:	92 c0       	rjmp	.+292    	; 0x3b4 <readDHT22+0x1a4>
     290:	e5 e0       	ldi	r30, 0x05	; 5
     292:	ea 95       	dec	r30
     294:	f1 f7       	brne	.-4      	; 0x292 <readDHT22+0x82>
     296:	00 00       	nop
		{
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     298:	4a 99       	sbic	0x09, 2	; 9
     29a:	f7 cf       	rjmp	.-18     	; 0x28a <readDHT22+0x7a>
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	d1 2c       	mov	r13, r1
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	10 e0       	ldi	r17, 0x00	; 0
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2aa:	e1 2c       	mov	r14, r1
			{
				rawTemperature |= (1 << (31 - i));
			}
			if ((i > 31) && (i < 40))  // CRC data
			{
				checkSum |= (1 << (39 - i));
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f7 e2       	ldi	r31, 0x27	; 39
     2b0:	8f 2e       	mov	r8, r31
     2b2:	91 2c       	mov	r9, r1
     2b4:	f0 2d       	mov	r31, r0
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	70 e0       	ldi	r23, 0x00	; 0
			{
				rawHumidity |= (1 << (15 - i));
			}
			if ((i > 15) && (i < 32))  // Temperature
			{
				rawTemperature |= (1 << (31 - i));
     2ba:	af e1       	ldi	r26, 0x1F	; 31
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
		{
			if (i < 16) // Humidity 
			{
				rawHumidity |= (1 << (15 - i));
     2be:	0f 2e       	mov	r0, r31
     2c0:	ff e0       	ldi	r31, 0x0F	; 15
     2c2:	6f 2e       	mov	r6, r31
     2c4:	71 2c       	mov	r7, r1
     2c6:	f0 2d       	mov	r31, r0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <readDHT22+0xc2>
	{
		// Find the start of the sync pulse
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
     2ca:	14 32       	cpi	r17, 0x24	; 36
     2cc:	10 f0       	brcs	.+4      	; 0x2d2 <readDHT22+0xc2>
     2ce:	74 c0       	rjmp	.+232    	; 0x3b8 <readDHT22+0x1a8>
     2d0:	1e 2d       	mov	r17, r14
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
     2d2:	1f 5f       	subi	r17, 0xFF	; 255
     2d4:	f5 e0       	ldi	r31, 0x05	; 5
     2d6:	fa 95       	dec	r31
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <readDHT22+0xc6>
     2da:	00 00       	nop
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2dc:	4a 9b       	sbis	0x09, 2	; 9
     2de:	f5 cf       	rjmp	.-22     	; 0x2ca <readDHT22+0xba>
     2e0:	1e 2d       	mov	r17, r14
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <readDHT22+0xda>
		
		// Measure the width of the data pulse
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
     2e4:	13 33       	cpi	r17, 0x33	; 51
     2e6:	09 f4       	brne	.+2      	; 0x2ea <readDHT22+0xda>
     2e8:	69 c0       	rjmp	.+210    	; 0x3bc <readDHT22+0x1ac>
			{
				return DHT_ERROR_DATA_TIMEOUT;
			}
			retryCount++;
     2ea:	1f 5f       	subi	r17, 0xFF	; 255
     2ec:	e5 e0       	ldi	r30, 0x05	; 5
     2ee:	ea 95       	dec	r30
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <readDHT22+0xde>
     2f2:	00 00       	nop
			_delay_us(2);
		} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     2f4:	4a 99       	sbic	0x09, 2	; 9
     2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <readDHT22+0xd4>

		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
     2f8:	15 31       	cpi	r17, 0x15	; 21
     2fa:	80 f1       	brcs	.+96     	; 0x35c <readDHT22+0x14c>
		{
			if (i < 16) // Humidity 
     2fc:	00 31       	cpi	r16, 0x10	; 16
     2fe:	70 f4       	brcc	.+28     	; 0x31c <readDHT22+0x10c>
			{
				rawHumidity |= (1 << (15 - i));
     300:	53 01       	movw	r10, r6
     302:	a0 1a       	sub	r10, r16
     304:	b1 08       	sbc	r11, r1
     306:	ba 82       	std	Y+2, r11	; 0x02
     308:	a9 82       	std	Y+1, r10	; 0x01
     30a:	5b 01       	movw	r10, r22
     30c:	09 80       	ldd	r0, Y+1	; 0x01
     30e:	02 c0       	rjmp	.+4      	; 0x314 <readDHT22+0x104>
     310:	aa 0c       	add	r10, r10
     312:	bb 1c       	adc	r11, r11
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <readDHT22+0x100>
     318:	4a 29       	or	r20, r10
     31a:	5b 29       	or	r21, r11
			}
			if ((i > 15) && (i < 32))  // Temperature
     31c:	10 ef       	ldi	r17, 0xF0	; 240
     31e:	10 0f       	add	r17, r16
     320:	10 31       	cpi	r17, 0x10	; 16
     322:	70 f4       	brcc	.+28     	; 0x340 <readDHT22+0x130>
			{
				rawTemperature |= (1 << (31 - i));
     324:	fd 01       	movw	r30, r26
     326:	e0 1b       	sub	r30, r16
     328:	f1 09       	sbc	r31, r1
     32a:	fa 83       	std	Y+2, r31	; 0x02
     32c:	e9 83       	std	Y+1, r30	; 0x01
     32e:	5b 01       	movw	r10, r22
     330:	09 80       	ldd	r0, Y+1	; 0x01
     332:	02 c0       	rjmp	.+4      	; 0x338 <readDHT22+0x128>
     334:	aa 0c       	add	r10, r10
     336:	bb 1c       	adc	r11, r11
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <readDHT22+0x124>
     33c:	2a 29       	or	r18, r10
     33e:	3b 29       	or	r19, r11
			}
			if ((i > 31) && (i < 40))  // CRC data
     340:	10 ee       	ldi	r17, 0xE0	; 224
     342:	10 0f       	add	r17, r16
     344:	18 30       	cpi	r17, 0x08	; 8
     346:	50 f4       	brcc	.+20     	; 0x35c <readDHT22+0x14c>
			{
				checkSum |= (1 << (39 - i));
     348:	54 01       	movw	r10, r8
     34a:	a0 1a       	sub	r10, r16
     34c:	b1 08       	sbc	r11, r1
     34e:	fb 01       	movw	r30, r22
     350:	02 c0       	rjmp	.+4      	; 0x356 <readDHT22+0x146>
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	aa 94       	dec	r10
     358:	e2 f7       	brpl	.-8      	; 0x352 <readDHT22+0x142>
     35a:	de 2a       	or	r13, r30
	
	
	// Here sensor pulled down to start transmitting bits.

	// Read the 40 bit data stream
	for(i = 0; i < DHT22_DATA_BIT_COUNT; i++)
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	08 32       	cpi	r16, 0x28	; 40
     360:	08 f4       	brcc	.+2      	; 0x364 <readDHT22+0x154>
     362:	b6 cf       	rjmp	.-148    	; 0x2d0 <readDHT22+0xc0>
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     364:	ed 2d       	mov	r30, r13
     366:	f0 e0       	ldi	r31, 0x00	; 0
	// 26~28us == logical 0
	// 70us	   == logical 1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
     368:	a5 2f       	mov	r26, r21
     36a:	bb 27       	eor	r27, r27
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     36c:	a4 0f       	add	r26, r20
     36e:	b1 1d       	adc	r27, r1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
     370:	63 2f       	mov	r22, r19
     372:	77 27       	eor	r23, r23
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     374:	6a 0f       	add	r22, r26
     376:	7b 1f       	adc	r23, r27
     378:	62 0f       	add	r22, r18
     37a:	71 1d       	adc	r23, r1
     37c:	77 27       	eor	r23, r23
     37e:	e6 17       	cp	r30, r22
     380:	f7 07       	cpc	r31, r23
     382:	f1 f4       	brne	.+60     	; 0x3c0 <readDHT22+0x1b0>
		{
			data->temperature_integral = (int8_t)(rawTemperature / 10);
			data->temperature_decimal = (uint8_t)(rawTemperature % 10);			
		}
#else
		if(rawTemperature & 0x8000)	// Check if temperature is below zero, non standard way of encoding negative numbers!
     384:	33 23       	and	r19, r19
     386:	44 f4       	brge	.+16     	; 0x398 <readDHT22+0x188>
		{
			rawTemperature &= 0x7FFF; // Remove signal bit
     388:	3f 77       	andi	r19, 0x7F	; 127
			data->raw_temperature = ((int16_t)rawTemperature) * -1;
     38a:	31 95       	neg	r19
     38c:	21 95       	neg	r18
     38e:	31 09       	sbc	r19, r1
     390:	fc 01       	movw	r30, r24
     392:	31 83       	std	Z+1, r19	; 0x01
     394:	20 83       	st	Z, r18
     396:	03 c0       	rjmp	.+6      	; 0x39e <readDHT22+0x18e>
		} else
		{
			data->raw_temperature  = rawTemperature;
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
		}	
		data->raw_humidity = rawHumidity;
     39e:	fc 01       	movw	r30, r24
     3a0:	53 83       	std	Z+3, r21	; 0x03
     3a2:	42 83       	std	Z+2, r20	; 0x02
#endif
		return DHT_ERROR_NONE;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <readDHT22+0x1b2>
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
		{
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <readDHT22+0x1b2>
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			return DHT_ERROR_ACK_TOO_LONG;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
			{
				return DHT_ERROR_SYNC_TIMEOUT;
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
			{
				return DHT_ERROR_DATA_TIMEOUT;
     3bc:	85 e0       	ldi	r24, 0x05	; 5
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <readDHT22+0x1b2>
		}	
		data->raw_humidity = rawHumidity;
#endif
		return DHT_ERROR_NONE;
	}
	return DHT_ERROR_CHECKSUM;
     3c0:	86 e0       	ldi	r24, 0x06	; 6
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	7f 90       	pop	r7
     3dc:	6f 90       	pop	r6
     3de:	08 95       	ret

000003e0 <_Z14PowerReductionv>:
const static uint8_t WDT_Multiplyer = 4;


void PowerReduction()
{
	PRR |= (1<<PRTIM2) | (1<<PRTWI);
     3e0:	e4 e6       	ldi	r30, 0x64	; 100
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	80 6c       	ori	r24, 0xC0	; 192
     3e8:	80 83       	st	Z, r24
     3ea:	08 95       	ret

000003ec <_Z24GotToSleepAndWaitForWorkv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	2f e7       	ldi	r18, 0x7F	; 127
     3ee:	8a e1       	ldi	r24, 0x1A	; 26
     3f0:	96 e0       	ldi	r25, 0x06	; 6
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <_Z24GotToSleepAndWaitForWorkv+0x6>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <_Z24GotToSleepAndWaitForWorkv+0x10>
     3fc:	00 00       	nop
}

void GotToSleepAndWaitForWork()
{
	_delay_ms(250);
	cli();
     3fe:	f8 94       	cli
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     400:	83 b7       	in	r24, 0x33	; 51
     402:	81 7f       	andi	r24, 0xF1	; 241
     404:	84 60       	ori	r24, 0x04	; 4
     406:	83 bf       	out	0x33, r24	; 51
	
	sleep_enable();
     408:	83 b7       	in	r24, 0x33	; 51
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	83 bf       	out	0x33, r24	; 51
	sei();
     40e:	78 94       	sei

	sleep_cpu();
     410:	88 95       	sleep
	cli();
     412:	f8 94       	cli
	sleep_disable();
     414:	83 b7       	in	r24, 0x33	; 51
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	83 bf       	out	0x33, r24	; 51
     41a:	8f eb       	ldi	r24, 0xBF	; 191
     41c:	9d e5       	ldi	r25, 0x5D	; 93
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <_Z24GotToSleepAndWaitForWorkv+0x32>
     422:	00 c0       	rjmp	.+0      	; 0x424 <_Z24GotToSleepAndWaitForWorkv+0x38>
     424:	00 00       	nop

	_delay_ms(12);
	sei();
     426:	78 94       	sei
     428:	08 95       	ret

0000042a <_Z29WDTPowerSave_RunAtSystemStartv>:
}

void WDTPowerSave_RunAtSystemStart()
{
	cli();
     42a:	f8 94       	cli
	
	wdt_enable(WDTO_8S);
     42c:	29 e2       	ldi	r18, 0x29	; 41
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	a8 95       	wdr
     438:	80 93 60 00 	sts	0x0060, r24
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	20 93 60 00 	sts	0x0060, r18
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     442:	e0 e6       	ldi	r30, 0x60	; 96
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 65       	ori	r24, 0x50	; 80
     44a:	80 83       	st	Z, r24
     44c:	08 95       	ret

0000044e <__vector_6>:


uint8_t WDTTriggerCount = 1;

ISR(WDT_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	
	cli();
     470:	f8 94       	cli
	
	//MCUSR = 0;
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     472:	e0 e6       	ldi	r30, 0x60	; 96
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 65       	ori	r24, 0x50	; 80
     47a:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDIF);
     47c:	80 81       	ld	r24, Z
     47e:	8f 77       	andi	r24, 0x7F	; 127
     480:	80 83       	st	Z, r24
	
	//wdt_reset();
	//WDTCSR |= (1<<WDIE);
	//WDTCSR = (0<<WDIF);
	wdt_triggered = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 06 02 	sts	0x0206, r24
	if(WDTTriggerCount < WDT_Multiplyer)
     488:	80 91 00 01 	lds	r24, 0x0100
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	48 f4       	brcc	.+18     	; 0x4a2 <__vector_6+0x54>
	{
		WDTTriggerCount++;
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 00 01 	sts	0x0100, r24
		GotToSleepAndWaitForWork();
     496:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
	}
	if(WDTTriggerCount >= WDT_Multiplyer)
     49a:	80 91 00 01 	lds	r24, 0x0100
     49e:	84 30       	cpi	r24, 0x04	; 4
     4a0:	18 f0       	brcs	.+6      	; 0x4a8 <__vector_6+0x5a>
	{
		WDTTriggerCount = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 00 01 	sts	0x0100, r24
	}
	sei();
     4a8:	78 94       	sei
	//_delay_ms(150);
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <_Z10ReadMotionv>:
volatile uint8_t motionStatus = 0;


int ReadMotion()
{
	motionStatus = 0;
     4cc:	10 92 05 02 	sts	0x0205, r1
	 //Just incase set motion pin to input
	 if(MOTION_PIN & (1<<MOTION_PIN_NUM))
     4d0:	4b 9b       	sbis	0x09, 3	; 9
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <_Z10ReadMotionv+0xe>
	 {
		 motionStatus = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 05 02 	sts	0x0205, r24
	 }	
	return motionStatus;	
     4da:	80 91 05 02 	lds	r24, 0x0205
}
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <_Z18configureMotionISRv>:

#if MOTION_ENABLE_ISR
volatile uint8_t MotionDetected = 0;
void configureMotionISR()
{
	cli();
     4e2:	f8 94       	cli
	EICRA |= (1<<ISC10) | (1<<ISC11); //Set for Rising Edge trigger
     4e4:	e9 e6       	ldi	r30, 0x69	; 105
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8c 60       	ori	r24, 0x0C	; 12
     4ec:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1) | (1<<INT0);
     4ee:	8d b3       	in	r24, 0x1d	; 29
     4f0:	83 60       	ori	r24, 0x03	; 3
     4f2:	8d bb       	out	0x1d, r24	; 29
     4f4:	08 95       	ret

000004f6 <__vector_2>:
};


//ISR for Motion INT1
ISR(INT1_vect)
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	8f 93       	push	r24
	cli();
     502:	f8 94       	cli
	sleep_disable();
     504:	83 b7       	in	r24, 0x33	; 51
     506:	8e 7f       	andi	r24, 0xFE	; 254
     508:	83 bf       	out	0x33, r24	; 51
	motionStatus = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 05 02 	sts	0x0205, r24
	MotionDetected = 1;
     510:	80 93 04 02 	sts	0x0204, r24
	EIMSK &= ~(1<<INT1); //Disable Interupt untill it has a chance to transmit, is re-enabled after transmit	
     514:	e9 98       	cbi	0x1d, 1	; 29
	sei();	
     516:	78 94       	sei
}
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_1>:

ISR(INT0_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1

//test wake from sleep for data receive
//should only need to be here to wake and notice there is USART data

}
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <_Z11CheckMotionv>:
Serial serial;

uint8_t justTriggeredByMotionISR = 0;

void CheckMotion()
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	if(MotionDetected)
     53c:	80 91 04 02 	lds	r24, 0x0204
     540:	88 23       	and	r24, r24
     542:	79 f1       	breq	.+94     	; 0x5a2 <_Z11CheckMotionv+0x6a>
	{
		//MotionDetected = 0;
		justTriggeredByMotionISR = 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 e7 01 	sts	0x01E7, r24
		sprintf(buffer,"M:%d\r\n",1);
     54a:	1f 92       	push	r1
     54c:	8f 93       	push	r24
     54e:	89 ea       	ldi	r24, 0xA9	; 169
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	c8 ee       	ldi	r28, 0xE8	; 232
     558:	d1 e0       	ldi	r29, 0x01	; 1
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <sprintf>
		serial.sendString(buffer);
     562:	ce 01       	movw	r24, r28
     564:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN6Serial10sendStringEPKc>
		vw_send((uint8_t *)buffer, strlen(buffer));
     568:	09 90       	ld	r0, Y+
     56a:	00 20       	and	r0, r0
     56c:	e9 f7       	brne	.-6      	; 0x568 <_Z11CheckMotionv+0x30>
     56e:	21 97       	sbiw	r28, 0x01	; 1
     570:	be 01       	movw	r22, r28
     572:	68 5e       	subi	r22, 0xE8	; 232
     574:	71 40       	sbci	r23, 0x01	; 1
     576:	88 ee       	ldi	r24, 0xE8	; 232
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 55 04 	call	0x8aa	; 0x8aa <vw_send>
		MotionDetected = 0;
     57e:	10 92 04 02 	sts	0x0204, r1
     582:	9f e7       	ldi	r25, 0x7F	; 127
     584:	29 ea       	ldi	r18, 0xA9	; 169
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	91 50       	subi	r25, 0x01	; 1
     58a:	20 40       	sbci	r18, 0x00	; 0
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <_Z11CheckMotionv+0x50>
     590:	00 c0       	rjmp	.+0      	; 0x592 <_Z11CheckMotionv+0x5a>
     592:	00 00       	nop
		_delay_ms(150); // wait for transmission to finish		
		EIMSK |= (1<<INT1);
     594:	e9 9a       	sbi	0x1d, 1	; 29
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
	}
	
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <main>:
//NRF24 references

//NRF24 references

int main(void)
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <main+0x6>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <main+0x8>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
	nrf24_tx_address(tx_address);
	nrf24_rx_address(rx_address);
	#endif
	
	
	DDRD &= ~(1<<3); //set motion Pin as input
     5b4:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1<<3); //Make sure pullup is disabled.
     5b6:	5b 98       	cbi	0x0b, 3	; 11
	WDTPowerSave_RunAtSystemStart();
     5b8:	0e 94 15 02 	call	0x42a	; 0x42a <_Z29WDTPowerSave_RunAtSystemStartv>
	PowerReduction();
     5bc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z14PowerReductionv>
	init(); //Starts timer for millis and micro and delay()
     5c0:	0e 94 24 06 	call	0xc48	; 0xc48 <init>
	delay(250);
     5c4:	6a ef       	ldi	r22, 0xFA	; 250
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <delay>
	vw_setup(1500);
     5d0:	8c ed       	ldi	r24, 0xDC	; 220
     5d2:	95 e0       	ldi	r25, 0x05	; 5
     5d4:	0e 94 29 04 	call	0x852	; 0x852 <vw_setup>
	
	serial.begin();
     5d8:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN6Serial5beginEv>
	uint16_t light = 0;
	uint8_t motionData = 0;
	serial.sendString("Boot Complete\r\n");
     5dc:	80 eb       	ldi	r24, 0xB0	; 176
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN6Serial10sendStringEPKc>
	double Ftemp = 0.0;
	DHT22_DATA_t sensor_values;
	configureMotionISR();
     5e4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z18configureMotionISRv>
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light);
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f0 ec       	ldi	r31, 0xC0	; 192
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	08 ee       	ldi	r16, 0xE8	; 232
     5f6:	11 e0       	ldi	r17, 0x01	; 1
	DHT22_DATA_t sensor_values;
	configureMotionISR();
	//DHT22_ERROR_t error;
    for(;;)
	{		
		if(!justTriggeredByMotionISR)
     5f8:	80 91 e7 01 	lds	r24, 0x01E7
     5fc:	81 11       	cpse	r24, r1
     5fe:	57 c0       	rjmp	.+174    	; 0x6ae <main+0x106>
		{ 
		 cli();
     600:	f8 94       	cli
		 readDHT22(&sensor_values);		 
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	0e 94 08 01 	call	0x210	; 0x210 <readDHT22>
		 sei();
     60a:	78 94       	sei
		 light = ADCsingleREAD(0);
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z13ADCsingleREADh>
     612:	d8 2e       	mov	r13, r24
     614:	c9 2e       	mov	r12, r25
		 motionData = ReadMotion();
     616:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z10ReadMotionv>
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light);
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	6b 81       	ldd	r22, Y+3	; 0x03
     620:	7c 81       	ldd	r23, Y+4	; 0x04
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__floatunsisf>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e2       	ldi	r20, 0x20	; 32
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	7f 93       	push	r23
     63c:	6f 93       	push	r22
		 cli();
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
     63e:	69 81       	ldd	r22, Y+1	; 0x01
     640:	7a 81       	ldd	r23, Y+2	; 0x02
     642:	88 27       	eor	r24, r24
     644:	77 fd       	sbrc	r23, 7
     646:	80 95       	com	r24
     648:	98 2f       	mov	r25, r24
     64a:	0e 94 00 07 	call	0xe00	; 0xe00 <__floatsisf>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e2       	ldi	r20, 0x20	; 32
     654:	51 e4       	ldi	r21, 0x41	; 65
     656:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     65a:	26 e6       	ldi	r18, 0x66	; 102
     65c:	36 e6       	ldi	r19, 0x66	; 102
     65e:	46 ee       	ldi	r20, 0xE6	; 230
     660:	5f e3       	ldi	r21, 0x3F	; 63
     662:	0e 94 8c 07 	call	0xf18	; 0xf18 <__mulsf3>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	52 e4       	ldi	r21, 0x42	; 66
     66e:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light);
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	7f 93       	push	r23
     678:	6f 93       	push	r22
     67a:	ff 92       	push	r15
     67c:	ef 92       	push	r14
     67e:	1f 93       	push	r17
     680:	0f 93       	push	r16
     682:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <sprintf>
		 serial.sendString(buffer);
     686:	c8 01       	movw	r24, r16
     688:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN6Serial10sendStringEPKc>
		 vw_send((uint8_t *)buffer, strlen(buffer));
     68c:	f8 01       	movw	r30, r16
     68e:	01 90       	ld	r0, Z+
     690:	00 20       	and	r0, r0
     692:	e9 f7       	brne	.-6      	; 0x68e <main+0xe6>
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	bf 01       	movw	r22, r30
     698:	68 5e       	subi	r22, 0xE8	; 232
     69a:	71 40       	sbci	r23, 0x01	; 1
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 55 04 	call	0x8aa	; 0x8aa <vw_send>
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <main+0x10a>
			////serial.RxBuf
			////serial.sendString(serial.getReceivedData());
		//}
		else
		{
			justTriggeredByMotionISR = 0;
     6ae:	10 92 e7 01 	sts	0x01E7, r1
	wdt_enable(WDTO_8S);	
}

void Reset_WDT_Timer()
{
	wdt_reset();
     6b2:	a8 95       	wdr
		}
		 Reset_WDT_Timer();
		 GotToSleepAndWaitForWork();
     6b4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
		 CheckMotion();
     6b8:	0e 94 9c 02 	call	0x538	; 0x538 <_Z11CheckMotionv>
				
	}
     6bc:	9d cf       	rjmp	.-198    	; 0x5f8 <main+0x50>

000006be <_Z16add_charToBufferh>:

void add_charToBuffer(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     6be:	40 91 4b 02 	lds	r20, 0x024B
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	4f 5f       	subi	r20, 0xFF	; 255
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	4f 73       	andi	r20, 0x3F	; 63
     6ca:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail );/* wait for free space in buffer */	
     6cc:	20 91 4a 02 	lds	r18, 0x024A
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	42 17       	cp	r20, r18
     6d4:	53 07       	cpc	r21, r19
     6d6:	d1 f3       	breq	.-12     	; 0x6cc <_Z16add_charToBufferh+0xe>

	TxBuf[tmphead] = data;
     6d8:	fa 01       	movw	r30, r20
     6da:	e4 5b       	subi	r30, 0xB4	; 180
     6dc:	fd 4f       	sbci	r31, 0xFD	; 253
     6de:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     6e0:	40 93 4b 02 	sts	0x024B, r20

	/* enable UDRE interrupt */
	UCSRB    |= (1<<UDRIE0);
     6e4:	e1 ec       	ldi	r30, 0xC1	; 193
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	80 62       	ori	r24, 0x20	; 32
     6ec:	80 83       	st	Z, r24
     6ee:	08 95       	ret

000006f0 <_Z18add_charToRxBufferh>:

void add_charToRxBuffer(uint8_t data)
{
	uint16_t tmpheadRx;

	tmpheadRx  = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
     6f0:	40 91 09 02 	lds	r20, 0x0209
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	4f 73       	andi	r20, 0x3F	; 63
     6fc:	55 27       	eor	r21, r21

	while ( tmpheadRx == UART_RxTail );/* wait for free space in buffer */
     6fe:	20 91 08 02 	lds	r18, 0x0208
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	42 17       	cp	r20, r18
     706:	53 07       	cpc	r21, r19
     708:	d1 f3       	breq	.-12     	; 0x6fe <_Z18add_charToRxBufferh+0xe>

	RxBuf[tmpheadRx] = data;
     70a:	fa 01       	movw	r30, r20
     70c:	e6 5f       	subi	r30, 0xF6	; 246
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	80 83       	st	Z, r24
	UART_RxHead = tmpheadRx;
     712:	40 93 09 02 	sts	0x0209, r20

	/* enable UDRE interrupt */
	UCSRB    |= (1<<UDRIE0);
     716:	e1 ec       	ldi	r30, 0xC1	; 193
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	80 62       	ori	r24, 0x20	; 32
     71e:	80 83       	st	Z, r24
     720:	08 95       	ret

00000722 <_Z10uart0_putsPKc>:

	} /* uart0_putc */
	
void uart0_puts(const char *s )
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
	while (*s) {
     728:	88 81       	ld	r24, Y
     72a:	88 23       	and	r24, r24
     72c:	31 f0       	breq	.+12     	; 0x73a <_Z10uart0_putsPKc+0x18>
     72e:	21 96       	adiw	r28, 0x01	; 1
		add_charToBuffer(*s++);
     730:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z16add_charToBufferh>

	} /* uart0_putc */
	
void uart0_puts(const char *s )
{
	while (*s) {
     734:	89 91       	ld	r24, Y+
     736:	81 11       	cpse	r24, r1
     738:	fb cf       	rjmp	.-10     	; 0x730 <_Z10uart0_putsPKc+0xe>
		add_charToBuffer(*s++);
	}
} /* uart0_puts */
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <_Z15configureSerialv>:

void configureSerial()
{
	UBRRH = UBRRH_VALUE;
     740:	10 92 c5 00 	sts	0x00C5, r1
	UBRRL = UBRRL_VALUE;
     744:	80 e1       	ldi	r24, 0x10	; 16
     746:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSRA |= (1<<U2X);
     74a:	e0 ec       	ldi	r30, 0xC0	; 192
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 83       	st	Z, r24
     754:	08 95       	ret

00000756 <_Z11startSerialv>:
	#endif	
}

void startSerial()
{
	UART_TxHead = 0;
     756:	10 92 4b 02 	sts	0x024B, r1
	UART_TxTail = 0;
     75a:	10 92 4a 02 	sts	0x024A, r1
	//UART_RxHead = 0;
	//UART_RxTail = 0;
	//Enables Both RX and TX
	UCSRB |= (1<<RXEN) | (1<<TXEN);
     75e:	e1 ec       	ldi	r30, 0xC1	; 193
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	88 61       	ori	r24, 0x18	; 24
     766:	80 83       	st	Z, r24
	
	//Enables RX Complete Interupt
	UCSR0B |= (1<<RXCIE0);
     768:	80 81       	ld	r24, Z
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	80 83       	st	Z, r24
	sei();
     76e:	78 94       	sei
     770:	08 95       	ret

00000772 <_ZN6Serial10sendStringEPKc>:


char *textBuf;
void Serial::sendString(const char *text)
{	
	uart0_puts(text);
     772:	0e 94 91 03 	call	0x722	; 0x722 <_Z10uart0_putsPKc>
	sei();
     776:	78 94       	sei
	UCSR0B |= (1<<UDRIE0);
     778:	e1 ec       	ldi	r30, 0xC1	; 193
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	80 62       	ori	r24, 0x20	; 32
     780:	80 83       	st	Z, r24
     782:	08 95       	ret

00000784 <_ZN6Serial5beginEv>:



void Serial::begin()
{
	configureSerial();
     784:	0e 94 a0 03 	call	0x740	; 0x740 <_Z15configureSerialv>
	startSerial();
     788:	0e 94 ab 03 	call	0x756	; 0x756 <_Z11startSerialv>
     78c:	08 95       	ret

0000078e <__vector_18>:

#define UART0_TRANSMIT_INTERRUPT USART_UDRE_vect

uint8_t incomming;
ISR(USART_RX_vect)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
	cli();
     7b0:	f8 94       	cli
	sleep_disable();
     7b2:	83 b7       	in	r24, 0x33	; 51
     7b4:	8e 7f       	andi	r24, 0xFE	; 254
     7b6:	83 bf       	out	0x33, r24	; 51
	EIMSK &= ~(1<<INT0);
     7b8:	e8 98       	cbi	0x1d, 0	; 29
	
	
	incomming = UDR;
     7ba:	80 91 c6 00 	lds	r24, 0x00C6
     7be:	80 93 07 02 	sts	0x0207, r24
	UCSRA &= ~(1<<RXC);
     7c2:	e0 ec       	ldi	r30, 0xC0	; 192
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8f 77       	andi	r24, 0x7F	; 127
     7ca:	80 83       	st	Z, r24

	if((incomming != '\0') || (incomming != '\r'))
	{		
		add_charToRxBuffer(incomming);
     7cc:	80 91 07 02 	lds	r24, 0x0207
     7d0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_Z18add_charToRxBufferh>
	}
	
	//Echo back for testing
	//UDR = incomming;
	
	EIMSK |= (1<<INT0);
     7d4:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
     7d6:	78 94       	sei
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	uint16_t tmptail;

 	if ( UART_TxHead != UART_TxTail) {
     80c:	90 91 4b 02 	lds	r25, 0x024B
     810:	80 91 4a 02 	lds	r24, 0x024A
     814:	98 17       	cp	r25, r24
     816:	79 f0       	breq	.+30     	; 0x836 <__vector_19+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
     818:	80 91 4a 02 	lds	r24, 0x024A
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	8f 73       	andi	r24, 0x3F	; 63
     822:	99 27       	eor	r25, r25
		UART_TxTail = tmptail;
     824:	80 93 4a 02 	sts	0x024A, r24
		/* get one byte from buffer and write it to UART */
		UDR = TxBuf[tmptail];  /* start transmission */
     828:	fc 01       	movw	r30, r24
     82a:	e4 5b       	subi	r30, 0xB4	; 180
     82c:	fd 4f       	sbci	r31, 0xFD	; 253
     82e:	80 81       	ld	r24, Z
     830:	80 93 c6 00 	sts	0x00C6, r24
     834:	05 c0       	rjmp	.+10     	; 0x840 <__vector_19+0x46>
		} else {
		/* tx buffer empty, disable UDRE interrupt */
		UCSRB &= ~(1<<UDRIE0);		
     836:	e1 ec       	ldi	r30, 0xC1	; 193
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	8f 7d       	andi	r24, 0xDF	; 223
     83e:	80 83       	st	Z, r24
	}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <vw_setup>:
// Speed is in bits per sec RF rate
void vw_setup(uint16_t speed)
{
    // Calculate the OCR1A overflow count based on the required bit speed
    // and CPU clock rate
    uint16_t ocr1a = (F_CPU / 8UL) / speed;
     852:	9c 01       	movw	r18, r24
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	60 e4       	ldi	r22, 0x40	; 64
     85a:	72 e4       	ldi	r23, 0x42	; 66
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__udivmodsi4>

#ifndef TEST
    // Set up timer1 for a tick every 62.50 microseconds 
    // for 2000 bits per sec
    TCCR1A = 0;
     864:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(WGM12) | _BV(CS10);
     868:	89 e0       	ldi	r24, 0x09	; 9
     86a:	80 93 81 00 	sts	0x0081, r24
    // Caution: special procedures for setting 16 bit regs
    OCR1A = ocr1a;
     86e:	30 93 89 00 	sts	0x0089, r19
     872:	20 93 88 00 	sts	0x0088, r18
    // Enable interrupt
#ifdef TIMSK1
    // atmega168
    TIMSK1 |= _BV(OCIE1A);
     876:	ef e6       	ldi	r30, 0x6F	; 111
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	82 60       	ori	r24, 0x02	; 2
     87e:	80 83       	st	Z, r24
#endif

#endif

    // Set up digital IO pins
	DDRB |= (1<<0);
     880:	20 9a       	sbi	0x04, 0	; 4
     882:	08 95       	ret

00000884 <vw_tx_start>:

// Start the transmitter, call when the tx buffer is ready to go and vw_tx_len is
// set to the total number of symbols to send
void vw_tx_start()
{
    vw_tx_index = 0;
     884:	10 92 92 02 	sts	0x0292, r1
    vw_tx_bit = 0;
     888:	10 92 91 02 	sts	0x0291, r1
    vw_tx_sample = 0;
     88c:	10 92 90 02 	sts	0x0290, r1

    // Enable the transmitter hardware
    //digitalWrite(vw_ptt_pin, true ^ vw_ptt_inverted);

    // Next tick interrupt will send the first bit
    vw_tx_enabled = true;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 8f 02 	sts	0x028F, r24
     896:	08 95       	ret

00000898 <vw_tx_stop>:
// Stop the transmitter, call when all bits are sent
void vw_tx_stop()
{
    // Disable the transmitter hardware
    //digitalWrite(vw_ptt_pin, false ^ vw_ptt_inverted);
    PORTB &= ~(1<<0);
     898:	28 98       	cbi	0x05, 0	; 5
    //digitalWrite(vw_tx_pin, false);

    // No more ticks for the transmitter
    vw_tx_enabled = false;
     89a:	10 92 8f 02 	sts	0x028F, r1
     89e:	08 95       	ret

000008a0 <vw_wait_tx>:

// Wait for the transmitter to become available
// Busy-wait loop until the ISR says the message has been sent
void vw_wait_tx()
{
    while (vw_tx_enabled)
     8a0:	80 91 8f 02 	lds	r24, 0x028F
     8a4:	81 11       	cpse	r24, r1
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <vw_wait_tx>
	;
}
     8a8:	08 95       	ret

000008aa <vw_send>:
// Wait until transmitter is available and encode and queue the message
// into vw_tx_buf
// The message is raw bytes, with no packet structure imposed
// It is transmitted preceded a byte count and followed by 2 FCS bytes
uint8_t vw_send(uint8_t* buf, uint8_t len)
{
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	08 2f       	mov	r16, r24
     8b8:	f9 2e       	mov	r15, r25
     8ba:	16 2f       	mov	r17, r22
    uint8_t index = 0;
    uint16_t crc = 0xffff;
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes

    if (len > VW_MAX_PAYLOAD)
     8bc:	6e 34       	cpi	r22, 0x4E	; 78
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <vw_send+0x18>
     8c0:	ad c0       	rjmp	.+346    	; 0xa1c <__stack+0x11d>
	return false;

    // Wait for transmitter to become available
    vw_wait_tx();
     8c2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vw_wait_tx>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	3f ef       	ldi	r19, 0xFF	; 255
     8ca:	a3 e0       	ldi	r26, 0x03	; 3
     8cc:	a1 0f       	add	r26, r17
     8ce:	2a 27       	eor	r18, r26
     8d0:	02 2e       	mov	r0, r18
     8d2:	22 95       	swap	r18
     8d4:	20 7f       	andi	r18, 0xF0	; 240
     8d6:	20 25       	eor	r18, r0
     8d8:	03 2e       	mov	r0, r19
     8da:	32 2f       	mov	r19, r18
     8dc:	22 95       	swap	r18
     8de:	2f 70       	andi	r18, 0x0F	; 15
     8e0:	02 26       	eor	r0, r18
     8e2:	26 95       	lsr	r18
     8e4:	32 27       	eor	r19, r18
     8e6:	23 27       	eor	r18, r19
     8e8:	22 0f       	add	r18, r18
     8ea:	22 0f       	add	r18, r18
     8ec:	22 0f       	add	r18, r18
     8ee:	20 25       	eor	r18, r0

    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
    p[index++] = symbols[count >> 4];
     8f0:	e1 e0       	ldi	r30, 0x01	; 1
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	ca 2f       	mov	r28, r26
     8f6:	d0 e0       	ldi	r29, 0x00	; 0
     8f8:	d5 95       	asr	r29
     8fa:	c7 95       	ror	r28
     8fc:	d5 95       	asr	r29
     8fe:	c7 95       	ror	r28
     900:	d5 95       	asr	r29
     902:	c7 95       	ror	r28
     904:	d5 95       	asr	r29
     906:	c7 95       	ror	r28
     908:	cb 52       	subi	r28, 0x2B	; 43
     90a:	de 4f       	sbci	r29, 0xFE	; 254
     90c:	88 81       	ld	r24, Y
     90e:	80 87       	std	Z+8, r24	; 0x08
    p[index++] = symbols[count & 0xf];
     910:	af 70       	andi	r26, 0x0F	; 15
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	ab 52       	subi	r26, 0x2B	; 43
     916:	be 4f       	sbci	r27, 0xFE	; 254
     918:	8c 91       	ld	r24, X
     91a:	81 87       	std	Z+9, r24	; 0x09

    // Encode the message into 6 bit symbols. Each byte is converted into 
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
     91c:	11 23       	and	r17, r17
     91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
     920:	3b c0       	rjmp	.+118    	; 0x998 <__stack+0x99>
     922:	60 2f       	mov	r22, r16
     924:	ac e0       	ldi	r26, 0x0C	; 12
     926:	b1 e0       	ldi	r27, 0x01	; 1
     928:	e0 2f       	mov	r30, r16
     92a:	ff 2d       	mov	r31, r15
     92c:	7f 01       	movw	r14, r30
    {
	crc = _crc_ccitt_update(crc, buf[i]);
     92e:	41 91       	ld	r20, Z+
     930:	24 27       	eor	r18, r20
     932:	02 2e       	mov	r0, r18
     934:	22 95       	swap	r18
     936:	20 7f       	andi	r18, 0xF0	; 240
     938:	20 25       	eor	r18, r0
     93a:	03 2e       	mov	r0, r19
     93c:	32 2f       	mov	r19, r18
     93e:	22 95       	swap	r18
     940:	2f 70       	andi	r18, 0x0F	; 15
     942:	02 26       	eor	r0, r18
     944:	26 95       	lsr	r18
     946:	32 27       	eor	r19, r18
     948:	23 27       	eor	r18, r19
     94a:	22 0f       	add	r18, r18
     94c:	22 0f       	add	r18, r18
     94e:	22 0f       	add	r18, r18
     950:	20 25       	eor	r18, r0
     952:	cd 01       	movw	r24, r26
     954:	01 97       	sbiw	r24, 0x01	; 1
	p[index++] = symbols[buf[i] >> 4];
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	55 95       	asr	r21
     95a:	47 95       	ror	r20
     95c:	55 95       	asr	r21
     95e:	47 95       	ror	r20
     960:	55 95       	asr	r21
     962:	47 95       	ror	r20
     964:	55 95       	asr	r21
     966:	47 95       	ror	r20
     968:	4b 52       	subi	r20, 0x2B	; 43
     96a:	5e 4f       	sbci	r21, 0xFE	; 254
     96c:	ea 01       	movw	r28, r20
     96e:	48 81       	ld	r20, Y
     970:	ec 01       	movw	r28, r24
     972:	48 83       	st	Y, r20
	p[index++] = symbols[buf[i] & 0xf];
     974:	e7 01       	movw	r28, r14
     976:	88 81       	ld	r24, Y
     978:	c8 2f       	mov	r28, r24
     97a:	cf 70       	andi	r28, 0x0F	; 15
     97c:	d0 e0       	ldi	r29, 0x00	; 0
     97e:	cb 52       	subi	r28, 0x2B	; 43
     980:	de 4f       	sbci	r29, 0xFE	; 254
     982:	88 81       	ld	r24, Y
     984:	8c 93       	st	X, r24
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	8e 2f       	mov	r24, r30
     98a:	86 1b       	sub	r24, r22
    p[index++] = symbols[count >> 4];
    p[index++] = symbols[count & 0xf];

    // Encode the message into 6 bit symbols. Each byte is converted into 
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
     98c:	81 17       	cp	r24, r17
     98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x93>
     990:	cd cf       	rjmp	.-102    	; 0x92c <__stack+0x2d>
     992:	1f 5f       	subi	r17, 0xFF	; 255
     994:	11 0f       	add	r17, r17
     996:	01 c0       	rjmp	.+2      	; 0x99a <__stack+0x9b>
    vw_wait_tx();

    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
    p[index++] = symbols[count >> 4];
    p[index++] = symbols[count & 0xf];
     998:	12 e0       	ldi	r17, 0x02	; 2
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
     99a:	20 95       	com	r18
     99c:	30 95       	com	r19
    p[index++] = symbols[(crc >> 4)  & 0xf];
     99e:	e1 2f       	mov	r30, r17
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	e7 5f       	subi	r30, 0xF7	; 247
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	d9 01       	movw	r26, r18
     9a8:	b2 95       	swap	r27
     9aa:	a2 95       	swap	r26
     9ac:	af 70       	andi	r26, 0x0F	; 15
     9ae:	ab 27       	eor	r26, r27
     9b0:	bf 70       	andi	r27, 0x0F	; 15
     9b2:	ab 27       	eor	r26, r27
     9b4:	af 70       	andi	r26, 0x0F	; 15
     9b6:	bb 27       	eor	r27, r27
     9b8:	ab 52       	subi	r26, 0x2B	; 43
     9ba:	be 4f       	sbci	r27, 0xFE	; 254
     9bc:	8c 91       	ld	r24, X
     9be:	80 83       	st	Z, r24
     9c0:	e1 e0       	ldi	r30, 0x01	; 1
     9c2:	e1 0f       	add	r30, r17
    p[index++] = symbols[crc & 0xf];
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	e7 5f       	subi	r30, 0xF7	; 247
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	d9 01       	movw	r26, r18
     9cc:	af 70       	andi	r26, 0x0F	; 15
     9ce:	bb 27       	eor	r27, r27
     9d0:	ab 52       	subi	r26, 0x2B	; 43
     9d2:	be 4f       	sbci	r27, 0xFE	; 254
     9d4:	8c 91       	ld	r24, X
     9d6:	80 83       	st	Z, r24
     9d8:	e2 e0       	ldi	r30, 0x02	; 2
     9da:	e1 0f       	add	r30, r17
    p[index++] = symbols[(crc >> 12) & 0xf];
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e7 5f       	subi	r30, 0xF7	; 247
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	d9 01       	movw	r26, r18
     9e4:	ab 2f       	mov	r26, r27
     9e6:	bb 27       	eor	r27, r27
     9e8:	a2 95       	swap	r26
     9ea:	af 70       	andi	r26, 0x0F	; 15
     9ec:	ab 52       	subi	r26, 0x2B	; 43
     9ee:	be 4f       	sbci	r27, 0xFE	; 254
     9f0:	8c 91       	ld	r24, X
     9f2:	80 83       	st	Z, r24
     9f4:	e3 e0       	ldi	r30, 0x03	; 3
     9f6:	e1 0f       	add	r30, r17
    p[index++] = symbols[(crc >> 8)  & 0xf];
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	e7 5f       	subi	r30, 0xF7	; 247
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	a3 2f       	mov	r26, r19
     a00:	bb 27       	eor	r27, r27
     a02:	af 70       	andi	r26, 0x0F	; 15
     a04:	bb 27       	eor	r27, r27
     a06:	ab 52       	subi	r26, 0x2B	; 43
     a08:	be 4f       	sbci	r27, 0xFE	; 254
     a0a:	8c 91       	ld	r24, X
     a0c:	80 83       	st	Z, r24

    // Total number of 6-bit symbols to send
    vw_tx_len = index + VW_HEADER_LEN;
     a0e:	14 5f       	subi	r17, 0xF4	; 244
     a10:	10 93 93 02 	sts	0x0293, r17

    // Start the low level interrupt handler sending symbols
    vw_tx_start();
     a14:	0e 94 42 04 	call	0x884	; 0x884 <vw_tx_start>

    return true;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <__stack+0x11f>
    uint16_t crc = 0xffff;
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes

    if (len > VW_MAX_PAYLOAD)
	return false;
     a1c:	80 e0       	ldi	r24, 0x00	; 0

    // Start the low level interrupt handler sending symbols
    vw_tx_start();

    return true;
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	08 95       	ret

00000a2c <__vector_11>:
// Its job is to output the next bit from the transmitter (every 8 calls)
// and to call the PLL code if the receiver is enabled
//ISR(SIG_OUTPUT_COMPARE1A)
volatile uint8_t buff;
ISR(TIMER1_COMPA_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
    //vw_rx_sample = digitalRead(vw_rx_pin);

    // Do transmitter stuff first to reduce transmitter bit jitter due 
    // to variable receiver processing
    if (vw_tx_enabled && vw_tx_sample++ == 0)
     a4e:	80 91 8f 02 	lds	r24, 0x028F
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <__vector_11+0x2c>
     a56:	42 c0       	rjmp	.+132    	; 0xadc <__vector_11+0xb0>
     a58:	80 91 90 02 	lds	r24, 0x0290
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	98 0f       	add	r25, r24
     a60:	90 93 90 02 	sts	0x0290, r25
     a64:	81 11       	cpse	r24, r1
     a66:	3a c0       	rjmp	.+116    	; 0xadc <__vector_11+0xb0>
    {
        // Send next bit
	// Symbols are sent LSB first
        // Finished sending the whole message? (after waiting one bit period 
	// since the last bit)
        if (vw_tx_index >= vw_tx_len)
     a68:	e0 91 92 02 	lds	r30, 0x0292
     a6c:	80 91 93 02 	lds	r24, 0x0293
     a70:	e8 17       	cp	r30, r24
     a72:	60 f0       	brcs	.+24     	; 0xa8c <__vector_11+0x60>
	{
	    vw_tx_stop();
     a74:	0e 94 4c 04 	call	0x898	; 0x898 <vw_tx_stop>
	    vw_tx_msg_count++;
     a78:	80 91 8d 02 	lds	r24, 0x028D
     a7c:	90 91 8e 02 	lds	r25, 0x028E
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	90 93 8e 02 	sts	0x028E, r25
     a86:	80 93 8d 02 	sts	0x028D, r24
     a8a:	28 c0       	rjmp	.+80     	; 0xadc <__vector_11+0xb0>
	}
        else
        {
			
			buff = vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++);
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ef 5f       	subi	r30, 0xFF	; 255
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	40 81       	ld	r20, Z
     a94:	90 91 91 02 	lds	r25, 0x0291
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	89 0f       	add	r24, r25
     a9c:	80 93 91 02 	sts	0x0291, r24
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	b9 01       	movw	r22, r18
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <__vector_11+0x80>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	9a 95       	dec	r25
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <__vector_11+0x7c>
     ab0:	cb 01       	movw	r24, r22
     ab2:	84 23       	and	r24, r20
     ab4:	80 93 8c 02 	sts	0x028C, r24
			buff ? PORTB |= (1<<0) : PORTB &= ~(1<<0);
     ab8:	80 91 8c 02 	lds	r24, 0x028C
     abc:	88 23       	and	r24, r24
     abe:	11 f0       	breq	.+4      	; 0xac4 <__vector_11+0x98>
     ac0:	28 9a       	sbi	0x05, 0	; 5
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__vector_11+0x9a>
     ac4:	28 98       	cbi	0x05, 0	; 5
	    //digitalWrite(vw_tx_pin, );
	    if (vw_tx_bit >= 6)
     ac6:	80 91 91 02 	lds	r24, 0x0291
     aca:	86 30       	cpi	r24, 0x06	; 6
     acc:	38 f0       	brcs	.+14     	; 0xadc <__vector_11+0xb0>
	    {
	        vw_tx_bit = 0;
     ace:	10 92 91 02 	sts	0x0291, r1
                vw_tx_index++;
     ad2:	80 91 92 02 	lds	r24, 0x0292
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	80 93 92 02 	sts	0x0292, r24
	    }
        }
    }
    if (vw_tx_sample > 7)
     adc:	80 91 90 02 	lds	r24, 0x0290
     ae0:	88 30       	cpi	r24, 0x08	; 8
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <__vector_11+0xbc>
	vw_tx_sample = 0;
     ae4:	10 92 90 02 	sts	0x0290, r1

    // if (vw_rx_enabled)
	// vw_pll();
}
     ae8:	ff 91       	pop	r31
     aea:	ef 91       	pop	r30
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	7f 91       	pop	r23
     af6:	6f 91       	pop	r22
     af8:	5f 91       	pop	r21
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	2f 93       	push	r18
     b16:	3f 93       	push	r19
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     b20:	80 91 95 02 	lds	r24, 0x0295
     b24:	90 91 96 02 	lds	r25, 0x0296
     b28:	a0 91 97 02 	lds	r26, 0x0297
     b2c:	b0 91 98 02 	lds	r27, 0x0298
	unsigned char f = timer0_fract;
     b30:	30 91 94 02 	lds	r19, 0x0294

	m += MILLIS_INC;
	f += FRACT_INC;
     b34:	26 e0       	ldi	r18, 0x06	; 6
     b36:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     b38:	2d 37       	cpi	r18, 0x7D	; 125
     b3a:	20 f4       	brcc	.+8      	; 0xb44 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     b3c:	02 96       	adiw	r24, 0x02	; 2
     b3e:	a1 1d       	adc	r26, r1
     b40:	b1 1d       	adc	r27, r1
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     b44:	29 e8       	ldi	r18, 0x89	; 137
     b46:	23 0f       	add	r18, r19
		m += 1;
     b48:	03 96       	adiw	r24, 0x03	; 3
     b4a:	a1 1d       	adc	r26, r1
     b4c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     b4e:	20 93 94 02 	sts	0x0294, r18
	timer0_millis = m;
     b52:	80 93 95 02 	sts	0x0295, r24
     b56:	90 93 96 02 	sts	0x0296, r25
     b5a:	a0 93 97 02 	sts	0x0297, r26
     b5e:	b0 93 98 02 	sts	0x0298, r27
	timer0_overflow_count++;
     b62:	80 91 99 02 	lds	r24, 0x0299
     b66:	90 91 9a 02 	lds	r25, 0x029A
     b6a:	a0 91 9b 02 	lds	r26, 0x029B
     b6e:	b0 91 9c 02 	lds	r27, 0x029C
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	a1 1d       	adc	r26, r1
     b76:	b1 1d       	adc	r27, r1
     b78:	80 93 99 02 	sts	0x0299, r24
     b7c:	90 93 9a 02 	sts	0x029A, r25
     b80:	a0 93 9b 02 	sts	0x029B, r26
     b84:	b0 93 9c 02 	sts	0x029C, r27
}
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     b9e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     ba0:	f8 94       	cli
	m = timer0_overflow_count;
     ba2:	80 91 99 02 	lds	r24, 0x0299
     ba6:	90 91 9a 02 	lds	r25, 0x029A
     baa:	a0 91 9b 02 	lds	r26, 0x029B
     bae:	b0 91 9c 02 	lds	r27, 0x029C
	#if defined(TCNT0)
	t = TCNT0;
     bb2:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     bb4:	a8 9b       	sbis	0x15, 0	; 21
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <micros+0x1e>
     bb8:	2f 3f       	cpi	r18, 0xFF	; 255
     bba:	c1 f4       	brne	.+48     	; 0xbec <micros+0x4e>
	#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
	m++;
	#endif

	SREG = oldSREG;
     bbc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     bbe:	ba 2f       	mov	r27, r26
     bc0:	a9 2f       	mov	r26, r25
     bc2:	98 2f       	mov	r25, r24
     bc4:	88 27       	eor	r24, r24
     bc6:	82 0f       	add	r24, r18
     bc8:	91 1d       	adc	r25, r1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	bc 01       	movw	r22, r24
     be0:	cd 01       	movw	r24, r26
     be2:	66 0f       	add	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 1f       	adc	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	08 95       	ret
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
	m++;
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	a1 1d       	adc	r26, r1
     bf0:	b1 1d       	adc	r27, r1
     bf2:	e4 cf       	rjmp	.-56     	; 0xbbc <micros+0x1e>

00000bf4 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	6b 01       	movw	r12, r22
     c02:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     c04:	0e 94 cf 05 	call	0xb9e	; 0xb9e <micros>
     c08:	eb 01       	movw	r28, r22

	while (ms > 0) {
     c0a:	c1 14       	cp	r12, r1
     c0c:	d1 04       	cpc	r13, r1
     c0e:	e1 04       	cpc	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	99 f0       	breq	.+38     	; 0xc3a <delay+0x46>
		if (((uint16_t)micros() - start) >= 1000) {
     c14:	0e 94 cf 05 	call	0xb9e	; 0xb9e <micros>
     c18:	6c 1b       	sub	r22, r28
     c1a:	7d 0b       	sbc	r23, r29
     c1c:	68 3e       	cpi	r22, 0xE8	; 232
     c1e:	73 40       	sbci	r23, 0x03	; 3
     c20:	38 f0       	brcs	.+14     	; 0xc30 <delay+0x3c>
			ms--;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	c8 1a       	sub	r12, r24
     c26:	d1 08       	sbc	r13, r1
     c28:	e1 08       	sbc	r14, r1
     c2a:	f1 08       	sbc	r15, r1
			start += 1000;
     c2c:	c8 51       	subi	r28, 0x18	; 24
     c2e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     c30:	c1 14       	cp	r12, r1
     c32:	d1 04       	cpc	r13, r1
     c34:	e1 04       	cpc	r14, r1
     c36:	f1 04       	cpc	r15, r1
     c38:	69 f7       	brne	.-38     	; 0xc14 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	08 95       	ret

00000c48 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     c48:	78 94       	sei
	
	///#if defined(__AVR_ATMEGA328P__) 
	//Setting up timer
	//328
	#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
     c4a:	84 b5       	in	r24, 0x24	; 36
     c4c:	83 60       	ori	r24, 0x03	; 3
     c4e:	84 bd       	out	0x24, r24	; 36
	//#if F_CPU==(16000000UL)
	TCCR0B |= (1<<CS01) | (1<<CS00);
     c50:	85 b5       	in	r24, 0x25	; 37
     c52:	83 60       	ori	r24, 0x03	; 3
     c54:	85 bd       	out	0x25, r24	; 37
	//#elif F_CPU==(1000000UL)
	//TCCR0B |= (0<<CS01) | (1<<CS00);
	//#endif
	
	//Enabling Timer OVF Interupt
	TIMSK0 |= (1<< TOIE0);
     c56:	ee e6       	ldi	r30, 0x6E	; 110
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	80 83       	st	Z, r24
     c60:	08 95       	ret

00000c62 <__subsf3>:
     c62:	50 58       	subi	r21, 0x80	; 128

00000c64 <__addsf3>:
     c64:	bb 27       	eor	r27, r27
     c66:	aa 27       	eor	r26, r26
     c68:	0e d0       	rcall	.+28     	; 0xc86 <__addsf3x>
     c6a:	1c c1       	rjmp	.+568    	; 0xea4 <__fp_round>
     c6c:	0d d1       	rcall	.+538    	; 0xe88 <__fp_pscA>
     c6e:	30 f0       	brcs	.+12     	; 0xc7c <__addsf3+0x18>
     c70:	12 d1       	rcall	.+548    	; 0xe96 <__fp_pscB>
     c72:	20 f0       	brcs	.+8      	; 0xc7c <__addsf3+0x18>
     c74:	31 f4       	brne	.+12     	; 0xc82 <__addsf3+0x1e>
     c76:	9f 3f       	cpi	r25, 0xFF	; 255
     c78:	11 f4       	brne	.+4      	; 0xc7e <__addsf3+0x1a>
     c7a:	1e f4       	brtc	.+6      	; 0xc82 <__addsf3+0x1e>
     c7c:	02 c1       	rjmp	.+516    	; 0xe82 <__fp_nan>
     c7e:	0e f4       	brtc	.+2      	; 0xc82 <__addsf3+0x1e>
     c80:	e0 95       	com	r30
     c82:	e7 fb       	bst	r30, 7
     c84:	f8 c0       	rjmp	.+496    	; 0xe76 <__fp_inf>

00000c86 <__addsf3x>:
     c86:	e9 2f       	mov	r30, r25
     c88:	1e d1       	rcall	.+572    	; 0xec6 <__fp_split3>
     c8a:	80 f3       	brcs	.-32     	; 0xc6c <__addsf3+0x8>
     c8c:	ba 17       	cp	r27, r26
     c8e:	62 07       	cpc	r22, r18
     c90:	73 07       	cpc	r23, r19
     c92:	84 07       	cpc	r24, r20
     c94:	95 07       	cpc	r25, r21
     c96:	18 f0       	brcs	.+6      	; 0xc9e <__addsf3x+0x18>
     c98:	71 f4       	brne	.+28     	; 0xcb6 <__addsf3x+0x30>
     c9a:	9e f5       	brtc	.+102    	; 0xd02 <__addsf3x+0x7c>
     c9c:	36 c1       	rjmp	.+620    	; 0xf0a <__fp_zero>
     c9e:	0e f4       	brtc	.+2      	; 0xca2 <__addsf3x+0x1c>
     ca0:	e0 95       	com	r30
     ca2:	0b 2e       	mov	r0, r27
     ca4:	ba 2f       	mov	r27, r26
     ca6:	a0 2d       	mov	r26, r0
     ca8:	0b 01       	movw	r0, r22
     caa:	b9 01       	movw	r22, r18
     cac:	90 01       	movw	r18, r0
     cae:	0c 01       	movw	r0, r24
     cb0:	ca 01       	movw	r24, r20
     cb2:	a0 01       	movw	r20, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	ff 27       	eor	r31, r31
     cb8:	59 1b       	sub	r21, r25
     cba:	99 f0       	breq	.+38     	; 0xce2 <__addsf3x+0x5c>
     cbc:	59 3f       	cpi	r21, 0xF9	; 249
     cbe:	50 f4       	brcc	.+20     	; 0xcd4 <__addsf3x+0x4e>
     cc0:	50 3e       	cpi	r21, 0xE0	; 224
     cc2:	68 f1       	brcs	.+90     	; 0xd1e <__addsf3x+0x98>
     cc4:	1a 16       	cp	r1, r26
     cc6:	f0 40       	sbci	r31, 0x00	; 0
     cc8:	a2 2f       	mov	r26, r18
     cca:	23 2f       	mov	r18, r19
     ccc:	34 2f       	mov	r19, r20
     cce:	44 27       	eor	r20, r20
     cd0:	58 5f       	subi	r21, 0xF8	; 248
     cd2:	f3 cf       	rjmp	.-26     	; 0xcba <__addsf3x+0x34>
     cd4:	46 95       	lsr	r20
     cd6:	37 95       	ror	r19
     cd8:	27 95       	ror	r18
     cda:	a7 95       	ror	r26
     cdc:	f0 40       	sbci	r31, 0x00	; 0
     cde:	53 95       	inc	r21
     ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__addsf3x+0x4e>
     ce2:	7e f4       	brtc	.+30     	; 0xd02 <__addsf3x+0x7c>
     ce4:	1f 16       	cp	r1, r31
     ce6:	ba 0b       	sbc	r27, r26
     ce8:	62 0b       	sbc	r22, r18
     cea:	73 0b       	sbc	r23, r19
     cec:	84 0b       	sbc	r24, r20
     cee:	ba f0       	brmi	.+46     	; 0xd1e <__addsf3x+0x98>
     cf0:	91 50       	subi	r25, 0x01	; 1
     cf2:	a1 f0       	breq	.+40     	; 0xd1c <__addsf3x+0x96>
     cf4:	ff 0f       	add	r31, r31
     cf6:	bb 1f       	adc	r27, r27
     cf8:	66 1f       	adc	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	c2 f7       	brpl	.-16     	; 0xcf0 <__addsf3x+0x6a>
     d00:	0e c0       	rjmp	.+28     	; 0xd1e <__addsf3x+0x98>
     d02:	ba 0f       	add	r27, r26
     d04:	62 1f       	adc	r22, r18
     d06:	73 1f       	adc	r23, r19
     d08:	84 1f       	adc	r24, r20
     d0a:	48 f4       	brcc	.+18     	; 0xd1e <__addsf3x+0x98>
     d0c:	87 95       	ror	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b7 95       	ror	r27
     d14:	f7 95       	ror	r31
     d16:	9e 3f       	cpi	r25, 0xFE	; 254
     d18:	08 f0       	brcs	.+2      	; 0xd1c <__addsf3x+0x96>
     d1a:	b3 cf       	rjmp	.-154    	; 0xc82 <__addsf3+0x1e>
     d1c:	93 95       	inc	r25
     d1e:	88 0f       	add	r24, r24
     d20:	08 f0       	brcs	.+2      	; 0xd24 <__addsf3x+0x9e>
     d22:	99 27       	eor	r25, r25
     d24:	ee 0f       	add	r30, r30
     d26:	97 95       	ror	r25
     d28:	87 95       	ror	r24
     d2a:	08 95       	ret

00000d2c <__divsf3>:
     d2c:	0c d0       	rcall	.+24     	; 0xd46 <__divsf3x>
     d2e:	ba c0       	rjmp	.+372    	; 0xea4 <__fp_round>
     d30:	b2 d0       	rcall	.+356    	; 0xe96 <__fp_pscB>
     d32:	40 f0       	brcs	.+16     	; 0xd44 <__divsf3+0x18>
     d34:	a9 d0       	rcall	.+338    	; 0xe88 <__fp_pscA>
     d36:	30 f0       	brcs	.+12     	; 0xd44 <__divsf3+0x18>
     d38:	21 f4       	brne	.+8      	; 0xd42 <__divsf3+0x16>
     d3a:	5f 3f       	cpi	r21, 0xFF	; 255
     d3c:	19 f0       	breq	.+6      	; 0xd44 <__divsf3+0x18>
     d3e:	9b c0       	rjmp	.+310    	; 0xe76 <__fp_inf>
     d40:	51 11       	cpse	r21, r1
     d42:	e4 c0       	rjmp	.+456    	; 0xf0c <__fp_szero>
     d44:	9e c0       	rjmp	.+316    	; 0xe82 <__fp_nan>

00000d46 <__divsf3x>:
     d46:	bf d0       	rcall	.+382    	; 0xec6 <__fp_split3>
     d48:	98 f3       	brcs	.-26     	; 0xd30 <__divsf3+0x4>

00000d4a <__divsf3_pse>:
     d4a:	99 23       	and	r25, r25
     d4c:	c9 f3       	breq	.-14     	; 0xd40 <__divsf3+0x14>
     d4e:	55 23       	and	r21, r21
     d50:	b1 f3       	breq	.-20     	; 0xd3e <__divsf3+0x12>
     d52:	95 1b       	sub	r25, r21
     d54:	55 0b       	sbc	r21, r21
     d56:	bb 27       	eor	r27, r27
     d58:	aa 27       	eor	r26, r26
     d5a:	62 17       	cp	r22, r18
     d5c:	73 07       	cpc	r23, r19
     d5e:	84 07       	cpc	r24, r20
     d60:	38 f0       	brcs	.+14     	; 0xd70 <__divsf3_pse+0x26>
     d62:	9f 5f       	subi	r25, 0xFF	; 255
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	44 1f       	adc	r20, r20
     d6c:	aa 1f       	adc	r26, r26
     d6e:	a9 f3       	breq	.-22     	; 0xd5a <__divsf3_pse+0x10>
     d70:	33 d0       	rcall	.+102    	; 0xdd8 <__divsf3_pse+0x8e>
     d72:	0e 2e       	mov	r0, r30
     d74:	3a f0       	brmi	.+14     	; 0xd84 <__divsf3_pse+0x3a>
     d76:	e0 e8       	ldi	r30, 0x80	; 128
     d78:	30 d0       	rcall	.+96     	; 0xdda <__divsf3_pse+0x90>
     d7a:	91 50       	subi	r25, 0x01	; 1
     d7c:	50 40       	sbci	r21, 0x00	; 0
     d7e:	e6 95       	lsr	r30
     d80:	00 1c       	adc	r0, r0
     d82:	ca f7       	brpl	.-14     	; 0xd76 <__divsf3_pse+0x2c>
     d84:	29 d0       	rcall	.+82     	; 0xdd8 <__divsf3_pse+0x8e>
     d86:	fe 2f       	mov	r31, r30
     d88:	27 d0       	rcall	.+78     	; 0xdd8 <__divsf3_pse+0x8e>
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	bb 1f       	adc	r27, r27
     d92:	26 17       	cp	r18, r22
     d94:	37 07       	cpc	r19, r23
     d96:	48 07       	cpc	r20, r24
     d98:	ab 07       	cpc	r26, r27
     d9a:	b0 e8       	ldi	r27, 0x80	; 128
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__divsf3_pse+0x56>
     d9e:	bb 0b       	sbc	r27, r27
     da0:	80 2d       	mov	r24, r0
     da2:	bf 01       	movw	r22, r30
     da4:	ff 27       	eor	r31, r31
     da6:	93 58       	subi	r25, 0x83	; 131
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	2a f0       	brmi	.+10     	; 0xdb6 <__divsf3_pse+0x6c>
     dac:	9e 3f       	cpi	r25, 0xFE	; 254
     dae:	51 05       	cpc	r21, r1
     db0:	68 f0       	brcs	.+26     	; 0xdcc <__divsf3_pse+0x82>
     db2:	61 c0       	rjmp	.+194    	; 0xe76 <__fp_inf>
     db4:	ab c0       	rjmp	.+342    	; 0xf0c <__fp_szero>
     db6:	5f 3f       	cpi	r21, 0xFF	; 255
     db8:	ec f3       	brlt	.-6      	; 0xdb4 <__divsf3_pse+0x6a>
     dba:	98 3e       	cpi	r25, 0xE8	; 232
     dbc:	dc f3       	brlt	.-10     	; 0xdb4 <__divsf3_pse+0x6a>
     dbe:	86 95       	lsr	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b7 95       	ror	r27
     dc6:	f7 95       	ror	r31
     dc8:	9f 5f       	subi	r25, 0xFF	; 255
     dca:	c9 f7       	brne	.-14     	; 0xdbe <__divsf3_pse+0x74>
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret
     dd8:	e1 e0       	ldi	r30, 0x01	; 1
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	88 1f       	adc	r24, r24
     de0:	bb 1f       	adc	r27, r27
     de2:	62 17       	cp	r22, r18
     de4:	73 07       	cpc	r23, r19
     de6:	84 07       	cpc	r24, r20
     de8:	ba 07       	cpc	r27, r26
     dea:	20 f0       	brcs	.+8      	; 0xdf4 <__divsf3_pse+0xaa>
     dec:	62 1b       	sub	r22, r18
     dee:	73 0b       	sbc	r23, r19
     df0:	84 0b       	sbc	r24, r20
     df2:	ba 0b       	sbc	r27, r26
     df4:	ee 1f       	adc	r30, r30
     df6:	88 f7       	brcc	.-30     	; 0xdda <__divsf3_pse+0x90>
     df8:	e0 95       	com	r30
     dfa:	08 95       	ret

00000dfc <__floatunsisf>:
     dfc:	e8 94       	clt
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <__floatsisf+0x12>

00000e00 <__floatsisf>:
     e00:	97 fb       	bst	r25, 7
     e02:	3e f4       	brtc	.+14     	; 0xe12 <__floatsisf+0x12>
     e04:	90 95       	com	r25
     e06:	80 95       	com	r24
     e08:	70 95       	com	r23
     e0a:	61 95       	neg	r22
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	99 23       	and	r25, r25
     e14:	a9 f0       	breq	.+42     	; 0xe40 <__floatsisf+0x40>
     e16:	f9 2f       	mov	r31, r25
     e18:	96 e9       	ldi	r25, 0x96	; 150
     e1a:	bb 27       	eor	r27, r27
     e1c:	93 95       	inc	r25
     e1e:	f6 95       	lsr	r31
     e20:	87 95       	ror	r24
     e22:	77 95       	ror	r23
     e24:	67 95       	ror	r22
     e26:	b7 95       	ror	r27
     e28:	f1 11       	cpse	r31, r1
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <__floatsisf+0x1c>
     e2c:	fa f4       	brpl	.+62     	; 0xe6c <__floatsisf+0x6c>
     e2e:	bb 0f       	add	r27, r27
     e30:	11 f4       	brne	.+4      	; 0xe36 <__floatsisf+0x36>
     e32:	60 ff       	sbrs	r22, 0
     e34:	1b c0       	rjmp	.+54     	; 0xe6c <__floatsisf+0x6c>
     e36:	6f 5f       	subi	r22, 0xFF	; 255
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	16 c0       	rjmp	.+44     	; 0xe6c <__floatsisf+0x6c>
     e40:	88 23       	and	r24, r24
     e42:	11 f0       	breq	.+4      	; 0xe48 <__floatsisf+0x48>
     e44:	96 e9       	ldi	r25, 0x96	; 150
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <__floatsisf+0x6a>
     e48:	77 23       	and	r23, r23
     e4a:	21 f0       	breq	.+8      	; 0xe54 <__floatsisf+0x54>
     e4c:	9e e8       	ldi	r25, 0x8E	; 142
     e4e:	87 2f       	mov	r24, r23
     e50:	76 2f       	mov	r23, r22
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <__floatsisf+0x5e>
     e54:	66 23       	and	r22, r22
     e56:	71 f0       	breq	.+28     	; 0xe74 <__floatsisf+0x74>
     e58:	96 e8       	ldi	r25, 0x86	; 134
     e5a:	86 2f       	mov	r24, r22
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	2a f0       	brmi	.+10     	; 0xe6c <__floatsisf+0x6c>
     e62:	9a 95       	dec	r25
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	da f7       	brpl	.-10     	; 0xe62 <__floatsisf+0x62>
     e6c:	88 0f       	add	r24, r24
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <__fp_inf>:
     e76:	97 f9       	bld	r25, 7
     e78:	9f 67       	ori	r25, 0x7F	; 127
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	08 95       	ret

00000e82 <__fp_nan>:
     e82:	9f ef       	ldi	r25, 0xFF	; 255
     e84:	80 ec       	ldi	r24, 0xC0	; 192
     e86:	08 95       	ret

00000e88 <__fp_pscA>:
     e88:	00 24       	eor	r0, r0
     e8a:	0a 94       	dec	r0
     e8c:	16 16       	cp	r1, r22
     e8e:	17 06       	cpc	r1, r23
     e90:	18 06       	cpc	r1, r24
     e92:	09 06       	cpc	r0, r25
     e94:	08 95       	ret

00000e96 <__fp_pscB>:
     e96:	00 24       	eor	r0, r0
     e98:	0a 94       	dec	r0
     e9a:	12 16       	cp	r1, r18
     e9c:	13 06       	cpc	r1, r19
     e9e:	14 06       	cpc	r1, r20
     ea0:	05 06       	cpc	r0, r21
     ea2:	08 95       	ret

00000ea4 <__fp_round>:
     ea4:	09 2e       	mov	r0, r25
     ea6:	03 94       	inc	r0
     ea8:	00 0c       	add	r0, r0
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <__fp_round+0xc>
     eac:	88 23       	and	r24, r24
     eae:	52 f0       	brmi	.+20     	; 0xec4 <__fp_round+0x20>
     eb0:	bb 0f       	add	r27, r27
     eb2:	40 f4       	brcc	.+16     	; 0xec4 <__fp_round+0x20>
     eb4:	bf 2b       	or	r27, r31
     eb6:	11 f4       	brne	.+4      	; 0xebc <__fp_round+0x18>
     eb8:	60 ff       	sbrs	r22, 0
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__fp_round+0x20>
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	08 95       	ret

00000ec6 <__fp_split3>:
     ec6:	57 fd       	sbrc	r21, 7
     ec8:	90 58       	subi	r25, 0x80	; 128
     eca:	44 0f       	add	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	59 f0       	breq	.+22     	; 0xee6 <__fp_splitA+0x10>
     ed0:	5f 3f       	cpi	r21, 0xFF	; 255
     ed2:	71 f0       	breq	.+28     	; 0xef0 <__fp_splitA+0x1a>
     ed4:	47 95       	ror	r20

00000ed6 <__fp_splitA>:
     ed6:	88 0f       	add	r24, r24
     ed8:	97 fb       	bst	r25, 7
     eda:	99 1f       	adc	r25, r25
     edc:	61 f0       	breq	.+24     	; 0xef6 <__fp_splitA+0x20>
     ede:	9f 3f       	cpi	r25, 0xFF	; 255
     ee0:	79 f0       	breq	.+30     	; 0xf00 <__fp_splitA+0x2a>
     ee2:	87 95       	ror	r24
     ee4:	08 95       	ret
     ee6:	12 16       	cp	r1, r18
     ee8:	13 06       	cpc	r1, r19
     eea:	14 06       	cpc	r1, r20
     eec:	55 1f       	adc	r21, r21
     eee:	f2 cf       	rjmp	.-28     	; 0xed4 <__fp_split3+0xe>
     ef0:	46 95       	lsr	r20
     ef2:	f1 df       	rcall	.-30     	; 0xed6 <__fp_splitA>
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <__fp_splitA+0x30>
     ef6:	16 16       	cp	r1, r22
     ef8:	17 06       	cpc	r1, r23
     efa:	18 06       	cpc	r1, r24
     efc:	99 1f       	adc	r25, r25
     efe:	f1 cf       	rjmp	.-30     	; 0xee2 <__fp_splitA+0xc>
     f00:	86 95       	lsr	r24
     f02:	71 05       	cpc	r23, r1
     f04:	61 05       	cpc	r22, r1
     f06:	08 94       	sec
     f08:	08 95       	ret

00000f0a <__fp_zero>:
     f0a:	e8 94       	clt

00000f0c <__fp_szero>:
     f0c:	bb 27       	eor	r27, r27
     f0e:	66 27       	eor	r22, r22
     f10:	77 27       	eor	r23, r23
     f12:	cb 01       	movw	r24, r22
     f14:	97 f9       	bld	r25, 7
     f16:	08 95       	ret

00000f18 <__mulsf3>:
     f18:	0b d0       	rcall	.+22     	; 0xf30 <__mulsf3x>
     f1a:	c4 cf       	rjmp	.-120    	; 0xea4 <__fp_round>
     f1c:	b5 df       	rcall	.-150    	; 0xe88 <__fp_pscA>
     f1e:	28 f0       	brcs	.+10     	; 0xf2a <__mulsf3+0x12>
     f20:	ba df       	rcall	.-140    	; 0xe96 <__fp_pscB>
     f22:	18 f0       	brcs	.+6      	; 0xf2a <__mulsf3+0x12>
     f24:	95 23       	and	r25, r21
     f26:	09 f0       	breq	.+2      	; 0xf2a <__mulsf3+0x12>
     f28:	a6 cf       	rjmp	.-180    	; 0xe76 <__fp_inf>
     f2a:	ab cf       	rjmp	.-170    	; 0xe82 <__fp_nan>
     f2c:	11 24       	eor	r1, r1
     f2e:	ee cf       	rjmp	.-36     	; 0xf0c <__fp_szero>

00000f30 <__mulsf3x>:
     f30:	ca df       	rcall	.-108    	; 0xec6 <__fp_split3>
     f32:	a0 f3       	brcs	.-24     	; 0xf1c <__mulsf3+0x4>

00000f34 <__mulsf3_pse>:
     f34:	95 9f       	mul	r25, r21
     f36:	d1 f3       	breq	.-12     	; 0xf2c <__mulsf3+0x14>
     f38:	95 0f       	add	r25, r21
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	55 1f       	adc	r21, r21
     f3e:	62 9f       	mul	r22, r18
     f40:	f0 01       	movw	r30, r0
     f42:	72 9f       	mul	r23, r18
     f44:	bb 27       	eor	r27, r27
     f46:	f0 0d       	add	r31, r0
     f48:	b1 1d       	adc	r27, r1
     f4a:	63 9f       	mul	r22, r19
     f4c:	aa 27       	eor	r26, r26
     f4e:	f0 0d       	add	r31, r0
     f50:	b1 1d       	adc	r27, r1
     f52:	aa 1f       	adc	r26, r26
     f54:	64 9f       	mul	r22, r20
     f56:	66 27       	eor	r22, r22
     f58:	b0 0d       	add	r27, r0
     f5a:	a1 1d       	adc	r26, r1
     f5c:	66 1f       	adc	r22, r22
     f5e:	82 9f       	mul	r24, r18
     f60:	22 27       	eor	r18, r18
     f62:	b0 0d       	add	r27, r0
     f64:	a1 1d       	adc	r26, r1
     f66:	62 1f       	adc	r22, r18
     f68:	73 9f       	mul	r23, r19
     f6a:	b0 0d       	add	r27, r0
     f6c:	a1 1d       	adc	r26, r1
     f6e:	62 1f       	adc	r22, r18
     f70:	83 9f       	mul	r24, r19
     f72:	a0 0d       	add	r26, r0
     f74:	61 1d       	adc	r22, r1
     f76:	22 1f       	adc	r18, r18
     f78:	74 9f       	mul	r23, r20
     f7a:	33 27       	eor	r19, r19
     f7c:	a0 0d       	add	r26, r0
     f7e:	61 1d       	adc	r22, r1
     f80:	23 1f       	adc	r18, r19
     f82:	84 9f       	mul	r24, r20
     f84:	60 0d       	add	r22, r0
     f86:	21 1d       	adc	r18, r1
     f88:	82 2f       	mov	r24, r18
     f8a:	76 2f       	mov	r23, r22
     f8c:	6a 2f       	mov	r22, r26
     f8e:	11 24       	eor	r1, r1
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	50 40       	sbci	r21, 0x00	; 0
     f94:	8a f0       	brmi	.+34     	; 0xfb8 <__mulsf3_pse+0x84>
     f96:	e1 f0       	breq	.+56     	; 0xfd0 <__mulsf3_pse+0x9c>
     f98:	88 23       	and	r24, r24
     f9a:	4a f0       	brmi	.+18     	; 0xfae <__mulsf3_pse+0x7a>
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	bb 1f       	adc	r27, r27
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	a9 f7       	brne	.-22     	; 0xf98 <__mulsf3_pse+0x64>
     fae:	9e 3f       	cpi	r25, 0xFE	; 254
     fb0:	51 05       	cpc	r21, r1
     fb2:	70 f0       	brcs	.+28     	; 0xfd0 <__mulsf3_pse+0x9c>
     fb4:	60 cf       	rjmp	.-320    	; 0xe76 <__fp_inf>
     fb6:	aa cf       	rjmp	.-172    	; 0xf0c <__fp_szero>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	ec f3       	brlt	.-6      	; 0xfb6 <__mulsf3_pse+0x82>
     fbc:	98 3e       	cpi	r25, 0xE8	; 232
     fbe:	dc f3       	brlt	.-10     	; 0xfb6 <__mulsf3_pse+0x82>
     fc0:	86 95       	lsr	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f7 95       	ror	r31
     fca:	e7 95       	ror	r30
     fcc:	9f 5f       	subi	r25, 0xFF	; 255
     fce:	c1 f7       	brne	.-16     	; 0xfc0 <__mulsf3_pse+0x8c>
     fd0:	fe 2b       	or	r31, r30
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <vfprintf>:
     fde:	a3 e1       	ldi	r26, 0x13	; 19
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 ef       	ldi	r30, 0xF5	; 245
     fe4:	f7 e0       	ldi	r31, 0x07	; 7
     fe6:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__prologue_saves__>
     fea:	7c 01       	movw	r14, r24
     fec:	1b 01       	movw	r2, r22
     fee:	6a 01       	movw	r12, r20
     ff0:	fc 01       	movw	r30, r24
     ff2:	17 82       	std	Z+7, r1	; 0x07
     ff4:	16 82       	std	Z+6, r1	; 0x06
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
     ff8:	81 ff       	sbrs	r24, 1
     ffa:	66 c3       	rjmp	.+1740   	; 0x16c8 <vfprintf+0x6ea>
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	4b 01       	movw	r8, r22
    1004:	f7 01       	movw	r30, r14
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	f1 01       	movw	r30, r2
    100a:	93 fd       	sbrc	r25, 3
    100c:	85 91       	lpm	r24, Z+
    100e:	93 ff       	sbrs	r25, 3
    1010:	81 91       	ld	r24, Z+
    1012:	1f 01       	movw	r2, r30
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <vfprintf+0x3c>
    1018:	53 c3       	rjmp	.+1702   	; 0x16c0 <vfprintf+0x6e2>
    101a:	85 32       	cpi	r24, 0x25	; 37
    101c:	39 f4       	brne	.+14     	; 0x102c <vfprintf+0x4e>
    101e:	93 fd       	sbrc	r25, 3
    1020:	85 91       	lpm	r24, Z+
    1022:	93 ff       	sbrs	r25, 3
    1024:	81 91       	ld	r24, Z+
    1026:	1f 01       	movw	r2, r30
    1028:	85 32       	cpi	r24, 0x25	; 37
    102a:	39 f4       	brne	.+14     	; 0x103a <vfprintf+0x5c>
    102c:	b7 01       	movw	r22, r14
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1034:	56 01       	movw	r10, r12
    1036:	65 01       	movw	r12, r10
    1038:	e5 cf       	rjmp	.-54     	; 0x1004 <vfprintf+0x26>
    103a:	10 e0       	ldi	r17, 0x00	; 0
    103c:	51 2c       	mov	r5, r1
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	20 32       	cpi	r18, 0x20	; 32
    1042:	a0 f4       	brcc	.+40     	; 0x106c <vfprintf+0x8e>
    1044:	8b 32       	cpi	r24, 0x2B	; 43
    1046:	69 f0       	breq	.+26     	; 0x1062 <vfprintf+0x84>
    1048:	30 f4       	brcc	.+12     	; 0x1056 <vfprintf+0x78>
    104a:	80 32       	cpi	r24, 0x20	; 32
    104c:	59 f0       	breq	.+22     	; 0x1064 <vfprintf+0x86>
    104e:	83 32       	cpi	r24, 0x23	; 35
    1050:	69 f4       	brne	.+26     	; 0x106c <vfprintf+0x8e>
    1052:	20 61       	ori	r18, 0x10	; 16
    1054:	2c c0       	rjmp	.+88     	; 0x10ae <vfprintf+0xd0>
    1056:	8d 32       	cpi	r24, 0x2D	; 45
    1058:	39 f0       	breq	.+14     	; 0x1068 <vfprintf+0x8a>
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	39 f4       	brne	.+14     	; 0x106c <vfprintf+0x8e>
    105e:	21 60       	ori	r18, 0x01	; 1
    1060:	26 c0       	rjmp	.+76     	; 0x10ae <vfprintf+0xd0>
    1062:	22 60       	ori	r18, 0x02	; 2
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	23 c0       	rjmp	.+70     	; 0x10ae <vfprintf+0xd0>
    1068:	28 60       	ori	r18, 0x08	; 8
    106a:	21 c0       	rjmp	.+66     	; 0x10ae <vfprintf+0xd0>
    106c:	27 fd       	sbrc	r18, 7
    106e:	27 c0       	rjmp	.+78     	; 0x10be <vfprintf+0xe0>
    1070:	30 ed       	ldi	r19, 0xD0	; 208
    1072:	38 0f       	add	r19, r24
    1074:	3a 30       	cpi	r19, 0x0A	; 10
    1076:	78 f4       	brcc	.+30     	; 0x1096 <vfprintf+0xb8>
    1078:	26 ff       	sbrs	r18, 6
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0xaa>
    107c:	fa e0       	ldi	r31, 0x0A	; 10
    107e:	1f 9f       	mul	r17, r31
    1080:	30 0d       	add	r19, r0
    1082:	11 24       	eor	r1, r1
    1084:	13 2f       	mov	r17, r19
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <vfprintf+0xd0>
    1088:	6a e0       	ldi	r22, 0x0A	; 10
    108a:	56 9e       	mul	r5, r22
    108c:	30 0d       	add	r19, r0
    108e:	11 24       	eor	r1, r1
    1090:	53 2e       	mov	r5, r19
    1092:	20 62       	ori	r18, 0x20	; 32
    1094:	0c c0       	rjmp	.+24     	; 0x10ae <vfprintf+0xd0>
    1096:	8e 32       	cpi	r24, 0x2E	; 46
    1098:	21 f4       	brne	.+8      	; 0x10a2 <vfprintf+0xc4>
    109a:	26 fd       	sbrc	r18, 6
    109c:	11 c3       	rjmp	.+1570   	; 0x16c0 <vfprintf+0x6e2>
    109e:	20 64       	ori	r18, 0x40	; 64
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <vfprintf+0xd0>
    10a2:	8c 36       	cpi	r24, 0x6C	; 108
    10a4:	11 f4       	brne	.+4      	; 0x10aa <vfprintf+0xcc>
    10a6:	20 68       	ori	r18, 0x80	; 128
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <vfprintf+0xd0>
    10aa:	88 36       	cpi	r24, 0x68	; 104
    10ac:	41 f4       	brne	.+16     	; 0x10be <vfprintf+0xe0>
    10ae:	f1 01       	movw	r30, r2
    10b0:	93 fd       	sbrc	r25, 3
    10b2:	85 91       	lpm	r24, Z+
    10b4:	93 ff       	sbrs	r25, 3
    10b6:	81 91       	ld	r24, Z+
    10b8:	1f 01       	movw	r2, r30
    10ba:	81 11       	cpse	r24, r1
    10bc:	c1 cf       	rjmp	.-126    	; 0x1040 <vfprintf+0x62>
    10be:	9b eb       	ldi	r25, 0xBB	; 187
    10c0:	98 0f       	add	r25, r24
    10c2:	93 30       	cpi	r25, 0x03	; 3
    10c4:	18 f4       	brcc	.+6      	; 0x10cc <vfprintf+0xee>
    10c6:	20 61       	ori	r18, 0x10	; 16
    10c8:	80 5e       	subi	r24, 0xE0	; 224
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <vfprintf+0xfa>
    10cc:	9b e9       	ldi	r25, 0x9B	; 155
    10ce:	98 0f       	add	r25, r24
    10d0:	93 30       	cpi	r25, 0x03	; 3
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <vfprintf+0xf8>
    10d4:	aa c1       	rjmp	.+852    	; 0x142a <vfprintf+0x44c>
    10d6:	2f 7e       	andi	r18, 0xEF	; 239
    10d8:	26 ff       	sbrs	r18, 6
    10da:	16 e0       	ldi	r17, 0x06	; 6
    10dc:	2f 73       	andi	r18, 0x3F	; 63
    10de:	72 2e       	mov	r7, r18
    10e0:	85 36       	cpi	r24, 0x65	; 101
    10e2:	21 f4       	brne	.+8      	; 0x10ec <vfprintf+0x10e>
    10e4:	f2 2f       	mov	r31, r18
    10e6:	f0 64       	ori	r31, 0x40	; 64
    10e8:	7f 2e       	mov	r7, r31
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <vfprintf+0x11e>
    10ec:	86 36       	cpi	r24, 0x66	; 102
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <vfprintf+0x11a>
    10f0:	62 2f       	mov	r22, r18
    10f2:	60 68       	ori	r22, 0x80	; 128
    10f4:	76 2e       	mov	r7, r22
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x11e>
    10f8:	11 11       	cpse	r17, r1
    10fa:	11 50       	subi	r17, 0x01	; 1
    10fc:	77 fe       	sbrs	r7, 7
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <vfprintf+0x130>
    1100:	1c 33       	cpi	r17, 0x3C	; 60
    1102:	48 f4       	brcc	.+18     	; 0x1116 <vfprintf+0x138>
    1104:	44 24       	eor	r4, r4
    1106:	43 94       	inc	r4
    1108:	41 0e       	add	r4, r17
    110a:	27 e0       	ldi	r18, 0x07	; 7
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <vfprintf+0x146>
    110e:	18 30       	cpi	r17, 0x08	; 8
    1110:	30 f4       	brcc	.+12     	; 0x111e <vfprintf+0x140>
    1112:	21 2f       	mov	r18, r17
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <vfprintf+0x144>
    1116:	27 e0       	ldi	r18, 0x07	; 7
    1118:	4c e3       	ldi	r20, 0x3C	; 60
    111a:	44 2e       	mov	r4, r20
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <vfprintf+0x146>
    111e:	27 e0       	ldi	r18, 0x07	; 7
    1120:	17 e0       	ldi	r17, 0x07	; 7
    1122:	41 2c       	mov	r4, r1
    1124:	56 01       	movw	r10, r12
    1126:	74 e0       	ldi	r23, 0x04	; 4
    1128:	a7 0e       	add	r10, r23
    112a:	b1 1c       	adc	r11, r1
    112c:	f6 01       	movw	r30, r12
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	04 2d       	mov	r16, r4
    1138:	a4 01       	movw	r20, r8
    113a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ftoa_engine>
    113e:	6c 01       	movw	r12, r24
    1140:	09 81       	ldd	r16, Y+1	; 0x01
    1142:	00 ff       	sbrs	r16, 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <vfprintf+0x16c>
    1146:	03 ff       	sbrs	r16, 3
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <vfprintf+0x178>
    114a:	71 fc       	sbrc	r7, 1
    114c:	07 c0       	rjmp	.+14     	; 0x115c <vfprintf+0x17e>
    114e:	72 fc       	sbrc	r7, 2
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <vfprintf+0x184>
    1152:	61 2c       	mov	r6, r1
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <vfprintf+0x188>
    1156:	3d e2       	ldi	r19, 0x2D	; 45
    1158:	63 2e       	mov	r6, r19
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <vfprintf+0x188>
    115c:	2b e2       	ldi	r18, 0x2B	; 43
    115e:	62 2e       	mov	r6, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x188>
    1162:	90 e2       	ldi	r25, 0x20	; 32
    1164:	69 2e       	mov	r6, r25
    1166:	80 2f       	mov	r24, r16
    1168:	8c 70       	andi	r24, 0x0C	; 12
    116a:	99 f1       	breq	.+102    	; 0x11d2 <vfprintf+0x1f4>
    116c:	66 20       	and	r6, r6
    116e:	11 f0       	breq	.+4      	; 0x1174 <vfprintf+0x196>
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <vfprintf+0x198>
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	85 15       	cp	r24, r5
    1178:	10 f0       	brcs	.+4      	; 0x117e <vfprintf+0x1a0>
    117a:	51 2c       	mov	r5, r1
    117c:	0b c0       	rjmp	.+22     	; 0x1194 <vfprintf+0x1b6>
    117e:	58 1a       	sub	r5, r24
    1180:	73 fc       	sbrc	r7, 3
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <vfprintf+0x1b6>
    1184:	b7 01       	movw	r22, r14
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    118e:	5a 94       	dec	r5
    1190:	c9 f7       	brne	.-14     	; 0x1184 <vfprintf+0x1a6>
    1192:	f3 cf       	rjmp	.-26     	; 0x117a <vfprintf+0x19c>
    1194:	66 20       	and	r6, r6
    1196:	29 f0       	breq	.+10     	; 0x11a2 <vfprintf+0x1c4>
    1198:	b7 01       	movw	r22, r14
    119a:	86 2d       	mov	r24, r6
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    11a2:	03 fd       	sbrc	r16, 3
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <vfprintf+0x1ce>
    11a6:	0c e6       	ldi	r16, 0x6C	; 108
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x1d2>
    11ac:	08 e6       	ldi	r16, 0x68	; 104
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	f7 2d       	mov	r31, r7
    11b2:	f0 71       	andi	r31, 0x10	; 16
    11b4:	7f 2e       	mov	r7, r31
    11b6:	f8 01       	movw	r30, r16
    11b8:	84 91       	lpm	r24, Z
    11ba:	88 23       	and	r24, r24
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <vfprintf+0x1e2>
    11be:	76 c2       	rjmp	.+1260   	; 0x16ac <vfprintf+0x6ce>
    11c0:	71 10       	cpse	r7, r1
    11c2:	80 52       	subi	r24, 0x20	; 32
    11c4:	b7 01       	movw	r22, r14
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    11cc:	0f 5f       	subi	r16, 0xFF	; 255
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	f2 cf       	rjmp	.-28     	; 0x11b6 <vfprintf+0x1d8>
    11d2:	77 fe       	sbrs	r7, 7
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <vfprintf+0x216>
    11d6:	4c 0c       	add	r4, r12
    11d8:	04 ff       	sbrs	r16, 4
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <vfprintf+0x206>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	81 33       	cpi	r24, 0x31	; 49
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <vfprintf+0x206>
    11e2:	4a 94       	dec	r4
    11e4:	14 14       	cp	r1, r4
    11e6:	74 f5       	brge	.+92     	; 0x1244 <vfprintf+0x266>
    11e8:	f8 e0       	ldi	r31, 0x08	; 8
    11ea:	f4 15       	cp	r31, r4
    11ec:	78 f5       	brcc	.+94     	; 0x124c <vfprintf+0x26e>
    11ee:	88 e0       	ldi	r24, 0x08	; 8
    11f0:	48 2e       	mov	r4, r24
    11f2:	2c c0       	rjmp	.+88     	; 0x124c <vfprintf+0x26e>
    11f4:	76 fc       	sbrc	r7, 6
    11f6:	2a c0       	rjmp	.+84     	; 0x124c <vfprintf+0x26e>
    11f8:	81 2f       	mov	r24, r17
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	8c 15       	cp	r24, r12
    11fe:	9d 05       	cpc	r25, r13
    1200:	9c f0       	brlt	.+38     	; 0x1228 <vfprintf+0x24a>
    1202:	6c ef       	ldi	r22, 0xFC	; 252
    1204:	c6 16       	cp	r12, r22
    1206:	6f ef       	ldi	r22, 0xFF	; 255
    1208:	d6 06       	cpc	r13, r22
    120a:	74 f0       	brlt	.+28     	; 0x1228 <vfprintf+0x24a>
    120c:	77 2d       	mov	r23, r7
    120e:	70 68       	ori	r23, 0x80	; 128
    1210:	77 2e       	mov	r7, r23
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <vfprintf+0x24a>
    1214:	e2 e0       	ldi	r30, 0x02	; 2
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	ec 0f       	add	r30, r28
    121a:	fd 1f       	adc	r31, r29
    121c:	e1 0f       	add	r30, r17
    121e:	f1 1d       	adc	r31, r1
    1220:	80 81       	ld	r24, Z
    1222:	80 33       	cpi	r24, 0x30	; 48
    1224:	19 f4       	brne	.+6      	; 0x122c <vfprintf+0x24e>
    1226:	11 50       	subi	r17, 0x01	; 1
    1228:	11 11       	cpse	r17, r1
    122a:	f4 cf       	rjmp	.-24     	; 0x1214 <vfprintf+0x236>
    122c:	77 fe       	sbrs	r7, 7
    122e:	0e c0       	rjmp	.+28     	; 0x124c <vfprintf+0x26e>
    1230:	44 24       	eor	r4, r4
    1232:	43 94       	inc	r4
    1234:	41 0e       	add	r4, r17
    1236:	81 2f       	mov	r24, r17
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	c8 16       	cp	r12, r24
    123c:	d9 06       	cpc	r13, r25
    123e:	2c f4       	brge	.+10     	; 0x124a <vfprintf+0x26c>
    1240:	1c 19       	sub	r17, r12
    1242:	04 c0       	rjmp	.+8      	; 0x124c <vfprintf+0x26e>
    1244:	44 24       	eor	r4, r4
    1246:	43 94       	inc	r4
    1248:	01 c0       	rjmp	.+2      	; 0x124c <vfprintf+0x26e>
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	77 fe       	sbrs	r7, 7
    124e:	07 c0       	rjmp	.+14     	; 0x125e <vfprintf+0x280>
    1250:	1c 14       	cp	r1, r12
    1252:	1d 04       	cpc	r1, r13
    1254:	3c f4       	brge	.+14     	; 0x1264 <vfprintf+0x286>
    1256:	96 01       	movw	r18, r12
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <vfprintf+0x28a>
    125e:	25 e0       	ldi	r18, 0x05	; 5
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x28a>
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	66 20       	and	r6, r6
    126a:	11 f0       	breq	.+4      	; 0x1270 <vfprintf+0x292>
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	11 23       	and	r17, r17
    1272:	31 f0       	breq	.+12     	; 0x1280 <vfprintf+0x2a2>
    1274:	41 2f       	mov	r20, r17
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	24 0f       	add	r18, r20
    127e:	35 1f       	adc	r19, r21
    1280:	45 2d       	mov	r20, r5
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	24 17       	cp	r18, r20
    1286:	35 07       	cpc	r19, r21
    1288:	14 f4       	brge	.+4      	; 0x128e <vfprintf+0x2b0>
    128a:	52 1a       	sub	r5, r18
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <vfprintf+0x2b2>
    128e:	51 2c       	mov	r5, r1
    1290:	87 2d       	mov	r24, r7
    1292:	89 70       	andi	r24, 0x09	; 9
    1294:	49 f4       	brne	.+18     	; 0x12a8 <vfprintf+0x2ca>
    1296:	55 20       	and	r5, r5
    1298:	39 f0       	breq	.+14     	; 0x12a8 <vfprintf+0x2ca>
    129a:	b7 01       	movw	r22, r14
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    12a4:	5a 94       	dec	r5
    12a6:	f7 cf       	rjmp	.-18     	; 0x1296 <vfprintf+0x2b8>
    12a8:	66 20       	and	r6, r6
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <vfprintf+0x2d8>
    12ac:	b7 01       	movw	r22, r14
    12ae:	86 2d       	mov	r24, r6
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    12b6:	73 fc       	sbrc	r7, 3
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfprintf+0x2ee>
    12ba:	55 20       	and	r5, r5
    12bc:	39 f0       	breq	.+14     	; 0x12cc <vfprintf+0x2ee>
    12be:	b7 01       	movw	r22, r14
    12c0:	80 e3       	ldi	r24, 0x30	; 48
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    12c8:	5a 94       	dec	r5
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <vfprintf+0x2dc>
    12cc:	77 fe       	sbrs	r7, 7
    12ce:	5f c0       	rjmp	.+190    	; 0x138e <vfprintf+0x3b0>
    12d0:	9c 2d       	mov	r25, r12
    12d2:	8d 2d       	mov	r24, r13
    12d4:	d7 fe       	sbrs	r13, 7
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x2fe>
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	69 2e       	mov	r6, r25
    12de:	78 2e       	mov	r7, r24
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	c6 01       	movw	r24, r12
    12e6:	84 19       	sub	r24, r4
    12e8:	91 09       	sbc	r25, r1
    12ea:	9d 87       	std	Y+13, r25	; 0x0d
    12ec:	8c 87       	std	Y+12, r24	; 0x0c
    12ee:	96 01       	movw	r18, r12
    12f0:	26 19       	sub	r18, r6
    12f2:	37 09       	sbc	r19, r7
    12f4:	28 0d       	add	r18, r8
    12f6:	39 1d       	adc	r19, r9
    12f8:	81 2f       	mov	r24, r17
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	ee 27       	eor	r30, r30
    12fe:	ff 27       	eor	r31, r31
    1300:	e8 1b       	sub	r30, r24
    1302:	f9 0b       	sbc	r31, r25
    1304:	ff 87       	std	Y+15, r31	; 0x0f
    1306:	ee 87       	std	Y+14, r30	; 0x0e
    1308:	ff ef       	ldi	r31, 0xFF	; 255
    130a:	6f 16       	cp	r6, r31
    130c:	7f 06       	cpc	r7, r31
    130e:	69 f4       	brne	.+26     	; 0x132a <vfprintf+0x34c>
    1310:	b7 01       	movw	r22, r14
    1312:	8e e2       	ldi	r24, 0x2E	; 46
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2b 8b       	std	Y+19, r18	; 0x13
    1318:	3a 8b       	std	Y+18, r19	; 0x12
    131a:	48 8b       	std	Y+16, r20	; 0x10
    131c:	59 8b       	std	Y+17, r21	; 0x11
    131e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1322:	59 89       	ldd	r21, Y+17	; 0x11
    1324:	48 89       	ldd	r20, Y+16	; 0x10
    1326:	3a 89       	ldd	r19, Y+18	; 0x12
    1328:	2b 89       	ldd	r18, Y+19	; 0x13
    132a:	c6 14       	cp	r12, r6
    132c:	d7 04       	cpc	r13, r7
    132e:	54 f0       	brlt	.+20     	; 0x1344 <vfprintf+0x366>
    1330:	6c 85       	ldd	r22, Y+12	; 0x0c
    1332:	7d 85       	ldd	r23, Y+13	; 0x0d
    1334:	66 15       	cp	r22, r6
    1336:	77 05       	cpc	r23, r7
    1338:	2c f4       	brge	.+10     	; 0x1344 <vfprintf+0x366>
    133a:	f9 01       	movw	r30, r18
    133c:	e4 0f       	add	r30, r20
    133e:	f5 1f       	adc	r31, r21
    1340:	81 81       	ldd	r24, Z+1	; 0x01
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <vfprintf+0x368>
    1344:	80 e3       	ldi	r24, 0x30	; 48
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	67 1a       	sub	r6, r23
    134a:	71 08       	sbc	r7, r1
    134c:	4f 5f       	subi	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	ee 85       	ldd	r30, Y+14	; 0x0e
    1352:	ff 85       	ldd	r31, Y+15	; 0x0f
    1354:	6e 16       	cp	r6, r30
    1356:	7f 06       	cpc	r7, r31
    1358:	6c f0       	brlt	.+26     	; 0x1374 <vfprintf+0x396>
    135a:	b7 01       	movw	r22, r14
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	2b 8b       	std	Y+19, r18	; 0x13
    1360:	3a 8b       	std	Y+18, r19	; 0x12
    1362:	48 8b       	std	Y+16, r20	; 0x10
    1364:	59 8b       	std	Y+17, r21	; 0x11
    1366:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    136a:	2b 89       	ldd	r18, Y+19	; 0x13
    136c:	3a 89       	ldd	r19, Y+18	; 0x12
    136e:	48 89       	ldd	r20, Y+16	; 0x10
    1370:	59 89       	ldd	r21, Y+17	; 0x11
    1372:	ca cf       	rjmp	.-108    	; 0x1308 <vfprintf+0x32a>
    1374:	6c 14       	cp	r6, r12
    1376:	7d 04       	cpc	r7, r13
    1378:	39 f4       	brne	.+14     	; 0x1388 <vfprintf+0x3aa>
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	96 33       	cpi	r25, 0x36	; 54
    137e:	18 f4       	brcc	.+6      	; 0x1386 <vfprintf+0x3a8>
    1380:	95 33       	cpi	r25, 0x35	; 53
    1382:	11 f4       	brne	.+4      	; 0x1388 <vfprintf+0x3aa>
    1384:	04 ff       	sbrs	r16, 4
    1386:	81 e3       	ldi	r24, 0x31	; 49
    1388:	b7 01       	movw	r22, r14
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	4b c0       	rjmp	.+150    	; 0x1424 <vfprintf+0x446>
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	81 33       	cpi	r24, 0x31	; 49
    1392:	09 f0       	breq	.+2      	; 0x1396 <vfprintf+0x3b8>
    1394:	0f 7e       	andi	r16, 0xEF	; 239
    1396:	b7 01       	movw	r22, r14
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    139e:	11 11       	cpse	r17, r1
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <vfprintf+0x3ce>
    13a2:	74 fe       	sbrs	r7, 4
    13a4:	18 c0       	rjmp	.+48     	; 0x13d6 <vfprintf+0x3f8>
    13a6:	85 e4       	ldi	r24, 0x45	; 69
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	17 c0       	rjmp	.+46     	; 0x13da <vfprintf+0x3fc>
    13ac:	b7 01       	movw	r22, r14
    13ae:	8e e2       	ldi	r24, 0x2E	; 46
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	66 24       	eor	r6, r6
    13ba:	63 94       	inc	r6
    13bc:	68 0e       	add	r6, r24
    13be:	f4 01       	movw	r30, r8
    13c0:	e8 0f       	add	r30, r24
    13c2:	f1 1d       	adc	r31, r1
    13c4:	80 81       	ld	r24, Z
    13c6:	b7 01       	movw	r22, r14
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13ce:	11 50       	subi	r17, 0x01	; 1
    13d0:	41 f3       	breq	.-48     	; 0x13a2 <vfprintf+0x3c4>
    13d2:	86 2d       	mov	r24, r6
    13d4:	f1 cf       	rjmp	.-30     	; 0x13b8 <vfprintf+0x3da>
    13d6:	85 e6       	ldi	r24, 0x65	; 101
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	b7 01       	movw	r22, r14
    13dc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13e0:	d7 fc       	sbrc	r13, 7
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <vfprintf+0x410>
    13e4:	c1 14       	cp	r12, r1
    13e6:	d1 04       	cpc	r13, r1
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <vfprintf+0x41a>
    13ea:	04 ff       	sbrs	r16, 4
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <vfprintf+0x41a>
    13ee:	d1 94       	neg	r13
    13f0:	c1 94       	neg	r12
    13f2:	d1 08       	sbc	r13, r1
    13f4:	8d e2       	ldi	r24, 0x2D	; 45
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <vfprintf+0x41c>
    13f8:	8b e2       	ldi	r24, 0x2B	; 43
    13fa:	b7 01       	movw	r22, r14
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1402:	80 e3       	ldi	r24, 0x30	; 48
    1404:	6a e0       	ldi	r22, 0x0A	; 10
    1406:	c6 16       	cp	r12, r22
    1408:	d1 04       	cpc	r13, r1
    140a:	2c f0       	brlt	.+10     	; 0x1416 <vfprintf+0x438>
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	fa e0       	ldi	r31, 0x0A	; 10
    1410:	cf 1a       	sub	r12, r31
    1412:	d1 08       	sbc	r13, r1
    1414:	f7 cf       	rjmp	.-18     	; 0x1404 <vfprintf+0x426>
    1416:	b7 01       	movw	r22, r14
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    141e:	b7 01       	movw	r22, r14
    1420:	c6 01       	movw	r24, r12
    1422:	c0 96       	adiw	r24, 0x30	; 48
    1424:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1428:	41 c1       	rjmp	.+642    	; 0x16ac <vfprintf+0x6ce>
    142a:	83 36       	cpi	r24, 0x63	; 99
    142c:	31 f0       	breq	.+12     	; 0x143a <vfprintf+0x45c>
    142e:	83 37       	cpi	r24, 0x73	; 115
    1430:	79 f0       	breq	.+30     	; 0x1450 <vfprintf+0x472>
    1432:	83 35       	cpi	r24, 0x53	; 83
    1434:	09 f0       	breq	.+2      	; 0x1438 <vfprintf+0x45a>
    1436:	58 c0       	rjmp	.+176    	; 0x14e8 <vfprintf+0x50a>
    1438:	21 c0       	rjmp	.+66     	; 0x147c <vfprintf+0x49e>
    143a:	56 01       	movw	r10, r12
    143c:	72 e0       	ldi	r23, 0x02	; 2
    143e:	a7 0e       	add	r10, r23
    1440:	b1 1c       	adc	r11, r1
    1442:	f6 01       	movw	r30, r12
    1444:	80 81       	ld	r24, Z
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	01 e0       	ldi	r16, 0x01	; 1
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	64 01       	movw	r12, r8
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <vfprintf+0x49a>
    1450:	56 01       	movw	r10, r12
    1452:	f2 e0       	ldi	r31, 0x02	; 2
    1454:	af 0e       	add	r10, r31
    1456:	b1 1c       	adc	r11, r1
    1458:	f6 01       	movw	r30, r12
    145a:	c0 80       	ld	r12, Z
    145c:	d1 80       	ldd	r13, Z+1	; 0x01
    145e:	26 ff       	sbrs	r18, 6
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x48a>
    1462:	61 2f       	mov	r22, r17
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x48e>
    1468:	6f ef       	ldi	r22, 0xFF	; 255
    146a:	7f ef       	ldi	r23, 0xFF	; 255
    146c:	c6 01       	movw	r24, r12
    146e:	2b 8b       	std	Y+19, r18	; 0x13
    1470:	0e 94 a6 0c 	call	0x194c	; 0x194c <strnlen>
    1474:	8c 01       	movw	r16, r24
    1476:	2b 89       	ldd	r18, Y+19	; 0x13
    1478:	2f 77       	andi	r18, 0x7F	; 127
    147a:	15 c0       	rjmp	.+42     	; 0x14a6 <vfprintf+0x4c8>
    147c:	56 01       	movw	r10, r12
    147e:	f2 e0       	ldi	r31, 0x02	; 2
    1480:	af 0e       	add	r10, r31
    1482:	b1 1c       	adc	r11, r1
    1484:	f6 01       	movw	r30, r12
    1486:	c0 80       	ld	r12, Z
    1488:	d1 80       	ldd	r13, Z+1	; 0x01
    148a:	26 ff       	sbrs	r18, 6
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <vfprintf+0x4b6>
    148e:	61 2f       	mov	r22, r17
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <vfprintf+0x4ba>
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	7f ef       	ldi	r23, 0xFF	; 255
    1498:	c6 01       	movw	r24, r12
    149a:	2b 8b       	std	Y+19, r18	; 0x13
    149c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <strnlen_P>
    14a0:	8c 01       	movw	r16, r24
    14a2:	2b 89       	ldd	r18, Y+19	; 0x13
    14a4:	20 68       	ori	r18, 0x80	; 128
    14a6:	72 2e       	mov	r7, r18
    14a8:	23 fd       	sbrc	r18, 3
    14aa:	1a c0       	rjmp	.+52     	; 0x14e0 <vfprintf+0x502>
    14ac:	85 2d       	mov	r24, r5
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	08 17       	cp	r16, r24
    14b2:	19 07       	cpc	r17, r25
    14b4:	a8 f4       	brcc	.+42     	; 0x14e0 <vfprintf+0x502>
    14b6:	b7 01       	movw	r22, r14
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    14c0:	5a 94       	dec	r5
    14c2:	f4 cf       	rjmp	.-24     	; 0x14ac <vfprintf+0x4ce>
    14c4:	f6 01       	movw	r30, r12
    14c6:	77 fc       	sbrc	r7, 7
    14c8:	85 91       	lpm	r24, Z+
    14ca:	77 fe       	sbrs	r7, 7
    14cc:	81 91       	ld	r24, Z+
    14ce:	6f 01       	movw	r12, r30
    14d0:	b7 01       	movw	r22, r14
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    14d8:	51 10       	cpse	r5, r1
    14da:	5a 94       	dec	r5
    14dc:	01 50       	subi	r16, 0x01	; 1
    14de:	11 09       	sbc	r17, r1
    14e0:	01 15       	cp	r16, r1
    14e2:	11 05       	cpc	r17, r1
    14e4:	79 f7       	brne	.-34     	; 0x14c4 <vfprintf+0x4e6>
    14e6:	e2 c0       	rjmp	.+452    	; 0x16ac <vfprintf+0x6ce>
    14e8:	84 36       	cpi	r24, 0x64	; 100
    14ea:	11 f0       	breq	.+4      	; 0x14f0 <vfprintf+0x512>
    14ec:	89 36       	cpi	r24, 0x69	; 105
    14ee:	51 f5       	brne	.+84     	; 0x1544 <vfprintf+0x566>
    14f0:	56 01       	movw	r10, r12
    14f2:	27 ff       	sbrs	r18, 7
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <vfprintf+0x52a>
    14f6:	f4 e0       	ldi	r31, 0x04	; 4
    14f8:	af 0e       	add	r10, r31
    14fa:	b1 1c       	adc	r11, r1
    14fc:	f6 01       	movw	r30, r12
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	0a c0       	rjmp	.+20     	; 0x151c <vfprintf+0x53e>
    1508:	f2 e0       	ldi	r31, 0x02	; 2
    150a:	af 0e       	add	r10, r31
    150c:	b1 1c       	adc	r11, r1
    150e:	f6 01       	movw	r30, r12
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	88 27       	eor	r24, r24
    1516:	77 fd       	sbrc	r23, 7
    1518:	80 95       	com	r24
    151a:	98 2f       	mov	r25, r24
    151c:	02 2f       	mov	r16, r18
    151e:	0f 76       	andi	r16, 0x6F	; 111
    1520:	97 ff       	sbrs	r25, 7
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <vfprintf+0x556>
    1524:	90 95       	com	r25
    1526:	80 95       	com	r24
    1528:	70 95       	com	r23
    152a:	61 95       	neg	r22
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	00 68       	ori	r16, 0x80	; 128
    1534:	2a e0       	ldi	r18, 0x0A	; 10
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	a4 01       	movw	r20, r8
    153a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__ultoa_invert>
    153e:	c8 2e       	mov	r12, r24
    1540:	c8 18       	sub	r12, r8
    1542:	3e c0       	rjmp	.+124    	; 0x15c0 <vfprintf+0x5e2>
    1544:	02 2f       	mov	r16, r18
    1546:	85 37       	cpi	r24, 0x75	; 117
    1548:	21 f4       	brne	.+8      	; 0x1552 <vfprintf+0x574>
    154a:	0f 7e       	andi	r16, 0xEF	; 239
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	1d c0       	rjmp	.+58     	; 0x158c <vfprintf+0x5ae>
    1552:	09 7f       	andi	r16, 0xF9	; 249
    1554:	8f 36       	cpi	r24, 0x6F	; 111
    1556:	91 f0       	breq	.+36     	; 0x157c <vfprintf+0x59e>
    1558:	18 f4       	brcc	.+6      	; 0x1560 <vfprintf+0x582>
    155a:	88 35       	cpi	r24, 0x58	; 88
    155c:	59 f0       	breq	.+22     	; 0x1574 <vfprintf+0x596>
    155e:	b0 c0       	rjmp	.+352    	; 0x16c0 <vfprintf+0x6e2>
    1560:	80 37       	cpi	r24, 0x70	; 112
    1562:	19 f0       	breq	.+6      	; 0x156a <vfprintf+0x58c>
    1564:	88 37       	cpi	r24, 0x78	; 120
    1566:	11 f0       	breq	.+4      	; 0x156c <vfprintf+0x58e>
    1568:	ab c0       	rjmp	.+342    	; 0x16c0 <vfprintf+0x6e2>
    156a:	00 61       	ori	r16, 0x10	; 16
    156c:	04 ff       	sbrs	r16, 4
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <vfprintf+0x5a4>
    1570:	04 60       	ori	r16, 0x04	; 4
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <vfprintf+0x5a4>
    1574:	24 ff       	sbrs	r18, 4
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <vfprintf+0x5aa>
    1578:	06 60       	ori	r16, 0x06	; 6
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x5aa>
    157c:	28 e0       	ldi	r18, 0x08	; 8
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	05 c0       	rjmp	.+10     	; 0x158c <vfprintf+0x5ae>
    1582:	20 e1       	ldi	r18, 0x10	; 16
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x5ae>
    1588:	20 e1       	ldi	r18, 0x10	; 16
    158a:	32 e0       	ldi	r19, 0x02	; 2
    158c:	56 01       	movw	r10, r12
    158e:	07 ff       	sbrs	r16, 7
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <vfprintf+0x5c6>
    1592:	f4 e0       	ldi	r31, 0x04	; 4
    1594:	af 0e       	add	r10, r31
    1596:	b1 1c       	adc	r11, r1
    1598:	f6 01       	movw	r30, r12
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <vfprintf+0x5d6>
    15a4:	f2 e0       	ldi	r31, 0x02	; 2
    15a6:	af 0e       	add	r10, r31
    15a8:	b1 1c       	adc	r11, r1
    15aa:	f6 01       	movw	r30, r12
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a4 01       	movw	r20, r8
    15b6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__ultoa_invert>
    15ba:	c8 2e       	mov	r12, r24
    15bc:	c8 18       	sub	r12, r8
    15be:	0f 77       	andi	r16, 0x7F	; 127
    15c0:	06 ff       	sbrs	r16, 6
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <vfprintf+0x5fc>
    15c4:	20 2f       	mov	r18, r16
    15c6:	2e 7f       	andi	r18, 0xFE	; 254
    15c8:	c1 16       	cp	r12, r17
    15ca:	50 f4       	brcc	.+20     	; 0x15e0 <vfprintf+0x602>
    15cc:	04 ff       	sbrs	r16, 4
    15ce:	0a c0       	rjmp	.+20     	; 0x15e4 <vfprintf+0x606>
    15d0:	02 fd       	sbrc	r16, 2
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x606>
    15d4:	20 2f       	mov	r18, r16
    15d6:	2e 7e       	andi	r18, 0xEE	; 238
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <vfprintf+0x606>
    15da:	dc 2c       	mov	r13, r12
    15dc:	20 2f       	mov	r18, r16
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <vfprintf+0x608>
    15e0:	dc 2c       	mov	r13, r12
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <vfprintf+0x608>
    15e4:	d1 2e       	mov	r13, r17
    15e6:	24 ff       	sbrs	r18, 4
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <vfprintf+0x626>
    15ea:	fe 01       	movw	r30, r28
    15ec:	ec 0d       	add	r30, r12
    15ee:	f1 1d       	adc	r31, r1
    15f0:	80 81       	ld	r24, Z
    15f2:	80 33       	cpi	r24, 0x30	; 48
    15f4:	11 f4       	brne	.+4      	; 0x15fa <vfprintf+0x61c>
    15f6:	29 7e       	andi	r18, 0xE9	; 233
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <vfprintf+0x62e>
    15fa:	22 ff       	sbrs	r18, 2
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <vfprintf+0x62c>
    15fe:	d3 94       	inc	r13
    1600:	d3 94       	inc	r13
    1602:	04 c0       	rjmp	.+8      	; 0x160c <vfprintf+0x62e>
    1604:	82 2f       	mov	r24, r18
    1606:	86 78       	andi	r24, 0x86	; 134
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0x62e>
    160a:	d3 94       	inc	r13
    160c:	23 fd       	sbrc	r18, 3
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <vfprintf+0x658>
    1610:	20 ff       	sbrs	r18, 0
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <vfprintf+0x642>
    1614:	1c 2d       	mov	r17, r12
    1616:	d5 14       	cp	r13, r5
    1618:	18 f4       	brcc	.+6      	; 0x1620 <vfprintf+0x642>
    161a:	15 0d       	add	r17, r5
    161c:	1d 19       	sub	r17, r13
    161e:	d5 2c       	mov	r13, r5
    1620:	d5 14       	cp	r13, r5
    1622:	68 f4       	brcc	.+26     	; 0x163e <vfprintf+0x660>
    1624:	b7 01       	movw	r22, r14
    1626:	80 e2       	ldi	r24, 0x20	; 32
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2b 8b       	std	Y+19, r18	; 0x13
    162c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1630:	d3 94       	inc	r13
    1632:	2b 89       	ldd	r18, Y+19	; 0x13
    1634:	f5 cf       	rjmp	.-22     	; 0x1620 <vfprintf+0x642>
    1636:	d5 14       	cp	r13, r5
    1638:	10 f4       	brcc	.+4      	; 0x163e <vfprintf+0x660>
    163a:	5d 18       	sub	r5, r13
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x662>
    163e:	51 2c       	mov	r5, r1
    1640:	24 ff       	sbrs	r18, 4
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <vfprintf+0x68a>
    1644:	b7 01       	movw	r22, r14
    1646:	80 e3       	ldi	r24, 0x30	; 48
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	2b 8b       	std	Y+19, r18	; 0x13
    164c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1650:	2b 89       	ldd	r18, Y+19	; 0x13
    1652:	22 ff       	sbrs	r18, 2
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <vfprintf+0x6a6>
    1656:	21 ff       	sbrs	r18, 1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <vfprintf+0x682>
    165a:	88 e5       	ldi	r24, 0x58	; 88
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x686>
    1660:	88 e7       	ldi	r24, 0x78	; 120
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b7 01       	movw	r22, r14
    1666:	0c c0       	rjmp	.+24     	; 0x1680 <vfprintf+0x6a2>
    1668:	82 2f       	mov	r24, r18
    166a:	86 78       	andi	r24, 0x86	; 134
    166c:	59 f0       	breq	.+22     	; 0x1684 <vfprintf+0x6a6>
    166e:	21 fd       	sbrc	r18, 1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x698>
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <vfprintf+0x69a>
    1676:	8b e2       	ldi	r24, 0x2B	; 43
    1678:	27 fd       	sbrc	r18, 7
    167a:	8d e2       	ldi	r24, 0x2D	; 45
    167c:	b7 01       	movw	r22, r14
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1684:	c1 16       	cp	r12, r17
    1686:	38 f4       	brcc	.+14     	; 0x1696 <vfprintf+0x6b8>
    1688:	b7 01       	movw	r22, r14
    168a:	80 e3       	ldi	r24, 0x30	; 48
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1692:	11 50       	subi	r17, 0x01	; 1
    1694:	f7 cf       	rjmp	.-18     	; 0x1684 <vfprintf+0x6a6>
    1696:	ca 94       	dec	r12
    1698:	f4 01       	movw	r30, r8
    169a:	ec 0d       	add	r30, r12
    169c:	f1 1d       	adc	r31, r1
    169e:	80 81       	ld	r24, Z
    16a0:	b7 01       	movw	r22, r14
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16a8:	c1 10       	cpse	r12, r1
    16aa:	f5 cf       	rjmp	.-22     	; 0x1696 <vfprintf+0x6b8>
    16ac:	55 20       	and	r5, r5
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <vfprintf+0x6d4>
    16b0:	c2 cc       	rjmp	.-1660   	; 0x1036 <vfprintf+0x58>
    16b2:	b7 01       	movw	r22, r14
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16bc:	5a 94       	dec	r5
    16be:	f6 cf       	rjmp	.-20     	; 0x16ac <vfprintf+0x6ce>
    16c0:	f7 01       	movw	r30, r14
    16c2:	86 81       	ldd	r24, Z+6	; 0x06
    16c4:	97 81       	ldd	r25, Z+7	; 0x07
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x6ee>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	63 96       	adiw	r28, 0x13	; 19
    16ce:	e2 e1       	ldi	r30, 0x12	; 18
    16d0:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__epilogue_restores__>

000016d4 <__udivmodsi4>:
    16d4:	a1 e2       	ldi	r26, 0x21	; 33
    16d6:	1a 2e       	mov	r1, r26
    16d8:	aa 1b       	sub	r26, r26
    16da:	bb 1b       	sub	r27, r27
    16dc:	fd 01       	movw	r30, r26
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <__udivmodsi4_ep>

000016e0 <__udivmodsi4_loop>:
    16e0:	aa 1f       	adc	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	ee 1f       	adc	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	a2 17       	cp	r26, r18
    16ea:	b3 07       	cpc	r27, r19
    16ec:	e4 07       	cpc	r30, r20
    16ee:	f5 07       	cpc	r31, r21
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__udivmodsi4_ep>
    16f2:	a2 1b       	sub	r26, r18
    16f4:	b3 0b       	sbc	r27, r19
    16f6:	e4 0b       	sbc	r30, r20
    16f8:	f5 0b       	sbc	r31, r21

000016fa <__udivmodsi4_ep>:
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	1a 94       	dec	r1
    1704:	69 f7       	brne	.-38     	; 0x16e0 <__udivmodsi4_loop>
    1706:	60 95       	com	r22
    1708:	70 95       	com	r23
    170a:	80 95       	com	r24
    170c:	90 95       	com	r25
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	bd 01       	movw	r22, r26
    1714:	cf 01       	movw	r24, r30
    1716:	08 95       	ret

00001718 <__prologue_saves__>:
    1718:	2f 92       	push	r2
    171a:	3f 92       	push	r3
    171c:	4f 92       	push	r4
    171e:	5f 92       	push	r5
    1720:	6f 92       	push	r6
    1722:	7f 92       	push	r7
    1724:	8f 92       	push	r8
    1726:	9f 92       	push	r9
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	ca 1b       	sub	r28, r26
    1742:	db 0b       	sbc	r29, r27
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	09 94       	ijmp

00001750 <__epilogue_restores__>:
    1750:	2a 88       	ldd	r2, Y+18	; 0x12
    1752:	39 88       	ldd	r3, Y+17	; 0x11
    1754:	48 88       	ldd	r4, Y+16	; 0x10
    1756:	5f 84       	ldd	r5, Y+15	; 0x0f
    1758:	6e 84       	ldd	r6, Y+14	; 0x0e
    175a:	7d 84       	ldd	r7, Y+13	; 0x0d
    175c:	8c 84       	ldd	r8, Y+12	; 0x0c
    175e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1760:	aa 84       	ldd	r10, Y+10	; 0x0a
    1762:	b9 84       	ldd	r11, Y+9	; 0x09
    1764:	c8 84       	ldd	r12, Y+8	; 0x08
    1766:	df 80       	ldd	r13, Y+7	; 0x07
    1768:	ee 80       	ldd	r14, Y+6	; 0x06
    176a:	fd 80       	ldd	r15, Y+5	; 0x05
    176c:	0c 81       	ldd	r16, Y+4	; 0x04
    176e:	1b 81       	ldd	r17, Y+3	; 0x03
    1770:	aa 81       	ldd	r26, Y+2	; 0x02
    1772:	b9 81       	ldd	r27, Y+1	; 0x01
    1774:	ce 0f       	add	r28, r30
    1776:	d1 1d       	adc	r29, r1
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	ed 01       	movw	r28, r26
    1784:	08 95       	ret

00001786 <__ftoa_engine>:
    1786:	28 30       	cpi	r18, 0x08	; 8
    1788:	08 f0       	brcs	.+2      	; 0x178c <__ftoa_engine+0x6>
    178a:	27 e0       	ldi	r18, 0x07	; 7
    178c:	33 27       	eor	r19, r19
    178e:	da 01       	movw	r26, r20
    1790:	99 0f       	add	r25, r25
    1792:	31 1d       	adc	r19, r1
    1794:	87 fd       	sbrc	r24, 7
    1796:	91 60       	ori	r25, 0x01	; 1
    1798:	00 96       	adiw	r24, 0x00	; 0
    179a:	61 05       	cpc	r22, r1
    179c:	71 05       	cpc	r23, r1
    179e:	39 f4       	brne	.+14     	; 0x17ae <__ftoa_engine+0x28>
    17a0:	32 60       	ori	r19, 0x02	; 2
    17a2:	2e 5f       	subi	r18, 0xFE	; 254
    17a4:	3d 93       	st	X+, r19
    17a6:	30 e3       	ldi	r19, 0x30	; 48
    17a8:	2a 95       	dec	r18
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <__ftoa_engine+0x1e>
    17ac:	08 95       	ret
    17ae:	9f 3f       	cpi	r25, 0xFF	; 255
    17b0:	30 f0       	brcs	.+12     	; 0x17be <__ftoa_engine+0x38>
    17b2:	80 38       	cpi	r24, 0x80	; 128
    17b4:	71 05       	cpc	r23, r1
    17b6:	61 05       	cpc	r22, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__ftoa_engine+0x36>
    17ba:	3c 5f       	subi	r19, 0xFC	; 252
    17bc:	3c 5f       	subi	r19, 0xFC	; 252
    17be:	3d 93       	st	X+, r19
    17c0:	91 30       	cpi	r25, 0x01	; 1
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <__ftoa_engine+0x40>
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	91 1d       	adc	r25, r1
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	1f 93       	push	r17
    17ce:	0f 93       	push	r16
    17d0:	ff 92       	push	r15
    17d2:	ef 92       	push	r14
    17d4:	19 2f       	mov	r17, r25
    17d6:	98 7f       	andi	r25, 0xF8	; 248
    17d8:	96 95       	lsr	r25
    17da:	e9 2f       	mov	r30, r25
    17dc:	96 95       	lsr	r25
    17de:	96 95       	lsr	r25
    17e0:	e9 0f       	add	r30, r25
    17e2:	ff 27       	eor	r31, r31
    17e4:	e6 53       	subi	r30, 0x36	; 54
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	99 27       	eor	r25, r25
    17ea:	33 27       	eor	r19, r19
    17ec:	ee 24       	eor	r14, r14
    17ee:	ff 24       	eor	r15, r15
    17f0:	a7 01       	movw	r20, r14
    17f2:	e7 01       	movw	r28, r14
    17f4:	05 90       	lpm	r0, Z+
    17f6:	08 94       	sec
    17f8:	07 94       	ror	r0
    17fa:	28 f4       	brcc	.+10     	; 0x1806 <__ftoa_engine+0x80>
    17fc:	36 0f       	add	r19, r22
    17fe:	e7 1e       	adc	r14, r23
    1800:	f8 1e       	adc	r15, r24
    1802:	49 1f       	adc	r20, r25
    1804:	51 1d       	adc	r21, r1
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	06 94       	lsr	r0
    1810:	a1 f7       	brne	.-24     	; 0x17fa <__ftoa_engine+0x74>
    1812:	05 90       	lpm	r0, Z+
    1814:	07 94       	ror	r0
    1816:	28 f4       	brcc	.+10     	; 0x1822 <__ftoa_engine+0x9c>
    1818:	e7 0e       	add	r14, r23
    181a:	f8 1e       	adc	r15, r24
    181c:	49 1f       	adc	r20, r25
    181e:	56 1f       	adc	r21, r22
    1820:	c1 1d       	adc	r28, r1
    1822:	77 0f       	add	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	66 1f       	adc	r22, r22
    182a:	06 94       	lsr	r0
    182c:	a1 f7       	brne	.-24     	; 0x1816 <__ftoa_engine+0x90>
    182e:	05 90       	lpm	r0, Z+
    1830:	07 94       	ror	r0
    1832:	28 f4       	brcc	.+10     	; 0x183e <__ftoa_engine+0xb8>
    1834:	f8 0e       	add	r15, r24
    1836:	49 1f       	adc	r20, r25
    1838:	56 1f       	adc	r21, r22
    183a:	c7 1f       	adc	r28, r23
    183c:	d1 1d       	adc	r29, r1
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	66 1f       	adc	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	06 94       	lsr	r0
    1848:	a1 f7       	brne	.-24     	; 0x1832 <__ftoa_engine+0xac>
    184a:	05 90       	lpm	r0, Z+
    184c:	07 94       	ror	r0
    184e:	20 f4       	brcc	.+8      	; 0x1858 <__ftoa_engine+0xd2>
    1850:	49 0f       	add	r20, r25
    1852:	56 1f       	adc	r21, r22
    1854:	c7 1f       	adc	r28, r23
    1856:	d8 1f       	adc	r29, r24
    1858:	99 0f       	add	r25, r25
    185a:	66 1f       	adc	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	06 94       	lsr	r0
    1862:	a9 f7       	brne	.-22     	; 0x184e <__ftoa_engine+0xc8>
    1864:	84 91       	lpm	r24, Z
    1866:	10 95       	com	r17
    1868:	17 70       	andi	r17, 0x07	; 7
    186a:	41 f0       	breq	.+16     	; 0x187c <__ftoa_engine+0xf6>
    186c:	d6 95       	lsr	r29
    186e:	c7 95       	ror	r28
    1870:	57 95       	ror	r21
    1872:	47 95       	ror	r20
    1874:	f7 94       	ror	r15
    1876:	e7 94       	ror	r14
    1878:	1a 95       	dec	r17
    187a:	c1 f7       	brne	.-16     	; 0x186c <__ftoa_engine+0xe6>
    187c:	e0 e7       	ldi	r30, 0x70	; 112
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	68 94       	set
    1882:	15 90       	lpm	r1, Z+
    1884:	15 91       	lpm	r17, Z+
    1886:	35 91       	lpm	r19, Z+
    1888:	65 91       	lpm	r22, Z+
    188a:	95 91       	lpm	r25, Z+
    188c:	05 90       	lpm	r0, Z+
    188e:	7f e2       	ldi	r23, 0x2F	; 47
    1890:	73 95       	inc	r23
    1892:	e1 18       	sub	r14, r1
    1894:	f1 0a       	sbc	r15, r17
    1896:	43 0b       	sbc	r20, r19
    1898:	56 0b       	sbc	r21, r22
    189a:	c9 0b       	sbc	r28, r25
    189c:	d0 09       	sbc	r29, r0
    189e:	c0 f7       	brcc	.-16     	; 0x1890 <__ftoa_engine+0x10a>
    18a0:	e1 0c       	add	r14, r1
    18a2:	f1 1e       	adc	r15, r17
    18a4:	43 1f       	adc	r20, r19
    18a6:	56 1f       	adc	r21, r22
    18a8:	c9 1f       	adc	r28, r25
    18aa:	d0 1d       	adc	r29, r0
    18ac:	7e f4       	brtc	.+30     	; 0x18cc <__ftoa_engine+0x146>
    18ae:	70 33       	cpi	r23, 0x30	; 48
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <__ftoa_engine+0x130>
    18b2:	8a 95       	dec	r24
    18b4:	e6 cf       	rjmp	.-52     	; 0x1882 <__ftoa_engine+0xfc>
    18b6:	e8 94       	clt
    18b8:	01 50       	subi	r16, 0x01	; 1
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <__ftoa_engine+0x142>
    18bc:	08 0f       	add	r16, r24
    18be:	0a f4       	brpl	.+2      	; 0x18c2 <__ftoa_engine+0x13c>
    18c0:	00 27       	eor	r16, r16
    18c2:	02 17       	cp	r16, r18
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <__ftoa_engine+0x142>
    18c6:	20 2f       	mov	r18, r16
    18c8:	23 95       	inc	r18
    18ca:	02 2f       	mov	r16, r18
    18cc:	7a 33       	cpi	r23, 0x3A	; 58
    18ce:	28 f0       	brcs	.+10     	; 0x18da <__ftoa_engine+0x154>
    18d0:	79 e3       	ldi	r23, 0x39	; 57
    18d2:	7d 93       	st	X+, r23
    18d4:	2a 95       	dec	r18
    18d6:	e9 f7       	brne	.-6      	; 0x18d2 <__ftoa_engine+0x14c>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <__ftoa_engine+0x174>
    18da:	7d 93       	st	X+, r23
    18dc:	2a 95       	dec	r18
    18de:	89 f6       	brne	.-94     	; 0x1882 <__ftoa_engine+0xfc>
    18e0:	06 94       	lsr	r0
    18e2:	97 95       	ror	r25
    18e4:	67 95       	ror	r22
    18e6:	37 95       	ror	r19
    18e8:	17 95       	ror	r17
    18ea:	17 94       	ror	r1
    18ec:	e1 18       	sub	r14, r1
    18ee:	f1 0a       	sbc	r15, r17
    18f0:	43 0b       	sbc	r20, r19
    18f2:	56 0b       	sbc	r21, r22
    18f4:	c9 0b       	sbc	r28, r25
    18f6:	d0 09       	sbc	r29, r0
    18f8:	98 f0       	brcs	.+38     	; 0x1920 <__ftoa_engine+0x19a>
    18fa:	23 95       	inc	r18
    18fc:	7e 91       	ld	r23, -X
    18fe:	73 95       	inc	r23
    1900:	7a 33       	cpi	r23, 0x3A	; 58
    1902:	08 f0       	brcs	.+2      	; 0x1906 <__ftoa_engine+0x180>
    1904:	70 e3       	ldi	r23, 0x30	; 48
    1906:	7c 93       	st	X, r23
    1908:	20 13       	cpse	r18, r16
    190a:	b8 f7       	brcc	.-18     	; 0x18fa <__ftoa_engine+0x174>
    190c:	7e 91       	ld	r23, -X
    190e:	70 61       	ori	r23, 0x10	; 16
    1910:	7d 93       	st	X+, r23
    1912:	30 f0       	brcs	.+12     	; 0x1920 <__ftoa_engine+0x19a>
    1914:	83 95       	inc	r24
    1916:	71 e3       	ldi	r23, 0x31	; 49
    1918:	7d 93       	st	X+, r23
    191a:	70 e3       	ldi	r23, 0x30	; 48
    191c:	2a 95       	dec	r18
    191e:	e1 f7       	brne	.-8      	; 0x1918 <__ftoa_engine+0x192>
    1920:	11 24       	eor	r1, r1
    1922:	ef 90       	pop	r14
    1924:	ff 90       	pop	r15
    1926:	0f 91       	pop	r16
    1928:	1f 91       	pop	r17
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	99 27       	eor	r25, r25
    1930:	87 fd       	sbrc	r24, 7
    1932:	90 95       	com	r25
    1934:	08 95       	ret

00001936 <strnlen_P>:
    1936:	fc 01       	movw	r30, r24
    1938:	05 90       	lpm	r0, Z+
    193a:	61 50       	subi	r22, 0x01	; 1
    193c:	70 40       	sbci	r23, 0x00	; 0
    193e:	01 10       	cpse	r0, r1
    1940:	d8 f7       	brcc	.-10     	; 0x1938 <strnlen_P+0x2>
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	8e 0f       	add	r24, r30
    1948:	9f 1f       	adc	r25, r31
    194a:	08 95       	ret

0000194c <strnlen>:
    194c:	fc 01       	movw	r30, r24
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	70 40       	sbci	r23, 0x00	; 0
    1952:	01 90       	ld	r0, Z+
    1954:	01 10       	cpse	r0, r1
    1956:	d8 f7       	brcc	.-10     	; 0x194e <strnlen+0x2>
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	8e 0f       	add	r24, r30
    195e:	9f 1f       	adc	r25, r31
    1960:	08 95       	ret

00001962 <fputc>:
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	18 2f       	mov	r17, r24
    196c:	09 2f       	mov	r16, r25
    196e:	eb 01       	movw	r28, r22
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	81 fd       	sbrc	r24, 1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <fputc+0x1a>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	20 c0       	rjmp	.+64     	; 0x19bc <fputc+0x5a>
    197c:	82 ff       	sbrs	r24, 2
    197e:	10 c0       	rjmp	.+32     	; 0x19a0 <fputc+0x3e>
    1980:	4e 81       	ldd	r20, Y+6	; 0x06
    1982:	5f 81       	ldd	r21, Y+7	; 0x07
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	7c f4       	brge	.+30     	; 0x19ac <fputc+0x4a>
    198e:	e8 81       	ld	r30, Y
    1990:	f9 81       	ldd	r31, Y+1	; 0x01
    1992:	9f 01       	movw	r18, r30
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	39 83       	std	Y+1, r19	; 0x01
    199a:	28 83       	st	Y, r18
    199c:	10 83       	st	Z, r17
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <fputc+0x4a>
    19a0:	e8 85       	ldd	r30, Y+8	; 0x08
    19a2:	f9 85       	ldd	r31, Y+9	; 0x09
    19a4:	81 2f       	mov	r24, r17
    19a6:	09 95       	icall
    19a8:	89 2b       	or	r24, r25
    19aa:	29 f7       	brne	.-54     	; 0x1976 <fputc+0x14>
    19ac:	2e 81       	ldd	r18, Y+6	; 0x06
    19ae:	3f 81       	ldd	r19, Y+7	; 0x07
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	3f 83       	std	Y+7, r19	; 0x07
    19b6:	2e 83       	std	Y+6, r18	; 0x06
    19b8:	81 2f       	mov	r24, r17
    19ba:	90 2f       	mov	r25, r16
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <sprintf>:
    19c6:	ae e0       	ldi	r26, 0x0E	; 14
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e9 ee       	ldi	r30, 0xE9	; 233
    19cc:	fc e0       	ldi	r31, 0x0C	; 12
    19ce:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__prologue_saves__+0x1c>
    19d2:	0d 89       	ldd	r16, Y+21	; 0x15
    19d4:	1e 89       	ldd	r17, Y+22	; 0x16
    19d6:	86 e0       	ldi	r24, 0x06	; 6
    19d8:	8c 83       	std	Y+4, r24	; 0x04
    19da:	1a 83       	std	Y+2, r17	; 0x02
    19dc:	09 83       	std	Y+1, r16	; 0x01
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	9f e7       	ldi	r25, 0x7F	; 127
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	ae 01       	movw	r20, r28
    19e8:	47 5e       	subi	r20, 0xE7	; 231
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255
    19ec:	6f 89       	ldd	r22, Y+23	; 0x17
    19ee:	78 8d       	ldd	r23, Y+24	; 0x18
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	0e 94 ef 07 	call	0xfde	; 0xfde <vfprintf>
    19f8:	ef 81       	ldd	r30, Y+7	; 0x07
    19fa:	f8 85       	ldd	r31, Y+8	; 0x08
    19fc:	e0 0f       	add	r30, r16
    19fe:	f1 1f       	adc	r31, r17
    1a00:	10 82       	st	Z, r1
    1a02:	2e 96       	adiw	r28, 0x0e	; 14
    1a04:	e4 e0       	ldi	r30, 0x04	; 4
    1a06:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__epilogue_restores__+0x1c>

00001a0a <__ultoa_invert>:
    1a0a:	fa 01       	movw	r30, r20
    1a0c:	aa 27       	eor	r26, r26
    1a0e:	28 30       	cpi	r18, 0x08	; 8
    1a10:	51 f1       	breq	.+84     	; 0x1a66 <__ultoa_invert+0x5c>
    1a12:	20 31       	cpi	r18, 0x10	; 16
    1a14:	81 f1       	breq	.+96     	; 0x1a76 <__ultoa_invert+0x6c>
    1a16:	e8 94       	clt
    1a18:	6f 93       	push	r22
    1a1a:	6e 7f       	andi	r22, 0xFE	; 254
    1a1c:	6e 5f       	subi	r22, 0xFE	; 254
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	8f 4f       	sbci	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	af 4f       	sbci	r26, 0xFF	; 255
    1a26:	b1 e0       	ldi	r27, 0x01	; 1
    1a28:	3e d0       	rcall	.+124    	; 0x1aa6 <__ultoa_invert+0x9c>
    1a2a:	b4 e0       	ldi	r27, 0x04	; 4
    1a2c:	3c d0       	rcall	.+120    	; 0x1aa6 <__ultoa_invert+0x9c>
    1a2e:	67 0f       	add	r22, r23
    1a30:	78 1f       	adc	r23, r24
    1a32:	89 1f       	adc	r24, r25
    1a34:	9a 1f       	adc	r25, r26
    1a36:	a1 1d       	adc	r26, r1
    1a38:	68 0f       	add	r22, r24
    1a3a:	79 1f       	adc	r23, r25
    1a3c:	8a 1f       	adc	r24, r26
    1a3e:	91 1d       	adc	r25, r1
    1a40:	a1 1d       	adc	r26, r1
    1a42:	6a 0f       	add	r22, r26
    1a44:	71 1d       	adc	r23, r1
    1a46:	81 1d       	adc	r24, r1
    1a48:	91 1d       	adc	r25, r1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	20 d0       	rcall	.+64     	; 0x1a8e <__ultoa_invert+0x84>
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__ultoa_invert+0x48>
    1a50:	68 94       	set
    1a52:	3f 91       	pop	r19
    1a54:	2a e0       	ldi	r18, 0x0A	; 10
    1a56:	26 9f       	mul	r18, r22
    1a58:	11 24       	eor	r1, r1
    1a5a:	30 19       	sub	r19, r0
    1a5c:	30 5d       	subi	r19, 0xD0	; 208
    1a5e:	31 93       	st	Z+, r19
    1a60:	de f6       	brtc	.-74     	; 0x1a18 <__ultoa_invert+0xe>
    1a62:	cf 01       	movw	r24, r30
    1a64:	08 95       	ret
    1a66:	46 2f       	mov	r20, r22
    1a68:	47 70       	andi	r20, 0x07	; 7
    1a6a:	40 5d       	subi	r20, 0xD0	; 208
    1a6c:	41 93       	st	Z+, r20
    1a6e:	b3 e0       	ldi	r27, 0x03	; 3
    1a70:	0f d0       	rcall	.+30     	; 0x1a90 <__ultoa_invert+0x86>
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__ultoa_invert+0x5c>
    1a74:	f6 cf       	rjmp	.-20     	; 0x1a62 <__ultoa_invert+0x58>
    1a76:	46 2f       	mov	r20, r22
    1a78:	4f 70       	andi	r20, 0x0F	; 15
    1a7a:	40 5d       	subi	r20, 0xD0	; 208
    1a7c:	4a 33       	cpi	r20, 0x3A	; 58
    1a7e:	18 f0       	brcs	.+6      	; 0x1a86 <__ultoa_invert+0x7c>
    1a80:	49 5d       	subi	r20, 0xD9	; 217
    1a82:	31 fd       	sbrc	r19, 1
    1a84:	40 52       	subi	r20, 0x20	; 32
    1a86:	41 93       	st	Z+, r20
    1a88:	02 d0       	rcall	.+4      	; 0x1a8e <__ultoa_invert+0x84>
    1a8a:	a9 f7       	brne	.-22     	; 0x1a76 <__ultoa_invert+0x6c>
    1a8c:	ea cf       	rjmp	.-44     	; 0x1a62 <__ultoa_invert+0x58>
    1a8e:	b4 e0       	ldi	r27, 0x04	; 4
    1a90:	a6 95       	lsr	r26
    1a92:	97 95       	ror	r25
    1a94:	87 95       	ror	r24
    1a96:	77 95       	ror	r23
    1a98:	67 95       	ror	r22
    1a9a:	ba 95       	dec	r27
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__ultoa_invert+0x86>
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	61 05       	cpc	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	08 95       	ret
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	0a 2e       	mov	r0, r26
    1aac:	06 94       	lsr	r0
    1aae:	57 95       	ror	r21
    1ab0:	47 95       	ror	r20
    1ab2:	37 95       	ror	r19
    1ab4:	27 95       	ror	r18
    1ab6:	ba 95       	dec	r27
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0xa2>
    1aba:	62 0f       	add	r22, r18
    1abc:	73 1f       	adc	r23, r19
    1abe:	84 1f       	adc	r24, r20
    1ac0:	95 1f       	adc	r25, r21
    1ac2:	a0 1d       	adc	r26, r0
    1ac4:	08 95       	ret

00001ac6 <_exit>:
    1ac6:	f8 94       	cli

00001ac8 <__stop_program>:
    1ac8:	ff cf       	rjmp	.-2      	; 0x1ac8 <__stop_program>
