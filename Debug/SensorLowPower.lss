
SensorLowPower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001758  000017ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  0080012c  0080012c  00001818  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011df  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bf  00000000  00000000  00002beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089f  00000000  00000000  000034aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000448  00000000  00000000  00003d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000090f  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001094  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00005b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_6>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_18>
      4c:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_19>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2159>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e8 e5       	ldi	r30, 0x58	; 88
     17e:	f7 e1       	ldi	r31, 0x17	; 23
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 32       	cpi	r26, 0x2C	; 44
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ac e2       	ldi	r26, 0x2C	; 44
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3d       	cpi	r26, 0xD8	; 216
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 bc 02 	call	0x578	; 0x578 <main>
     1a0:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <_Z13ADCsingleREADh>:
int ADCsingleREAD(uint8_t ADCn_touse)
{
	int ADCval;

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega8A__) || defined(__AVR_ATmega88__)
	ADMUX = ADCn_touse;         // use #1 ADC
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
     1ae:	80 81       	ld	r24, Z
     1b0:	80 64       	ori	r24, 0x40	; 64
     1b2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 7d       	andi	r24, 0xDF	; 223
     1b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);// | (1 << ADPS0);
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	86 60       	ori	r24, 0x06	; 6
     1c2:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADPS0);
     1c4:	80 81       	ld	r24, Z
     1c6:	8e 7f       	andi	r24, 0xFE	; 254
     1c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
     1ca:	80 81       	ld	r24, Z
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
     1d0:	80 81       	ld	r24, Z
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
     1d6:	80 81       	ld	r24, Z
     1d8:	86 fd       	sbrc	r24, 6
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <_Z13ADCsingleREADh+0x2e>


	ADCval = ADCL;
     1dc:	20 91 78 00 	lds	r18, 0x0078
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
     1e0:	80 91 79 00 	lds	r24, 0x0079
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	98 2f       	mov	r25, r24
     1e8:	88 27       	eor	r24, r24
#endif

	//ADCSRA &= ~(1 << ADEN); 
	return ADCval;
}
     1ea:	82 0f       	add	r24, r18
     1ec:	91 1d       	adc	r25, r1
     1ee:	08 95       	ret

000001f0 <__vector_21>:
	
}


ISR(ADC_vect)
{
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	8f 93       	push	r24
	ADCvalue = ADCH;          // only need to read the high value for 8 bit
     1fc:	80 91 79 00 	lds	r24, 0x0079
     200:	80 93 2c 01 	sts	0x012C, r24
	// REMEMBER: once ADCH is read the ADC will update
	
	// if you need the value of ADCH in multiple spots, read it into a register
	// and use the register and not the ADCH

}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <readDHT22>:
 * at the header file (DHT22.h).
 */
#include "dht22New.h"

DHT22_ERROR_t readDHT22(DHT22_DATA_t* data)
{
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <readDHT22+0x1a>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// Pin needs to start HIGH, wait until it is HIGH with a timeout
	retryCount = 0;
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
     22e:	52 98       	cbi	0x0a, 2	; 10
     230:	2e e7       	ldi	r18, 0x7E	; 126
     232:	03 c0       	rjmp	.+6      	; 0x23a <readDHT22+0x2a>
     234:	21 50       	subi	r18, 0x01	; 1
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     236:	09 f4       	brne	.+2      	; 0x23a <readDHT22+0x2a>
     238:	b7 c0       	rjmp	.+366    	; 0x3a8 <readDHT22+0x198>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	35 e0       	ldi	r19, 0x05	; 5
     23c:	3a 95       	dec	r19
     23e:	f1 f7       	brne	.-4      	; 0x23c <readDHT22+0x2c>
     240:	00 00       	nop
		retryCount++;
		_delay_us(2);
	} while( !( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ) );				//!DIRECT_READ(reg, bitmask)
     242:	4a 9b       	sbis	0x09, 2	; 9
     244:	f7 cf       	rjmp	.-18     	; 0x234 <readDHT22+0x24>

	
	// Send the activate pulse
//	cli();
	DHT22_PORT_OUT &= ~(1 << ( DHT22_PIN )); 							//DIRECT_WRITE_LOW(reg, bitmask);
     246:	5a 98       	cbi	0x0b, 2	; 11
	DHT22_DDR |= 1 << ( DHT22_PIN );								//DIRECT_MODE_OUTPUT(reg, bitmask); // Output Low
     248:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	ef e9       	ldi	r30, 0x9F	; 159
     24c:	ff e0       	ldi	r31, 0x0F	; 15
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <readDHT22+0x3e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <readDHT22+0x44>
     254:	00 00       	nop
//	sei();
	_delay_ms(2); 										// spec is 1 to 10ms
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));							// Switch back to input so pin can float
     256:	52 98       	cbi	0x0a, 2	; 10
	DHT22_PORT_OUT |= (1 << ( DHT22_PIN )); // Enable pullup.
     258:	5a 9a       	sbi	0x0b, 2	; 11
     25a:	2a e1       	ldi	r18, 0x1A	; 26
     25c:	03 c0       	rjmp	.+6      	; 0x264 <readDHT22+0x54>
     25e:	21 50       	subi	r18, 0x01	; 1

	// Find the start of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
     260:	09 f4       	brne	.+2      	; 0x264 <readDHT22+0x54>
     262:	a4 c0       	rjmp	.+328    	; 0x3ac <readDHT22+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	f5 e0       	ldi	r31, 0x05	; 5
     266:	fa 95       	dec	r31
     268:	f1 f7       	brne	.-4      	; 0x266 <readDHT22+0x56>
     26a:	00 00       	nop
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) ); // While pin is 1.
     26c:	4a 99       	sbic	0x09, 2	; 9
     26e:	f7 cf       	rjmp	.-18     	; 0x25e <readDHT22+0x4e>
     270:	23 e3       	ldi	r18, 0x33	; 51
     272:	03 c0       	rjmp	.+6      	; 0x27a <readDHT22+0x6a>
     274:	21 50       	subi	r18, 0x01	; 1

	// Find the transition of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     276:	09 f4       	brne	.+2      	; 0x27a <readDHT22+0x6a>
     278:	9b c0       	rjmp	.+310    	; 0x3b0 <readDHT22+0x1a0>
     27a:	35 e0       	ldi	r19, 0x05	; 5
     27c:	3a 95       	dec	r19
     27e:	f1 f7       	brne	.-4      	; 0x27c <readDHT22+0x6c>
     280:	00 00       	nop
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     282:	4a 9b       	sbis	0x09, 2	; 9
     284:	f7 cf       	rjmp	.-18     	; 0x274 <readDHT22+0x64>
     286:	23 e3       	ldi	r18, 0x33	; 51
     288:	03 c0       	rjmp	.+6      	; 0x290 <readDHT22+0x80>
     28a:	21 50       	subi	r18, 0x01	; 1

	// Find the end of the ACK signal
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
     28c:	09 f4       	brne	.+2      	; 0x290 <readDHT22+0x80>
     28e:	92 c0       	rjmp	.+292    	; 0x3b4 <readDHT22+0x1a4>
     290:	e5 e0       	ldi	r30, 0x05	; 5
     292:	ea 95       	dec	r30
     294:	f1 f7       	brne	.-4      	; 0x292 <readDHT22+0x82>
     296:	00 00       	nop
		{
			return DHT_ERROR_ACK_TOO_LONG;
		}
		retryCount++;
		_delay_us(2);
	} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     298:	4a 99       	sbic	0x09, 2	; 9
     29a:	f7 cf       	rjmp	.-18     	; 0x28a <readDHT22+0x7a>
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	d1 2c       	mov	r13, r1
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	10 e0       	ldi	r17, 0x00	; 0
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2aa:	e1 2c       	mov	r14, r1
			{
				rawTemperature |= (1 << (31 - i));
			}
			if ((i > 31) && (i < 40))  // CRC data
			{
				checkSum |= (1 << (39 - i));
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f7 e2       	ldi	r31, 0x27	; 39
     2b0:	8f 2e       	mov	r8, r31
     2b2:	91 2c       	mov	r9, r1
     2b4:	f0 2d       	mov	r31, r0
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	70 e0       	ldi	r23, 0x00	; 0
			{
				rawHumidity |= (1 << (15 - i));
			}
			if ((i > 15) && (i < 32))  // Temperature
			{
				rawTemperature |= (1 << (31 - i));
     2ba:	af e1       	ldi	r26, 0x1F	; 31
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
		{
			if (i < 16) // Humidity 
			{
				rawHumidity |= (1 << (15 - i));
     2be:	0f 2e       	mov	r0, r31
     2c0:	ff e0       	ldi	r31, 0x0F	; 15
     2c2:	6f 2e       	mov	r6, r31
     2c4:	71 2c       	mov	r7, r1
     2c6:	f0 2d       	mov	r31, r0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <readDHT22+0xc2>
	{
		// Find the start of the sync pulse
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
     2ca:	14 32       	cpi	r17, 0x24	; 36
     2cc:	10 f0       	brcs	.+4      	; 0x2d2 <readDHT22+0xc2>
     2ce:	74 c0       	rjmp	.+232    	; 0x3b8 <readDHT22+0x1a8>
     2d0:	1e 2d       	mov	r17, r14
			{
				return DHT_ERROR_SYNC_TIMEOUT;
			}
			retryCount++;
     2d2:	1f 5f       	subi	r17, 0xFF	; 255
     2d4:	f5 e0       	ldi	r31, 0x05	; 5
     2d6:	fa 95       	dec	r31
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <readDHT22+0xc6>
     2da:	00 00       	nop
			_delay_us(2);
		} while( !(DHT22_PORT_IN & ( 1 << DHT22_PIN )) );
     2dc:	4a 9b       	sbis	0x09, 2	; 9
     2de:	f5 cf       	rjmp	.-22     	; 0x2ca <readDHT22+0xba>
     2e0:	1e 2d       	mov	r17, r14
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <readDHT22+0xda>
		
		// Measure the width of the data pulse
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
     2e4:	13 33       	cpi	r17, 0x33	; 51
     2e6:	09 f4       	brne	.+2      	; 0x2ea <readDHT22+0xda>
     2e8:	69 c0       	rjmp	.+210    	; 0x3bc <readDHT22+0x1ac>
			{
				return DHT_ERROR_DATA_TIMEOUT;
			}
			retryCount++;
     2ea:	1f 5f       	subi	r17, 0xFF	; 255
     2ec:	e5 e0       	ldi	r30, 0x05	; 5
     2ee:	ea 95       	dec	r30
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <readDHT22+0xde>
     2f2:	00 00       	nop
			_delay_us(2);
		} while( DHT22_PORT_IN & ( 1 << DHT22_PIN ) );
     2f4:	4a 99       	sbic	0x09, 2	; 9
     2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <readDHT22+0xd4>

		// Identification of bit values.
		if (retryCount > 20) // Bit is 1: 20*2 = 40us (specification for bit 0 is 26 a 28us).
     2f8:	15 31       	cpi	r17, 0x15	; 21
     2fa:	80 f1       	brcs	.+96     	; 0x35c <readDHT22+0x14c>
		{
			if (i < 16) // Humidity 
     2fc:	00 31       	cpi	r16, 0x10	; 16
     2fe:	70 f4       	brcc	.+28     	; 0x31c <readDHT22+0x10c>
			{
				rawHumidity |= (1 << (15 - i));
     300:	53 01       	movw	r10, r6
     302:	a0 1a       	sub	r10, r16
     304:	b1 08       	sbc	r11, r1
     306:	ba 82       	std	Y+2, r11	; 0x02
     308:	a9 82       	std	Y+1, r10	; 0x01
     30a:	5b 01       	movw	r10, r22
     30c:	09 80       	ldd	r0, Y+1	; 0x01
     30e:	02 c0       	rjmp	.+4      	; 0x314 <readDHT22+0x104>
     310:	aa 0c       	add	r10, r10
     312:	bb 1c       	adc	r11, r11
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <readDHT22+0x100>
     318:	4a 29       	or	r20, r10
     31a:	5b 29       	or	r21, r11
			}
			if ((i > 15) && (i < 32))  // Temperature
     31c:	10 ef       	ldi	r17, 0xF0	; 240
     31e:	10 0f       	add	r17, r16
     320:	10 31       	cpi	r17, 0x10	; 16
     322:	70 f4       	brcc	.+28     	; 0x340 <readDHT22+0x130>
			{
				rawTemperature |= (1 << (31 - i));
     324:	fd 01       	movw	r30, r26
     326:	e0 1b       	sub	r30, r16
     328:	f1 09       	sbc	r31, r1
     32a:	fa 83       	std	Y+2, r31	; 0x02
     32c:	e9 83       	std	Y+1, r30	; 0x01
     32e:	5b 01       	movw	r10, r22
     330:	09 80       	ldd	r0, Y+1	; 0x01
     332:	02 c0       	rjmp	.+4      	; 0x338 <readDHT22+0x128>
     334:	aa 0c       	add	r10, r10
     336:	bb 1c       	adc	r11, r11
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <readDHT22+0x124>
     33c:	2a 29       	or	r18, r10
     33e:	3b 29       	or	r19, r11
			}
			if ((i > 31) && (i < 40))  // CRC data
     340:	10 ee       	ldi	r17, 0xE0	; 224
     342:	10 0f       	add	r17, r16
     344:	18 30       	cpi	r17, 0x08	; 8
     346:	50 f4       	brcc	.+20     	; 0x35c <readDHT22+0x14c>
			{
				checkSum |= (1 << (39 - i));
     348:	54 01       	movw	r10, r8
     34a:	a0 1a       	sub	r10, r16
     34c:	b1 08       	sbc	r11, r1
     34e:	fb 01       	movw	r30, r22
     350:	02 c0       	rjmp	.+4      	; 0x356 <readDHT22+0x146>
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	aa 94       	dec	r10
     358:	e2 f7       	brpl	.-8      	; 0x352 <readDHT22+0x142>
     35a:	de 2a       	or	r13, r30
	
	
	// Here sensor pulled down to start transmitting bits.

	// Read the 40 bit data stream
	for(i = 0; i < DHT22_DATA_BIT_COUNT; i++)
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	08 32       	cpi	r16, 0x28	; 40
     360:	08 f4       	brcc	.+2      	; 0x364 <readDHT22+0x154>
     362:	b6 cf       	rjmp	.-148    	; 0x2d0 <readDHT22+0xc0>
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     364:	ed 2d       	mov	r30, r13
     366:	f0 e0       	ldi	r31, 0x00	; 0
	// 26~28us == logical 0
	// 70us	   == logical 1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
     368:	a5 2f       	mov	r26, r21
     36a:	bb 27       	eor	r27, r27
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     36c:	a4 0f       	add	r26, r20
     36e:	b1 1d       	adc	r27, r1
	// here threshold is 40us

	// calculate checksum
	csPart1 = rawHumidity >> 8;
	csPart2 = rawHumidity & 0xFF;
	csPart3 = rawTemperature >> 8;
     370:	63 2f       	mov	r22, r19
     372:	77 27       	eor	r23, r23
	csPart4 = rawTemperature & 0xFF;
	
	if( checkSum == ( (csPart1 + csPart2 + csPart3 + csPart4) & 0xFF ) )
     374:	6a 0f       	add	r22, r26
     376:	7b 1f       	adc	r23, r27
     378:	62 0f       	add	r22, r18
     37a:	71 1d       	adc	r23, r1
     37c:	77 27       	eor	r23, r23
     37e:	e6 17       	cp	r30, r22
     380:	f7 07       	cpc	r31, r23
     382:	f1 f4       	brne	.+60     	; 0x3c0 <readDHT22+0x1b0>
		{
			data->temperature_integral = (int8_t)(rawTemperature / 10);
			data->temperature_decimal = (uint8_t)(rawTemperature % 10);			
		}
#else
		if(rawTemperature & 0x8000)	// Check if temperature is below zero, non standard way of encoding negative numbers!
     384:	33 23       	and	r19, r19
     386:	44 f4       	brge	.+16     	; 0x398 <readDHT22+0x188>
		{
			rawTemperature &= 0x7FFF; // Remove signal bit
     388:	3f 77       	andi	r19, 0x7F	; 127
			data->raw_temperature = ((int16_t)rawTemperature) * -1;
     38a:	31 95       	neg	r19
     38c:	21 95       	neg	r18
     38e:	31 09       	sbc	r19, r1
     390:	fc 01       	movw	r30, r24
     392:	31 83       	std	Z+1, r19	; 0x01
     394:	20 83       	st	Z, r18
     396:	03 c0       	rjmp	.+6      	; 0x39e <readDHT22+0x18e>
		} else
		{
			data->raw_temperature  = rawTemperature;
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
		}	
		data->raw_humidity = rawHumidity;
     39e:	fc 01       	movw	r30, r24
     3a0:	53 83       	std	Z+3, r21	; 0x03
     3a2:	42 83       	std	Z+2, r20	; 0x02
#endif
		return DHT_ERROR_NONE;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <readDHT22+0x1b2>
//	cli();
	DHT22_DDR &= ~(1 << ( DHT22_PIN ));
//	sei();
	do
	{
		if(retryCount > 125) return DHT_BUS_HUNG;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 25) 							//(Spec is 20 to 40 us, 25*2 == 50 us)
		{
//			data->retryCount = retryCount;
			return DHT_ERROR_NOT_PRESENT;
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <readDHT22+0x1b2>
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			//data->retryCount = retryCount;
			return DHT_ERROR_ACK_TOO_LONG;
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <readDHT22+0x1b2>
	retryCount = 0;
	do
	{
		if (retryCount > 50) 							//(Spec is 80 us, 50*2 == 100 us)
		{
			return DHT_ERROR_ACK_TOO_LONG;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 35) 						//(Spec is 50 us, 35*2 == 70 us)
			{
				return DHT_ERROR_SYNC_TIMEOUT;
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <readDHT22+0x1b2>
		retryCount = 0;
		do
		{
			if (retryCount > 50) 						//(Spec is 80 us, 50*2 == 100 us)
			{
				return DHT_ERROR_DATA_TIMEOUT;
     3bc:	85 e0       	ldi	r24, 0x05	; 5
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <readDHT22+0x1b2>
		}	
		data->raw_humidity = rawHumidity;
#endif
		return DHT_ERROR_NONE;
	}
	return DHT_ERROR_CHECKSUM;
     3c0:	86 e0       	ldi	r24, 0x06	; 6
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	7f 90       	pop	r7
     3dc:	6f 90       	pop	r6
     3de:	08 95       	ret

000003e0 <_Z14PowerReductionv>:
const static uint8_t WDT_Multiplyer = 1;


void PowerReduction()
{
	PRR |= (1<<PRTIM1) | (1<<PRTIM2) | (1<<PRTWI);
     3e0:	e4 e6       	ldi	r30, 0x64	; 100
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	88 6c       	ori	r24, 0xC8	; 200
     3e8:	80 83       	st	Z, r24
     3ea:	08 95       	ret

000003ec <_Z24GotToSleepAndWaitForWorkv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	2f e7       	ldi	r18, 0x7F	; 127
     3ee:	8a e1       	ldi	r24, 0x1A	; 26
     3f0:	96 e0       	ldi	r25, 0x06	; 6
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <_Z24GotToSleepAndWaitForWorkv+0x6>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <_Z24GotToSleepAndWaitForWorkv+0x10>
     3fc:	00 00       	nop
}

void GotToSleepAndWaitForWork()
{
	_delay_ms(250);
	cli();
     3fe:	f8 94       	cli
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     400:	83 b7       	in	r24, 0x33	; 51
     402:	81 7f       	andi	r24, 0xF1	; 241
     404:	84 60       	ori	r24, 0x04	; 4
     406:	83 bf       	out	0x33, r24	; 51
	
	sleep_enable();
     408:	83 b7       	in	r24, 0x33	; 51
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	83 bf       	out	0x33, r24	; 51
	sei();
     40e:	78 94       	sei

	sleep_cpu();
     410:	88 95       	sleep
	cli();
     412:	f8 94       	cli
	sleep_disable();
     414:	83 b7       	in	r24, 0x33	; 51
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	83 bf       	out	0x33, r24	; 51
     41a:	8f eb       	ldi	r24, 0xBF	; 191
     41c:	9d e5       	ldi	r25, 0x5D	; 93
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <_Z24GotToSleepAndWaitForWorkv+0x32>
     422:	00 c0       	rjmp	.+0      	; 0x424 <_Z24GotToSleepAndWaitForWorkv+0x38>
     424:	00 00       	nop

	_delay_ms(12);
	sei();
     426:	78 94       	sei
     428:	08 95       	ret

0000042a <_Z29WDTPowerSave_RunAtSystemStartv>:
}

void WDTPowerSave_RunAtSystemStart()
{
	cli();
     42a:	f8 94       	cli
	
	wdt_enable(WDTO_8S);
     42c:	29 e2       	ldi	r18, 0x29	; 41
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	a8 95       	wdr
     438:	80 93 60 00 	sts	0x0060, r24
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	20 93 60 00 	sts	0x0060, r18
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     442:	e0 e6       	ldi	r30, 0x60	; 96
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 65       	ori	r24, 0x50	; 80
     44a:	80 83       	st	Z, r24
     44c:	08 95       	ret

0000044e <__vector_6>:


uint8_t WDTTriggerCount = 1;

ISR(WDT_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	cli();
     470:	f8 94       	cli
	//MCUSR = 0;
	WDTCSR |= (1<<WDCE) | (1<<WDIE);
     472:	e0 e6       	ldi	r30, 0x60	; 96
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 65       	ori	r24, 0x50	; 80
     47a:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDIF);
     47c:	80 81       	ld	r24, Z
     47e:	8f 77       	andi	r24, 0x7F	; 127
     480:	80 83       	st	Z, r24
	
	//wdt_reset();
	//WDTCSR |= (1<<WDIE);
	//WDTCSR = (0<<WDIF);
	wdt_triggered = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 4c 01 	sts	0x014C, r24
	if(WDTTriggerCount < WDT_Multiplyer)
     488:	80 91 00 01 	lds	r24, 0x0100
     48c:	81 11       	cpse	r24, r1
     48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__vector_6+0x54>
	{
		WDTTriggerCount++;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 00 01 	sts	0x0100, r24
		GotToSleepAndWaitForWork();
     496:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
	}
	if(WDTTriggerCount >= WDT_Multiplyer)
     49a:	80 91 00 01 	lds	r24, 0x0100
     49e:	88 23       	and	r24, r24
     4a0:	19 f0       	breq	.+6      	; 0x4a8 <__vector_6+0x5a>
	{
		WDTTriggerCount = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 00 01 	sts	0x0100, r24
	}
	sei();
     4a8:	78 94       	sei
	//_delay_ms(150);
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <_Z10ReadMotionv>:
volatile uint8_t motionStatus = 0;


int ReadMotion()
{
	motionStatus = 0;
     4cc:	10 92 4b 01 	sts	0x014B, r1
	 //Just incase set motion pin to input
	 if(MOTION_PIN & (1<<MOTION_PIN_NUM))
     4d0:	4b 9b       	sbis	0x09, 3	; 9
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <_Z10ReadMotionv+0xe>
	 {
		 motionStatus = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 4b 01 	sts	0x014B, r24
	 }	
	return motionStatus;	
     4da:	80 91 4b 01 	lds	r24, 0x014B
}
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <_Z18configureMotionISRv>:

#if MOTION_ENABLE_ISR
volatile uint8_t MotionDetected = 0;
void configureMotionISR()
{
	cli();
     4e2:	f8 94       	cli
	EICRA |= (1<<ISC10) | (1<<ISC11); //Set for Rising Edge trigger
     4e4:	e9 e6       	ldi	r30, 0x69	; 105
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8c 60       	ori	r24, 0x0C	; 12
     4ec:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);
     4ee:	e9 9a       	sbi	0x1d, 1	; 29
     4f0:	08 95       	ret

000004f2 <__vector_2>:
}


//ISR for Motion INT1
ISR(INT1_vect)
{
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	8f 93       	push	r24
	cli();
     4fe:	f8 94       	cli
	motionStatus = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 4b 01 	sts	0x014B, r24
	MotionDetected = 1;
     506:	80 93 4a 01 	sts	0x014A, r24
	EIMSK &= ~(1<<INT1); //Disable Interupt untill it has a chance to transmit, is re-enabled after transmit
     50a:	e9 98       	cbi	0x1d, 1	; 29
	sleep_disable();
     50c:	83 b7       	in	r24, 0x33	; 51
     50e:	8e 7f       	andi	r24, 0xFE	; 254
     510:	83 bf       	out	0x33, r24	; 51
	sei();
     512:	78 94       	sei
	
}
     514:	8f 91       	pop	r24
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <_Z11CheckMotionv>:

uint8_t justTriggeredByMotionISR = 0;

void CheckMotion()
{
	if(MotionDetected)
     520:	80 91 4a 01 	lds	r24, 0x014A
     524:	88 23       	and	r24, r24
     526:	39 f1       	breq	.+78     	; 0x576 <_Z11CheckMotionv+0x56>
	{
		justTriggeredByMotionISR = 1;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 2d 01 	sts	0x012D, r24
		sprintf(buffer,"M:%d\r\n",MotionDetected);
     52e:	80 91 4a 01 	lds	r24, 0x014A
     532:	1f 92       	push	r1
     534:	8f 93       	push	r24
     536:	84 e2       	ldi	r24, 0x24	; 36
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	8e e2       	ldi	r24, 0x2E	; 46
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 2a 0b 	call	0x1654	; 0x1654 <sprintf>
		serial.sendString(buffer);
     54a:	8e e2       	ldi	r24, 0x2E	; 46
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Serial10sendStringEPKc>
     552:	2f e7       	ldi	r18, 0x7F	; 127
     554:	89 ea       	ldi	r24, 0xA9	; 169
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	21 50       	subi	r18, 0x01	; 1
     55a:	80 40       	sbci	r24, 0x00	; 0
     55c:	90 40       	sbci	r25, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <_Z11CheckMotionv+0x38>
     560:	00 c0       	rjmp	.+0      	; 0x562 <_Z11CheckMotionv+0x42>
     562:	00 00       	nop
		_delay_ms(150); // wait for transmission to finish
		MotionDetected = 0;
     564:	10 92 4a 01 	sts	0x014A, r1
		EIMSK |= (1<<INT1);
     568:	e9 9a       	sbi	0x1d, 1	; 29
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	08 95       	ret

00000578 <main>:
}



int main(void)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	00 d0       	rcall	.+0      	; 0x57e <main+0x6>
     57e:	00 d0       	rcall	.+0      	; 0x580 <main+0x8>
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	
	
	DDRD &= ~(1<<3); //set motion Pin as input
     584:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1<<3); //Make sure pullup is disabled.
     586:	5b 98       	cbi	0x0b, 3	; 11
	WDTPowerSave_RunAtSystemStart();
     588:	0e 94 15 02 	call	0x42a	; 0x42a <_Z29WDTPowerSave_RunAtSystemStartv>
	//cli();
	PowerReduction();
     58c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z14PowerReductionv>
	init(); //Starts timer for millis and micro and delay()
     590:	0e 94 8d 04 	call	0x91a	; 0x91a <init>
	delay(250);
     594:	6a ef       	ldi	r22, 0xFA	; 250
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
	
	
	serial.begin();
     5a0:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN6Serial5beginEv>
	uint16_t light = 0;
	uint8_t motionData = 0;
	serial.sendString("Boot Complete\r\n");
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Serial10sendStringEPKc>
	double Ftemp = 0.0;
	//cli();
	//SetWDT();
	DHT22_DATA_t sensor_values;
	configureMotionISR();
     5ac:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z18configureMotionISRv>
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f1 e1       	ldi	r31, 0x11	; 17
     5b4:	ef 2e       	mov	r14, r31
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	ff 2e       	mov	r15, r31
     5ba:	f0 2d       	mov	r31, r0
     5bc:	0e e2       	ldi	r16, 0x2E	; 46
     5be:	11 e0       	ldi	r17, 0x01	; 1
	DHT22_DATA_t sensor_values;
	configureMotionISR();
	//DHT22_ERROR_t error;
    for(;;)
	{		
		if(!justTriggeredByMotionISR)
     5c0:	80 91 2d 01 	lds	r24, 0x012D
     5c4:	81 11       	cpse	r24, r1
     5c6:	50 c0       	rjmp	.+160    	; 0x668 <main+0xf0>
		{ 
		 cli();
     5c8:	f8 94       	cli
		 readDHT22(&sensor_values);		 
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 08 01 	call	0x210	; 0x210 <readDHT22>
		 sei();
     5d2:	78 94       	sei
		 light = ADCsingleREAD(0);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z13ADCsingleREADh>
     5da:	d8 2e       	mov	r13, r24
     5dc:	c9 2e       	mov	r12, r25
		 motionData = ReadMotion();
     5de:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z10ReadMotionv>
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     5e2:	9c 01       	movw	r18, r24
     5e4:	33 27       	eor	r19, r19
     5e6:	3f 93       	push	r19
     5e8:	2f 93       	push	r18
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	6b 81       	ldd	r22, Y+3	; 0x03
     5f0:	7c 81       	ldd	r23, Y+4	; 0x04
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e2       	ldi	r20, 0x20	; 32
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	7f 93       	push	r23
     60c:	6f 93       	push	r22
		 cli();
		 readDHT22(&sensor_values);		 
		 sei();
		 light = ADCsingleREAD(0);
		 motionData = ReadMotion();
		 Ftemp = (((float)sensor_values.raw_temperature / 10.0) * 1.8) + 32;
     60e:	69 81       	ldd	r22, Y+1	; 0x01
     610:	7a 81       	ldd	r23, Y+2	; 0x02
     612:	88 27       	eor	r24, r24
     614:	77 fd       	sbrc	r23, 7
     616:	80 95       	com	r24
     618:	98 2f       	mov	r25, r24
     61a:	0e 94 69 05 	call	0xad2	; 0xad2 <__floatsisf>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e2       	ldi	r20, 0x20	; 32
     624:	51 e4       	ldi	r21, 0x41	; 65
     626:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
     62a:	26 e6       	ldi	r18, 0x66	; 102
     62c:	36 e6       	ldi	r19, 0x66	; 102
     62e:	46 ee       	ldi	r20, 0xE6	; 230
     630:	5f e3       	ldi	r21, 0x3F	; 63
     632:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	52 e4       	ldi	r21, 0x42	; 66
     63e:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
		 sprintf(buffer,"F:%.2f,H:%.2f,L:%d,M:%d\r\n", Ftemp,(double)sensor_values.raw_humidity / 10, light,motionData);
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	7f 93       	push	r23
     648:	6f 93       	push	r22
     64a:	ff 92       	push	r15
     64c:	ef 92       	push	r14
     64e:	1f 93       	push	r17
     650:	0f 93       	push	r16
     652:	0e 94 2a 0b 	call	0x1654	; 0x1654 <sprintf>
		 serial.sendString(buffer);
     656:	c8 01       	movw	r24, r16
     658:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN6Serial10sendStringEPKc>
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	02 c0       	rjmp	.+4      	; 0x66c <main+0xf4>
		}
		else
		{
			justTriggeredByMotionISR = 0;
     668:	10 92 2d 01 	sts	0x012D, r1
	wdt_enable(WDTO_8S);	
}

void Reset_WDT_Timer()
{
	wdt_reset();
     66c:	a8 95       	wdr
		}
		 Reset_WDT_Timer();
		 GotToSleepAndWaitForWork();
     66e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z24GotToSleepAndWaitForWorkv>
		 CheckMotion();
     672:	0e 94 90 02 	call	0x520	; 0x520 <_Z11CheckMotionv>
				
	}
     676:	a4 cf       	rjmp	.-184    	; 0x5c0 <main+0x48>

00000678 <_Z16add_charToBufferh>:

void add_charToBuffer(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     678:	40 91 4e 01 	lds	r20, 0x014E
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	4f 5f       	subi	r20, 0xFF	; 255
     680:	5f 4f       	sbci	r21, 0xFF	; 255
     682:	4f 77       	andi	r20, 0x7F	; 127
     684:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail );/* wait for free space in buffer */	
     686:	20 91 4d 01 	lds	r18, 0x014D
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	42 17       	cp	r20, r18
     68e:	53 07       	cpc	r21, r19
     690:	d1 f3       	breq	.-12     	; 0x686 <_Z16add_charToBufferh+0xe>

	TxBuf[tmphead] = data;
     692:	fa 01       	movw	r30, r20
     694:	e1 5b       	subi	r30, 0xB1	; 177
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
     69a:	40 93 4e 01 	sts	0x014E, r20

	/* enable UDRE interrupt */
	UCSRB    |= (1<<UDRIE0);
     69e:	e1 ec       	ldi	r30, 0xC1	; 193
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	80 62       	ori	r24, 0x20	; 32
     6a6:	80 83       	st	Z, r24
     6a8:	08 95       	ret

000006aa <_Z10uart0_putsPKc>:

} /* uart0_putc */
	
void uart0_puts(const char *s )
{
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
	while (*s) {
     6b0:	88 81       	ld	r24, Y
     6b2:	88 23       	and	r24, r24
     6b4:	31 f0       	breq	.+12     	; 0x6c2 <_Z10uart0_putsPKc+0x18>
     6b6:	21 96       	adiw	r28, 0x01	; 1
		add_charToBuffer(*s++);
     6b8:	0e 94 3c 03 	call	0x678	; 0x678 <_Z16add_charToBufferh>

} /* uart0_putc */
	
void uart0_puts(const char *s )
{
	while (*s) {
     6bc:	89 91       	ld	r24, Y+
     6be:	81 11       	cpse	r24, r1
     6c0:	fb cf       	rjmp	.-10     	; 0x6b8 <_Z10uart0_putsPKc+0xe>
		add_charToBuffer(*s++);
	}
} /* uart0_puts */
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <_Z15configureSerialv>:

void configureSerial()
{
	UBRRH = UBRRH_VALUE;
     6c8:	10 92 c5 00 	sts	0x00C5, r1
	UBRRL = UBRRL_VALUE;
     6cc:	80 e1       	ldi	r24, 0x10	; 16
     6ce:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSRA |= (1<<U2X);
     6d2:	e0 ec       	ldi	r30, 0xC0	; 192
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	82 60       	ori	r24, 0x02	; 2
     6da:	80 83       	st	Z, r24
     6dc:	08 95       	ret

000006de <_Z11startSerialv>:
	#endif	
}

void startSerial()
{
	UART_TxHead = 0;
     6de:	10 92 4e 01 	sts	0x014E, r1
	UART_TxTail = 0;
     6e2:	10 92 4d 01 	sts	0x014D, r1
	//UART_RxHead = 0;
	//UART_RxTail = 0;
	//Enables Both RX and TX
	UCSRB |= (1<<RXEN) | (1<<TXEN);
     6e6:	e1 ec       	ldi	r30, 0xC1	; 193
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	88 61       	ori	r24, 0x18	; 24
     6ee:	80 83       	st	Z, r24
	
	//Enables RX Complete Interupt
	UCSR0B |= (1<<RXCIE0);
     6f0:	80 81       	ld	r24, Z
     6f2:	80 68       	ori	r24, 0x80	; 128
     6f4:	80 83       	st	Z, r24
	sei();
     6f6:	78 94       	sei
     6f8:	08 95       	ret

000006fa <_ZN6Serial10sendStringEPKc>:

char *textBuf;
void Serial::sendString(const char *text)
{
	
	uart0_puts(text);
     6fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z10uart0_putsPKc>
	sei();
     6fe:	78 94       	sei

	UCSR0B |= (1<<UDRIE0);
     700:	e1 ec       	ldi	r30, 0xC1	; 193
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	80 62       	ori	r24, 0x20	; 32
     708:	80 83       	st	Z, r24
     70a:	08 95       	ret

0000070c <_ZN6Serial5beginEv>:



void Serial::begin()
{
	configureSerial();
     70c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z15configureSerialv>
	startSerial();
     710:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z11startSerialv>
     714:	08 95       	ret

00000716 <__vector_18>:

#define UART0_TRANSMIT_INTERRUPT USART_UDRE_vect


ISR(USART_RX_vect)
{
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
	

	uint8_t incomming;
	cli();
     738:	f8 94       	cli
	UCSRA &= ~(1<<RXC);
     73a:	e0 ec       	ldi	r30, 0xC0	; 192
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	8f 77       	andi	r24, 0x7F	; 127
     742:	80 83       	st	Z, r24
	
	incomming = UDR;
     744:	a6 ec       	ldi	r26, 0xC6	; 198
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	8c 91       	ld	r24, X
	UCSR0A &= ~(1<<RXC0);
     74a:	80 81       	ld	r24, Z
     74c:	8f 77       	andi	r24, 0x7F	; 127
     74e:	80 83       	st	Z, r24
	incomming = UDR0;
     750:	8c 91       	ld	r24, X


	add_charToBuffer(incomming);
     752:	0e 94 3c 03 	call	0x678	; 0x678 <_Z16add_charToBufferh>
	add_charToBuffer('\r');
     756:	8d e0       	ldi	r24, 0x0D	; 13
     758:	0e 94 3c 03 	call	0x678	; 0x678 <_Z16add_charToBufferh>
	sleep_disable();
     75c:	83 b7       	in	r24, 0x33	; 51
     75e:	8e 7f       	andi	r24, 0xFE	; 254
     760:	83 bf       	out	0x33, r24	; 51
	
	
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	uint16_t tmptail;

 	if ( UART_TxHead != UART_TxTail) {
     796:	90 91 4e 01 	lds	r25, 0x014E
     79a:	80 91 4d 01 	lds	r24, 0x014D
     79e:	98 17       	cp	r25, r24
     7a0:	79 f0       	breq	.+30     	; 0x7c0 <__vector_19+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
     7a2:	80 91 4d 01 	lds	r24, 0x014D
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	8f 77       	andi	r24, 0x7F	; 127
     7ac:	99 27       	eor	r25, r25
		UART_TxTail = tmptail;
     7ae:	80 93 4d 01 	sts	0x014D, r24
		/* get one byte from buffer and write it to UART */
		UDR = TxBuf[tmptail];  /* start transmission */
     7b2:	fc 01       	movw	r30, r24
     7b4:	e1 5b       	subi	r30, 0xB1	; 177
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	80 81       	ld	r24, Z
     7ba:	80 93 c6 00 	sts	0x00C6, r24
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <__vector_19+0x46>
		} else {
		/* tx buffer empty, disable UDRE interrupt */
		UCSRB &= ~(1<<UDRIE0);		
     7c0:	e1 ec       	ldi	r30, 0xC1	; 193
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	80 83       	st	Z, r24
	}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     7f2:	80 91 d0 01 	lds	r24, 0x01D0
     7f6:	90 91 d1 01 	lds	r25, 0x01D1
     7fa:	a0 91 d2 01 	lds	r26, 0x01D2
     7fe:	b0 91 d3 01 	lds	r27, 0x01D3
	unsigned char f = timer0_fract;
     802:	30 91 cf 01 	lds	r19, 0x01CF

	m += MILLIS_INC;
	f += FRACT_INC;
     806:	26 e0       	ldi	r18, 0x06	; 6
     808:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     80a:	2d 37       	cpi	r18, 0x7D	; 125
     80c:	20 f4       	brcc	.+8      	; 0x816 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     80e:	02 96       	adiw	r24, 0x02	; 2
     810:	a1 1d       	adc	r26, r1
     812:	b1 1d       	adc	r27, r1
     814:	05 c0       	rjmp	.+10     	; 0x820 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     816:	29 e8       	ldi	r18, 0x89	; 137
     818:	23 0f       	add	r18, r19
		m += 1;
     81a:	03 96       	adiw	r24, 0x03	; 3
     81c:	a1 1d       	adc	r26, r1
     81e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     820:	20 93 cf 01 	sts	0x01CF, r18
	timer0_millis = m;
     824:	80 93 d0 01 	sts	0x01D0, r24
     828:	90 93 d1 01 	sts	0x01D1, r25
     82c:	a0 93 d2 01 	sts	0x01D2, r26
     830:	b0 93 d3 01 	sts	0x01D3, r27
	timer0_overflow_count++;
     834:	80 91 d4 01 	lds	r24, 0x01D4
     838:	90 91 d5 01 	lds	r25, 0x01D5
     83c:	a0 91 d6 01 	lds	r26, 0x01D6
     840:	b0 91 d7 01 	lds	r27, 0x01D7
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	80 93 d4 01 	sts	0x01D4, r24
     84e:	90 93 d5 01 	sts	0x01D5, r25
     852:	a0 93 d6 01 	sts	0x01D6, r26
     856:	b0 93 d7 01 	sts	0x01D7, r27
}
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     870:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     872:	f8 94       	cli
	m = timer0_overflow_count;
     874:	80 91 d4 01 	lds	r24, 0x01D4
     878:	90 91 d5 01 	lds	r25, 0x01D5
     87c:	a0 91 d6 01 	lds	r26, 0x01D6
     880:	b0 91 d7 01 	lds	r27, 0x01D7
	#if defined(TCNT0)
	t = TCNT0;
     884:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     886:	a8 9b       	sbis	0x15, 0	; 21
     888:	02 c0       	rjmp	.+4      	; 0x88e <micros+0x1e>
     88a:	2f 3f       	cpi	r18, 0xFF	; 255
     88c:	c1 f4       	brne	.+48     	; 0x8be <micros+0x4e>
	#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
	m++;
	#endif

	SREG = oldSREG;
     88e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     890:	ba 2f       	mov	r27, r26
     892:	a9 2f       	mov	r26, r25
     894:	98 2f       	mov	r25, r24
     896:	88 27       	eor	r24, r24
     898:	82 0f       	add	r24, r18
     89a:	91 1d       	adc	r25, r1
     89c:	a1 1d       	adc	r26, r1
     89e:	b1 1d       	adc	r27, r1
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	aa 1f       	adc	r26, r26
     8a6:	bb 1f       	adc	r27, r27
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	aa 1f       	adc	r26, r26
     8ae:	bb 1f       	adc	r27, r27
     8b0:	bc 01       	movw	r22, r24
     8b2:	cd 01       	movw	r24, r26
     8b4:	66 0f       	add	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	88 1f       	adc	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	08 95       	ret
	#endif

	
	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
	m++;
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	a1 1d       	adc	r26, r1
     8c2:	b1 1d       	adc	r27, r1
     8c4:	e4 cf       	rjmp	.-56     	; 0x88e <micros+0x1e>

000008c6 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     8d6:	0e 94 38 04 	call	0x870	; 0x870 <micros>
     8da:	eb 01       	movw	r28, r22

	while (ms > 0) {
     8dc:	c1 14       	cp	r12, r1
     8de:	d1 04       	cpc	r13, r1
     8e0:	e1 04       	cpc	r14, r1
     8e2:	f1 04       	cpc	r15, r1
     8e4:	99 f0       	breq	.+38     	; 0x90c <__stack+0xd>
		if (((uint16_t)micros() - start) >= 1000) {
     8e6:	0e 94 38 04 	call	0x870	; 0x870 <micros>
     8ea:	6c 1b       	sub	r22, r28
     8ec:	7d 0b       	sbc	r23, r29
     8ee:	68 3e       	cpi	r22, 0xE8	; 232
     8f0:	73 40       	sbci	r23, 0x03	; 3
     8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
			ms--;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	c8 1a       	sub	r12, r24
     8f8:	d1 08       	sbc	r13, r1
     8fa:	e1 08       	sbc	r14, r1
     8fc:	f1 08       	sbc	r15, r1
			start += 1000;
     8fe:	c8 51       	subi	r28, 0x18	; 24
     900:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     902:	c1 14       	cp	r12, r1
     904:	d1 04       	cpc	r13, r1
     906:	e1 04       	cpc	r14, r1
     908:	f1 04       	cpc	r15, r1
     90a:	69 f7       	brne	.-38     	; 0x8e6 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     91a:	78 94       	sei
	
	///#if defined(__AVR_ATMEGA328P__) 
	//Setting up timer
	//328
	#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
     91c:	84 b5       	in	r24, 0x24	; 36
     91e:	83 60       	ori	r24, 0x03	; 3
     920:	84 bd       	out	0x24, r24	; 36
	//#if F_CPU==(16000000UL)
	TCCR0B |= (1<<CS01) | (1<<CS00);
     922:	85 b5       	in	r24, 0x25	; 37
     924:	83 60       	ori	r24, 0x03	; 3
     926:	85 bd       	out	0x25, r24	; 37
	//#elif F_CPU==(1000000UL)
	//TCCR0B |= (0<<CS01) | (1<<CS00);
	//#endif
	
	//Enabling Timer OVF Interupt
	TIMSK0 |= (1<< TOIE0);
     928:	ee e6       	ldi	r30, 0x6E	; 110
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	80 83       	st	Z, r24
     932:	08 95       	ret

00000934 <__subsf3>:
     934:	50 58       	subi	r21, 0x80	; 128

00000936 <__addsf3>:
     936:	bb 27       	eor	r27, r27
     938:	aa 27       	eor	r26, r26
     93a:	0e d0       	rcall	.+28     	; 0x958 <__addsf3x>
     93c:	1c c1       	rjmp	.+568    	; 0xb76 <__fp_round>
     93e:	0d d1       	rcall	.+538    	; 0xb5a <__fp_pscA>
     940:	30 f0       	brcs	.+12     	; 0x94e <__addsf3+0x18>
     942:	12 d1       	rcall	.+548    	; 0xb68 <__fp_pscB>
     944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x18>
     946:	31 f4       	brne	.+12     	; 0x954 <__addsf3+0x1e>
     948:	9f 3f       	cpi	r25, 0xFF	; 255
     94a:	11 f4       	brne	.+4      	; 0x950 <__addsf3+0x1a>
     94c:	1e f4       	brtc	.+6      	; 0x954 <__addsf3+0x1e>
     94e:	02 c1       	rjmp	.+516    	; 0xb54 <__fp_nan>
     950:	0e f4       	brtc	.+2      	; 0x954 <__addsf3+0x1e>
     952:	e0 95       	com	r30
     954:	e7 fb       	bst	r30, 7
     956:	f8 c0       	rjmp	.+496    	; 0xb48 <__fp_inf>

00000958 <__addsf3x>:
     958:	e9 2f       	mov	r30, r25
     95a:	1e d1       	rcall	.+572    	; 0xb98 <__fp_split3>
     95c:	80 f3       	brcs	.-32     	; 0x93e <__addsf3+0x8>
     95e:	ba 17       	cp	r27, r26
     960:	62 07       	cpc	r22, r18
     962:	73 07       	cpc	r23, r19
     964:	84 07       	cpc	r24, r20
     966:	95 07       	cpc	r25, r21
     968:	18 f0       	brcs	.+6      	; 0x970 <__addsf3x+0x18>
     96a:	71 f4       	brne	.+28     	; 0x988 <__addsf3x+0x30>
     96c:	9e f5       	brtc	.+102    	; 0x9d4 <__addsf3x+0x7c>
     96e:	36 c1       	rjmp	.+620    	; 0xbdc <__fp_zero>
     970:	0e f4       	brtc	.+2      	; 0x974 <__addsf3x+0x1c>
     972:	e0 95       	com	r30
     974:	0b 2e       	mov	r0, r27
     976:	ba 2f       	mov	r27, r26
     978:	a0 2d       	mov	r26, r0
     97a:	0b 01       	movw	r0, r22
     97c:	b9 01       	movw	r22, r18
     97e:	90 01       	movw	r18, r0
     980:	0c 01       	movw	r0, r24
     982:	ca 01       	movw	r24, r20
     984:	a0 01       	movw	r20, r0
     986:	11 24       	eor	r1, r1
     988:	ff 27       	eor	r31, r31
     98a:	59 1b       	sub	r21, r25
     98c:	99 f0       	breq	.+38     	; 0x9b4 <__addsf3x+0x5c>
     98e:	59 3f       	cpi	r21, 0xF9	; 249
     990:	50 f4       	brcc	.+20     	; 0x9a6 <__addsf3x+0x4e>
     992:	50 3e       	cpi	r21, 0xE0	; 224
     994:	68 f1       	brcs	.+90     	; 0x9f0 <__addsf3x+0x98>
     996:	1a 16       	cp	r1, r26
     998:	f0 40       	sbci	r31, 0x00	; 0
     99a:	a2 2f       	mov	r26, r18
     99c:	23 2f       	mov	r18, r19
     99e:	34 2f       	mov	r19, r20
     9a0:	44 27       	eor	r20, r20
     9a2:	58 5f       	subi	r21, 0xF8	; 248
     9a4:	f3 cf       	rjmp	.-26     	; 0x98c <__addsf3x+0x34>
     9a6:	46 95       	lsr	r20
     9a8:	37 95       	ror	r19
     9aa:	27 95       	ror	r18
     9ac:	a7 95       	ror	r26
     9ae:	f0 40       	sbci	r31, 0x00	; 0
     9b0:	53 95       	inc	r21
     9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__addsf3x+0x4e>
     9b4:	7e f4       	brtc	.+30     	; 0x9d4 <__addsf3x+0x7c>
     9b6:	1f 16       	cp	r1, r31
     9b8:	ba 0b       	sbc	r27, r26
     9ba:	62 0b       	sbc	r22, r18
     9bc:	73 0b       	sbc	r23, r19
     9be:	84 0b       	sbc	r24, r20
     9c0:	ba f0       	brmi	.+46     	; 0x9f0 <__addsf3x+0x98>
     9c2:	91 50       	subi	r25, 0x01	; 1
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <__addsf3x+0x96>
     9c6:	ff 0f       	add	r31, r31
     9c8:	bb 1f       	adc	r27, r27
     9ca:	66 1f       	adc	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	88 1f       	adc	r24, r24
     9d0:	c2 f7       	brpl	.-16     	; 0x9c2 <__addsf3x+0x6a>
     9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <__addsf3x+0x98>
     9d4:	ba 0f       	add	r27, r26
     9d6:	62 1f       	adc	r22, r18
     9d8:	73 1f       	adc	r23, r19
     9da:	84 1f       	adc	r24, r20
     9dc:	48 f4       	brcc	.+18     	; 0x9f0 <__addsf3x+0x98>
     9de:	87 95       	ror	r24
     9e0:	77 95       	ror	r23
     9e2:	67 95       	ror	r22
     9e4:	b7 95       	ror	r27
     9e6:	f7 95       	ror	r31
     9e8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <__addsf3x+0x96>
     9ec:	b3 cf       	rjmp	.-154    	; 0x954 <__addsf3+0x1e>
     9ee:	93 95       	inc	r25
     9f0:	88 0f       	add	r24, r24
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9e>
     9f4:	99 27       	eor	r25, r25
     9f6:	ee 0f       	add	r30, r30
     9f8:	97 95       	ror	r25
     9fa:	87 95       	ror	r24
     9fc:	08 95       	ret

000009fe <__divsf3>:
     9fe:	0c d0       	rcall	.+24     	; 0xa18 <__divsf3x>
     a00:	ba c0       	rjmp	.+372    	; 0xb76 <__fp_round>
     a02:	b2 d0       	rcall	.+356    	; 0xb68 <__fp_pscB>
     a04:	40 f0       	brcs	.+16     	; 0xa16 <__divsf3+0x18>
     a06:	a9 d0       	rcall	.+338    	; 0xb5a <__fp_pscA>
     a08:	30 f0       	brcs	.+12     	; 0xa16 <__divsf3+0x18>
     a0a:	21 f4       	brne	.+8      	; 0xa14 <__divsf3+0x16>
     a0c:	5f 3f       	cpi	r21, 0xFF	; 255
     a0e:	19 f0       	breq	.+6      	; 0xa16 <__divsf3+0x18>
     a10:	9b c0       	rjmp	.+310    	; 0xb48 <__fp_inf>
     a12:	51 11       	cpse	r21, r1
     a14:	e4 c0       	rjmp	.+456    	; 0xbde <__fp_szero>
     a16:	9e c0       	rjmp	.+316    	; 0xb54 <__fp_nan>

00000a18 <__divsf3x>:
     a18:	bf d0       	rcall	.+382    	; 0xb98 <__fp_split3>
     a1a:	98 f3       	brcs	.-26     	; 0xa02 <__divsf3+0x4>

00000a1c <__divsf3_pse>:
     a1c:	99 23       	and	r25, r25
     a1e:	c9 f3       	breq	.-14     	; 0xa12 <__divsf3+0x14>
     a20:	55 23       	and	r21, r21
     a22:	b1 f3       	breq	.-20     	; 0xa10 <__divsf3+0x12>
     a24:	95 1b       	sub	r25, r21
     a26:	55 0b       	sbc	r21, r21
     a28:	bb 27       	eor	r27, r27
     a2a:	aa 27       	eor	r26, r26
     a2c:	62 17       	cp	r22, r18
     a2e:	73 07       	cpc	r23, r19
     a30:	84 07       	cpc	r24, r20
     a32:	38 f0       	brcs	.+14     	; 0xa42 <__divsf3_pse+0x26>
     a34:	9f 5f       	subi	r25, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	44 1f       	adc	r20, r20
     a3e:	aa 1f       	adc	r26, r26
     a40:	a9 f3       	breq	.-22     	; 0xa2c <__divsf3_pse+0x10>
     a42:	33 d0       	rcall	.+102    	; 0xaaa <__divsf3_pse+0x8e>
     a44:	0e 2e       	mov	r0, r30
     a46:	3a f0       	brmi	.+14     	; 0xa56 <__divsf3_pse+0x3a>
     a48:	e0 e8       	ldi	r30, 0x80	; 128
     a4a:	30 d0       	rcall	.+96     	; 0xaac <__divsf3_pse+0x90>
     a4c:	91 50       	subi	r25, 0x01	; 1
     a4e:	50 40       	sbci	r21, 0x00	; 0
     a50:	e6 95       	lsr	r30
     a52:	00 1c       	adc	r0, r0
     a54:	ca f7       	brpl	.-14     	; 0xa48 <__divsf3_pse+0x2c>
     a56:	29 d0       	rcall	.+82     	; 0xaaa <__divsf3_pse+0x8e>
     a58:	fe 2f       	mov	r31, r30
     a5a:	27 d0       	rcall	.+78     	; 0xaaa <__divsf3_pse+0x8e>
     a5c:	66 0f       	add	r22, r22
     a5e:	77 1f       	adc	r23, r23
     a60:	88 1f       	adc	r24, r24
     a62:	bb 1f       	adc	r27, r27
     a64:	26 17       	cp	r18, r22
     a66:	37 07       	cpc	r19, r23
     a68:	48 07       	cpc	r20, r24
     a6a:	ab 07       	cpc	r26, r27
     a6c:	b0 e8       	ldi	r27, 0x80	; 128
     a6e:	09 f0       	breq	.+2      	; 0xa72 <__divsf3_pse+0x56>
     a70:	bb 0b       	sbc	r27, r27
     a72:	80 2d       	mov	r24, r0
     a74:	bf 01       	movw	r22, r30
     a76:	ff 27       	eor	r31, r31
     a78:	93 58       	subi	r25, 0x83	; 131
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	2a f0       	brmi	.+10     	; 0xa88 <__divsf3_pse+0x6c>
     a7e:	9e 3f       	cpi	r25, 0xFE	; 254
     a80:	51 05       	cpc	r21, r1
     a82:	68 f0       	brcs	.+26     	; 0xa9e <__divsf3_pse+0x82>
     a84:	61 c0       	rjmp	.+194    	; 0xb48 <__fp_inf>
     a86:	ab c0       	rjmp	.+342    	; 0xbde <__fp_szero>
     a88:	5f 3f       	cpi	r21, 0xFF	; 255
     a8a:	ec f3       	brlt	.-6      	; 0xa86 <__divsf3_pse+0x6a>
     a8c:	98 3e       	cpi	r25, 0xE8	; 232
     a8e:	dc f3       	brlt	.-10     	; 0xa86 <__divsf3_pse+0x6a>
     a90:	86 95       	lsr	r24
     a92:	77 95       	ror	r23
     a94:	67 95       	ror	r22
     a96:	b7 95       	ror	r27
     a98:	f7 95       	ror	r31
     a9a:	9f 5f       	subi	r25, 0xFF	; 255
     a9c:	c9 f7       	brne	.-14     	; 0xa90 <__divsf3_pse+0x74>
     a9e:	88 0f       	add	r24, r24
     aa0:	91 1d       	adc	r25, r1
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	97 f9       	bld	r25, 7
     aa8:	08 95       	ret
     aaa:	e1 e0       	ldi	r30, 0x01	; 1
     aac:	66 0f       	add	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	88 1f       	adc	r24, r24
     ab2:	bb 1f       	adc	r27, r27
     ab4:	62 17       	cp	r22, r18
     ab6:	73 07       	cpc	r23, r19
     ab8:	84 07       	cpc	r24, r20
     aba:	ba 07       	cpc	r27, r26
     abc:	20 f0       	brcs	.+8      	; 0xac6 <__divsf3_pse+0xaa>
     abe:	62 1b       	sub	r22, r18
     ac0:	73 0b       	sbc	r23, r19
     ac2:	84 0b       	sbc	r24, r20
     ac4:	ba 0b       	sbc	r27, r26
     ac6:	ee 1f       	adc	r30, r30
     ac8:	88 f7       	brcc	.-30     	; 0xaac <__divsf3_pse+0x90>
     aca:	e0 95       	com	r30
     acc:	08 95       	ret

00000ace <__floatunsisf>:
     ace:	e8 94       	clt
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__floatsisf+0x12>

00000ad2 <__floatsisf>:
     ad2:	97 fb       	bst	r25, 7
     ad4:	3e f4       	brtc	.+14     	; 0xae4 <__floatsisf+0x12>
     ad6:	90 95       	com	r25
     ad8:	80 95       	com	r24
     ada:	70 95       	com	r23
     adc:	61 95       	neg	r22
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	99 23       	and	r25, r25
     ae6:	a9 f0       	breq	.+42     	; 0xb12 <__floatsisf+0x40>
     ae8:	f9 2f       	mov	r31, r25
     aea:	96 e9       	ldi	r25, 0x96	; 150
     aec:	bb 27       	eor	r27, r27
     aee:	93 95       	inc	r25
     af0:	f6 95       	lsr	r31
     af2:	87 95       	ror	r24
     af4:	77 95       	ror	r23
     af6:	67 95       	ror	r22
     af8:	b7 95       	ror	r27
     afa:	f1 11       	cpse	r31, r1
     afc:	f8 cf       	rjmp	.-16     	; 0xaee <__floatsisf+0x1c>
     afe:	fa f4       	brpl	.+62     	; 0xb3e <__floatsisf+0x6c>
     b00:	bb 0f       	add	r27, r27
     b02:	11 f4       	brne	.+4      	; 0xb08 <__floatsisf+0x36>
     b04:	60 ff       	sbrs	r22, 0
     b06:	1b c0       	rjmp	.+54     	; 0xb3e <__floatsisf+0x6c>
     b08:	6f 5f       	subi	r22, 0xFF	; 255
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	8f 4f       	sbci	r24, 0xFF	; 255
     b0e:	9f 4f       	sbci	r25, 0xFF	; 255
     b10:	16 c0       	rjmp	.+44     	; 0xb3e <__floatsisf+0x6c>
     b12:	88 23       	and	r24, r24
     b14:	11 f0       	breq	.+4      	; 0xb1a <__floatsisf+0x48>
     b16:	96 e9       	ldi	r25, 0x96	; 150
     b18:	11 c0       	rjmp	.+34     	; 0xb3c <__floatsisf+0x6a>
     b1a:	77 23       	and	r23, r23
     b1c:	21 f0       	breq	.+8      	; 0xb26 <__floatsisf+0x54>
     b1e:	9e e8       	ldi	r25, 0x8E	; 142
     b20:	87 2f       	mov	r24, r23
     b22:	76 2f       	mov	r23, r22
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__floatsisf+0x5e>
     b26:	66 23       	and	r22, r22
     b28:	71 f0       	breq	.+28     	; 0xb46 <__floatsisf+0x74>
     b2a:	96 e8       	ldi	r25, 0x86	; 134
     b2c:	86 2f       	mov	r24, r22
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	2a f0       	brmi	.+10     	; 0xb3e <__floatsisf+0x6c>
     b34:	9a 95       	dec	r25
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	88 1f       	adc	r24, r24
     b3c:	da f7       	brpl	.-10     	; 0xb34 <__floatsisf+0x62>
     b3e:	88 0f       	add	r24, r24
     b40:	96 95       	lsr	r25
     b42:	87 95       	ror	r24
     b44:	97 f9       	bld	r25, 7
     b46:	08 95       	ret

00000b48 <__fp_inf>:
     b48:	97 f9       	bld	r25, 7
     b4a:	9f 67       	ori	r25, 0x7F	; 127
     b4c:	80 e8       	ldi	r24, 0x80	; 128
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	08 95       	ret

00000b54 <__fp_nan>:
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	80 ec       	ldi	r24, 0xC0	; 192
     b58:	08 95       	ret

00000b5a <__fp_pscA>:
     b5a:	00 24       	eor	r0, r0
     b5c:	0a 94       	dec	r0
     b5e:	16 16       	cp	r1, r22
     b60:	17 06       	cpc	r1, r23
     b62:	18 06       	cpc	r1, r24
     b64:	09 06       	cpc	r0, r25
     b66:	08 95       	ret

00000b68 <__fp_pscB>:
     b68:	00 24       	eor	r0, r0
     b6a:	0a 94       	dec	r0
     b6c:	12 16       	cp	r1, r18
     b6e:	13 06       	cpc	r1, r19
     b70:	14 06       	cpc	r1, r20
     b72:	05 06       	cpc	r0, r21
     b74:	08 95       	ret

00000b76 <__fp_round>:
     b76:	09 2e       	mov	r0, r25
     b78:	03 94       	inc	r0
     b7a:	00 0c       	add	r0, r0
     b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0xc>
     b7e:	88 23       	and	r24, r24
     b80:	52 f0       	brmi	.+20     	; 0xb96 <__fp_round+0x20>
     b82:	bb 0f       	add	r27, r27
     b84:	40 f4       	brcc	.+16     	; 0xb96 <__fp_round+0x20>
     b86:	bf 2b       	or	r27, r31
     b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0x18>
     b8a:	60 ff       	sbrs	r22, 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__fp_round+0x20>
     b8e:	6f 5f       	subi	r22, 0xFF	; 255
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	08 95       	ret

00000b98 <__fp_split3>:
     b98:	57 fd       	sbrc	r21, 7
     b9a:	90 58       	subi	r25, 0x80	; 128
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	59 f0       	breq	.+22     	; 0xbb8 <__fp_splitA+0x10>
     ba2:	5f 3f       	cpi	r21, 0xFF	; 255
     ba4:	71 f0       	breq	.+28     	; 0xbc2 <__fp_splitA+0x1a>
     ba6:	47 95       	ror	r20

00000ba8 <__fp_splitA>:
     ba8:	88 0f       	add	r24, r24
     baa:	97 fb       	bst	r25, 7
     bac:	99 1f       	adc	r25, r25
     bae:	61 f0       	breq	.+24     	; 0xbc8 <__fp_splitA+0x20>
     bb0:	9f 3f       	cpi	r25, 0xFF	; 255
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <__fp_splitA+0x2a>
     bb4:	87 95       	ror	r24
     bb6:	08 95       	ret
     bb8:	12 16       	cp	r1, r18
     bba:	13 06       	cpc	r1, r19
     bbc:	14 06       	cpc	r1, r20
     bbe:	55 1f       	adc	r21, r21
     bc0:	f2 cf       	rjmp	.-28     	; 0xba6 <__fp_split3+0xe>
     bc2:	46 95       	lsr	r20
     bc4:	f1 df       	rcall	.-30     	; 0xba8 <__fp_splitA>
     bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__fp_splitA+0x30>
     bc8:	16 16       	cp	r1, r22
     bca:	17 06       	cpc	r1, r23
     bcc:	18 06       	cpc	r1, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	f1 cf       	rjmp	.-30     	; 0xbb4 <__fp_splitA+0xc>
     bd2:	86 95       	lsr	r24
     bd4:	71 05       	cpc	r23, r1
     bd6:	61 05       	cpc	r22, r1
     bd8:	08 94       	sec
     bda:	08 95       	ret

00000bdc <__fp_zero>:
     bdc:	e8 94       	clt

00000bde <__fp_szero>:
     bde:	bb 27       	eor	r27, r27
     be0:	66 27       	eor	r22, r22
     be2:	77 27       	eor	r23, r23
     be4:	cb 01       	movw	r24, r22
     be6:	97 f9       	bld	r25, 7
     be8:	08 95       	ret

00000bea <__mulsf3>:
     bea:	0b d0       	rcall	.+22     	; 0xc02 <__mulsf3x>
     bec:	c4 cf       	rjmp	.-120    	; 0xb76 <__fp_round>
     bee:	b5 df       	rcall	.-150    	; 0xb5a <__fp_pscA>
     bf0:	28 f0       	brcs	.+10     	; 0xbfc <__mulsf3+0x12>
     bf2:	ba df       	rcall	.-140    	; 0xb68 <__fp_pscB>
     bf4:	18 f0       	brcs	.+6      	; 0xbfc <__mulsf3+0x12>
     bf6:	95 23       	and	r25, r21
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__mulsf3+0x12>
     bfa:	a6 cf       	rjmp	.-180    	; 0xb48 <__fp_inf>
     bfc:	ab cf       	rjmp	.-170    	; 0xb54 <__fp_nan>
     bfe:	11 24       	eor	r1, r1
     c00:	ee cf       	rjmp	.-36     	; 0xbde <__fp_szero>

00000c02 <__mulsf3x>:
     c02:	ca df       	rcall	.-108    	; 0xb98 <__fp_split3>
     c04:	a0 f3       	brcs	.-24     	; 0xbee <__mulsf3+0x4>

00000c06 <__mulsf3_pse>:
     c06:	95 9f       	mul	r25, r21
     c08:	d1 f3       	breq	.-12     	; 0xbfe <__mulsf3+0x14>
     c0a:	95 0f       	add	r25, r21
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	55 1f       	adc	r21, r21
     c10:	62 9f       	mul	r22, r18
     c12:	f0 01       	movw	r30, r0
     c14:	72 9f       	mul	r23, r18
     c16:	bb 27       	eor	r27, r27
     c18:	f0 0d       	add	r31, r0
     c1a:	b1 1d       	adc	r27, r1
     c1c:	63 9f       	mul	r22, r19
     c1e:	aa 27       	eor	r26, r26
     c20:	f0 0d       	add	r31, r0
     c22:	b1 1d       	adc	r27, r1
     c24:	aa 1f       	adc	r26, r26
     c26:	64 9f       	mul	r22, r20
     c28:	66 27       	eor	r22, r22
     c2a:	b0 0d       	add	r27, r0
     c2c:	a1 1d       	adc	r26, r1
     c2e:	66 1f       	adc	r22, r22
     c30:	82 9f       	mul	r24, r18
     c32:	22 27       	eor	r18, r18
     c34:	b0 0d       	add	r27, r0
     c36:	a1 1d       	adc	r26, r1
     c38:	62 1f       	adc	r22, r18
     c3a:	73 9f       	mul	r23, r19
     c3c:	b0 0d       	add	r27, r0
     c3e:	a1 1d       	adc	r26, r1
     c40:	62 1f       	adc	r22, r18
     c42:	83 9f       	mul	r24, r19
     c44:	a0 0d       	add	r26, r0
     c46:	61 1d       	adc	r22, r1
     c48:	22 1f       	adc	r18, r18
     c4a:	74 9f       	mul	r23, r20
     c4c:	33 27       	eor	r19, r19
     c4e:	a0 0d       	add	r26, r0
     c50:	61 1d       	adc	r22, r1
     c52:	23 1f       	adc	r18, r19
     c54:	84 9f       	mul	r24, r20
     c56:	60 0d       	add	r22, r0
     c58:	21 1d       	adc	r18, r1
     c5a:	82 2f       	mov	r24, r18
     c5c:	76 2f       	mov	r23, r22
     c5e:	6a 2f       	mov	r22, r26
     c60:	11 24       	eor	r1, r1
     c62:	9f 57       	subi	r25, 0x7F	; 127
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	8a f0       	brmi	.+34     	; 0xc8a <__mulsf3_pse+0x84>
     c68:	e1 f0       	breq	.+56     	; 0xca2 <__mulsf3_pse+0x9c>
     c6a:	88 23       	and	r24, r24
     c6c:	4a f0       	brmi	.+18     	; 0xc80 <__mulsf3_pse+0x7a>
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	bb 1f       	adc	r27, r27
     c74:	66 1f       	adc	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	88 1f       	adc	r24, r24
     c7a:	91 50       	subi	r25, 0x01	; 1
     c7c:	50 40       	sbci	r21, 0x00	; 0
     c7e:	a9 f7       	brne	.-22     	; 0xc6a <__mulsf3_pse+0x64>
     c80:	9e 3f       	cpi	r25, 0xFE	; 254
     c82:	51 05       	cpc	r21, r1
     c84:	70 f0       	brcs	.+28     	; 0xca2 <__mulsf3_pse+0x9c>
     c86:	60 cf       	rjmp	.-320    	; 0xb48 <__fp_inf>
     c88:	aa cf       	rjmp	.-172    	; 0xbde <__fp_szero>
     c8a:	5f 3f       	cpi	r21, 0xFF	; 255
     c8c:	ec f3       	brlt	.-6      	; 0xc88 <__mulsf3_pse+0x82>
     c8e:	98 3e       	cpi	r25, 0xE8	; 232
     c90:	dc f3       	brlt	.-10     	; 0xc88 <__mulsf3_pse+0x82>
     c92:	86 95       	lsr	r24
     c94:	77 95       	ror	r23
     c96:	67 95       	ror	r22
     c98:	b7 95       	ror	r27
     c9a:	f7 95       	ror	r31
     c9c:	e7 95       	ror	r30
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	c1 f7       	brne	.-16     	; 0xc92 <__mulsf3_pse+0x8c>
     ca2:	fe 2b       	or	r31, r30
     ca4:	88 0f       	add	r24, r24
     ca6:	91 1d       	adc	r25, r1
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	97 f9       	bld	r25, 7
     cae:	08 95       	ret

00000cb0 <vfprintf>:
     cb0:	a3 e1       	ldi	r26, 0x13	; 19
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ee e5       	ldi	r30, 0x5E	; 94
     cb6:	f6 e0       	ldi	r31, 0x06	; 6
     cb8:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__prologue_saves__>
     cbc:	7c 01       	movw	r14, r24
     cbe:	1b 01       	movw	r2, r22
     cc0:	6a 01       	movw	r12, r20
     cc2:	fc 01       	movw	r30, r24
     cc4:	17 82       	std	Z+7, r1	; 0x07
     cc6:	16 82       	std	Z+6, r1	; 0x06
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	81 ff       	sbrs	r24, 1
     ccc:	66 c3       	rjmp	.+1740   	; 0x139a <vfprintf+0x6ea>
     cce:	be 01       	movw	r22, r28
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	4b 01       	movw	r8, r22
     cd6:	f7 01       	movw	r30, r14
     cd8:	93 81       	ldd	r25, Z+3	; 0x03
     cda:	f1 01       	movw	r30, r2
     cdc:	93 fd       	sbrc	r25, 3
     cde:	85 91       	lpm	r24, Z+
     ce0:	93 ff       	sbrs	r25, 3
     ce2:	81 91       	ld	r24, Z+
     ce4:	1f 01       	movw	r2, r30
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <vfprintf+0x3c>
     cea:	53 c3       	rjmp	.+1702   	; 0x1392 <vfprintf+0x6e2>
     cec:	85 32       	cpi	r24, 0x25	; 37
     cee:	39 f4       	brne	.+14     	; 0xcfe <vfprintf+0x4e>
     cf0:	93 fd       	sbrc	r25, 3
     cf2:	85 91       	lpm	r24, Z+
     cf4:	93 ff       	sbrs	r25, 3
     cf6:	81 91       	ld	r24, Z+
     cf8:	1f 01       	movw	r2, r30
     cfa:	85 32       	cpi	r24, 0x25	; 37
     cfc:	39 f4       	brne	.+14     	; 0xd0c <vfprintf+0x5c>
     cfe:	b7 01       	movw	r22, r14
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     d06:	56 01       	movw	r10, r12
     d08:	65 01       	movw	r12, r10
     d0a:	e5 cf       	rjmp	.-54     	; 0xcd6 <vfprintf+0x26>
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	51 2c       	mov	r5, r1
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	20 32       	cpi	r18, 0x20	; 32
     d14:	a0 f4       	brcc	.+40     	; 0xd3e <vfprintf+0x8e>
     d16:	8b 32       	cpi	r24, 0x2B	; 43
     d18:	69 f0       	breq	.+26     	; 0xd34 <vfprintf+0x84>
     d1a:	30 f4       	brcc	.+12     	; 0xd28 <vfprintf+0x78>
     d1c:	80 32       	cpi	r24, 0x20	; 32
     d1e:	59 f0       	breq	.+22     	; 0xd36 <vfprintf+0x86>
     d20:	83 32       	cpi	r24, 0x23	; 35
     d22:	69 f4       	brne	.+26     	; 0xd3e <vfprintf+0x8e>
     d24:	20 61       	ori	r18, 0x10	; 16
     d26:	2c c0       	rjmp	.+88     	; 0xd80 <vfprintf+0xd0>
     d28:	8d 32       	cpi	r24, 0x2D	; 45
     d2a:	39 f0       	breq	.+14     	; 0xd3a <vfprintf+0x8a>
     d2c:	80 33       	cpi	r24, 0x30	; 48
     d2e:	39 f4       	brne	.+14     	; 0xd3e <vfprintf+0x8e>
     d30:	21 60       	ori	r18, 0x01	; 1
     d32:	26 c0       	rjmp	.+76     	; 0xd80 <vfprintf+0xd0>
     d34:	22 60       	ori	r18, 0x02	; 2
     d36:	24 60       	ori	r18, 0x04	; 4
     d38:	23 c0       	rjmp	.+70     	; 0xd80 <vfprintf+0xd0>
     d3a:	28 60       	ori	r18, 0x08	; 8
     d3c:	21 c0       	rjmp	.+66     	; 0xd80 <vfprintf+0xd0>
     d3e:	27 fd       	sbrc	r18, 7
     d40:	27 c0       	rjmp	.+78     	; 0xd90 <vfprintf+0xe0>
     d42:	30 ed       	ldi	r19, 0xD0	; 208
     d44:	38 0f       	add	r19, r24
     d46:	3a 30       	cpi	r19, 0x0A	; 10
     d48:	78 f4       	brcc	.+30     	; 0xd68 <vfprintf+0xb8>
     d4a:	26 ff       	sbrs	r18, 6
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0xaa>
     d4e:	fa e0       	ldi	r31, 0x0A	; 10
     d50:	1f 9f       	mul	r17, r31
     d52:	30 0d       	add	r19, r0
     d54:	11 24       	eor	r1, r1
     d56:	13 2f       	mov	r17, r19
     d58:	13 c0       	rjmp	.+38     	; 0xd80 <vfprintf+0xd0>
     d5a:	6a e0       	ldi	r22, 0x0A	; 10
     d5c:	56 9e       	mul	r5, r22
     d5e:	30 0d       	add	r19, r0
     d60:	11 24       	eor	r1, r1
     d62:	53 2e       	mov	r5, r19
     d64:	20 62       	ori	r18, 0x20	; 32
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <vfprintf+0xd0>
     d68:	8e 32       	cpi	r24, 0x2E	; 46
     d6a:	21 f4       	brne	.+8      	; 0xd74 <vfprintf+0xc4>
     d6c:	26 fd       	sbrc	r18, 6
     d6e:	11 c3       	rjmp	.+1570   	; 0x1392 <vfprintf+0x6e2>
     d70:	20 64       	ori	r18, 0x40	; 64
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <vfprintf+0xd0>
     d74:	8c 36       	cpi	r24, 0x6C	; 108
     d76:	11 f4       	brne	.+4      	; 0xd7c <vfprintf+0xcc>
     d78:	20 68       	ori	r18, 0x80	; 128
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0xd0>
     d7c:	88 36       	cpi	r24, 0x68	; 104
     d7e:	41 f4       	brne	.+16     	; 0xd90 <vfprintf+0xe0>
     d80:	f1 01       	movw	r30, r2
     d82:	93 fd       	sbrc	r25, 3
     d84:	85 91       	lpm	r24, Z+
     d86:	93 ff       	sbrs	r25, 3
     d88:	81 91       	ld	r24, Z+
     d8a:	1f 01       	movw	r2, r30
     d8c:	81 11       	cpse	r24, r1
     d8e:	c1 cf       	rjmp	.-126    	; 0xd12 <vfprintf+0x62>
     d90:	9b eb       	ldi	r25, 0xBB	; 187
     d92:	98 0f       	add	r25, r24
     d94:	93 30       	cpi	r25, 0x03	; 3
     d96:	18 f4       	brcc	.+6      	; 0xd9e <vfprintf+0xee>
     d98:	20 61       	ori	r18, 0x10	; 16
     d9a:	80 5e       	subi	r24, 0xE0	; 224
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0xfa>
     d9e:	9b e9       	ldi	r25, 0x9B	; 155
     da0:	98 0f       	add	r25, r24
     da2:	93 30       	cpi	r25, 0x03	; 3
     da4:	08 f0       	brcs	.+2      	; 0xda8 <vfprintf+0xf8>
     da6:	aa c1       	rjmp	.+852    	; 0x10fc <vfprintf+0x44c>
     da8:	2f 7e       	andi	r18, 0xEF	; 239
     daa:	26 ff       	sbrs	r18, 6
     dac:	16 e0       	ldi	r17, 0x06	; 6
     dae:	2f 73       	andi	r18, 0x3F	; 63
     db0:	72 2e       	mov	r7, r18
     db2:	85 36       	cpi	r24, 0x65	; 101
     db4:	21 f4       	brne	.+8      	; 0xdbe <vfprintf+0x10e>
     db6:	f2 2f       	mov	r31, r18
     db8:	f0 64       	ori	r31, 0x40	; 64
     dba:	7f 2e       	mov	r7, r31
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <vfprintf+0x11e>
     dbe:	86 36       	cpi	r24, 0x66	; 102
     dc0:	21 f4       	brne	.+8      	; 0xdca <vfprintf+0x11a>
     dc2:	62 2f       	mov	r22, r18
     dc4:	60 68       	ori	r22, 0x80	; 128
     dc6:	76 2e       	mov	r7, r22
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x11e>
     dca:	11 11       	cpse	r17, r1
     dcc:	11 50       	subi	r17, 0x01	; 1
     dce:	77 fe       	sbrs	r7, 7
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <vfprintf+0x130>
     dd2:	1c 33       	cpi	r17, 0x3C	; 60
     dd4:	48 f4       	brcc	.+18     	; 0xde8 <vfprintf+0x138>
     dd6:	44 24       	eor	r4, r4
     dd8:	43 94       	inc	r4
     dda:	41 0e       	add	r4, r17
     ddc:	27 e0       	ldi	r18, 0x07	; 7
     dde:	0b c0       	rjmp	.+22     	; 0xdf6 <vfprintf+0x146>
     de0:	18 30       	cpi	r17, 0x08	; 8
     de2:	30 f4       	brcc	.+12     	; 0xdf0 <vfprintf+0x140>
     de4:	21 2f       	mov	r18, r17
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x144>
     de8:	27 e0       	ldi	r18, 0x07	; 7
     dea:	4c e3       	ldi	r20, 0x3C	; 60
     dec:	44 2e       	mov	r4, r20
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <vfprintf+0x146>
     df0:	27 e0       	ldi	r18, 0x07	; 7
     df2:	17 e0       	ldi	r17, 0x07	; 7
     df4:	41 2c       	mov	r4, r1
     df6:	56 01       	movw	r10, r12
     df8:	74 e0       	ldi	r23, 0x04	; 4
     dfa:	a7 0e       	add	r10, r23
     dfc:	b1 1c       	adc	r11, r1
     dfe:	f6 01       	movw	r30, r12
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	04 2d       	mov	r16, r4
     e0a:	a4 01       	movw	r20, r8
     e0c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__ftoa_engine>
     e10:	6c 01       	movw	r12, r24
     e12:	09 81       	ldd	r16, Y+1	; 0x01
     e14:	00 ff       	sbrs	r16, 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x16c>
     e18:	03 ff       	sbrs	r16, 3
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <vfprintf+0x178>
     e1c:	71 fc       	sbrc	r7, 1
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <vfprintf+0x17e>
     e20:	72 fc       	sbrc	r7, 2
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <vfprintf+0x184>
     e24:	61 2c       	mov	r6, r1
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <vfprintf+0x188>
     e28:	3d e2       	ldi	r19, 0x2D	; 45
     e2a:	63 2e       	mov	r6, r19
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <vfprintf+0x188>
     e2e:	2b e2       	ldi	r18, 0x2B	; 43
     e30:	62 2e       	mov	r6, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x188>
     e34:	90 e2       	ldi	r25, 0x20	; 32
     e36:	69 2e       	mov	r6, r25
     e38:	80 2f       	mov	r24, r16
     e3a:	8c 70       	andi	r24, 0x0C	; 12
     e3c:	99 f1       	breq	.+102    	; 0xea4 <vfprintf+0x1f4>
     e3e:	66 20       	and	r6, r6
     e40:	11 f0       	breq	.+4      	; 0xe46 <vfprintf+0x196>
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <vfprintf+0x198>
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	85 15       	cp	r24, r5
     e4a:	10 f0       	brcs	.+4      	; 0xe50 <vfprintf+0x1a0>
     e4c:	51 2c       	mov	r5, r1
     e4e:	0b c0       	rjmp	.+22     	; 0xe66 <vfprintf+0x1b6>
     e50:	58 1a       	sub	r5, r24
     e52:	73 fc       	sbrc	r7, 3
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <vfprintf+0x1b6>
     e56:	b7 01       	movw	r22, r14
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     e60:	5a 94       	dec	r5
     e62:	c9 f7       	brne	.-14     	; 0xe56 <vfprintf+0x1a6>
     e64:	f3 cf       	rjmp	.-26     	; 0xe4c <vfprintf+0x19c>
     e66:	66 20       	and	r6, r6
     e68:	29 f0       	breq	.+10     	; 0xe74 <vfprintf+0x1c4>
     e6a:	b7 01       	movw	r22, r14
     e6c:	86 2d       	mov	r24, r6
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     e74:	03 fd       	sbrc	r16, 3
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <vfprintf+0x1ce>
     e78:	0c e6       	ldi	r16, 0x6C	; 108
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x1d2>
     e7e:	08 e6       	ldi	r16, 0x68	; 104
     e80:	10 e0       	ldi	r17, 0x00	; 0
     e82:	f7 2d       	mov	r31, r7
     e84:	f0 71       	andi	r31, 0x10	; 16
     e86:	7f 2e       	mov	r7, r31
     e88:	f8 01       	movw	r30, r16
     e8a:	84 91       	lpm	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	09 f4       	brne	.+2      	; 0xe92 <vfprintf+0x1e2>
     e90:	76 c2       	rjmp	.+1260   	; 0x137e <vfprintf+0x6ce>
     e92:	71 10       	cpse	r7, r1
     e94:	80 52       	subi	r24, 0x20	; 32
     e96:	b7 01       	movw	r22, r14
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     e9e:	0f 5f       	subi	r16, 0xFF	; 255
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	f2 cf       	rjmp	.-28     	; 0xe88 <vfprintf+0x1d8>
     ea4:	77 fe       	sbrs	r7, 7
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <vfprintf+0x216>
     ea8:	4c 0c       	add	r4, r12
     eaa:	04 ff       	sbrs	r16, 4
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <vfprintf+0x206>
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	81 33       	cpi	r24, 0x31	; 49
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <vfprintf+0x206>
     eb4:	4a 94       	dec	r4
     eb6:	14 14       	cp	r1, r4
     eb8:	74 f5       	brge	.+92     	; 0xf16 <vfprintf+0x266>
     eba:	f8 e0       	ldi	r31, 0x08	; 8
     ebc:	f4 15       	cp	r31, r4
     ebe:	78 f5       	brcc	.+94     	; 0xf1e <vfprintf+0x26e>
     ec0:	88 e0       	ldi	r24, 0x08	; 8
     ec2:	48 2e       	mov	r4, r24
     ec4:	2c c0       	rjmp	.+88     	; 0xf1e <vfprintf+0x26e>
     ec6:	76 fc       	sbrc	r7, 6
     ec8:	2a c0       	rjmp	.+84     	; 0xf1e <vfprintf+0x26e>
     eca:	81 2f       	mov	r24, r17
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	8c 15       	cp	r24, r12
     ed0:	9d 05       	cpc	r25, r13
     ed2:	9c f0       	brlt	.+38     	; 0xefa <vfprintf+0x24a>
     ed4:	6c ef       	ldi	r22, 0xFC	; 252
     ed6:	c6 16       	cp	r12, r22
     ed8:	6f ef       	ldi	r22, 0xFF	; 255
     eda:	d6 06       	cpc	r13, r22
     edc:	74 f0       	brlt	.+28     	; 0xefa <vfprintf+0x24a>
     ede:	77 2d       	mov	r23, r7
     ee0:	70 68       	ori	r23, 0x80	; 128
     ee2:	77 2e       	mov	r7, r23
     ee4:	0a c0       	rjmp	.+20     	; 0xefa <vfprintf+0x24a>
     ee6:	e2 e0       	ldi	r30, 0x02	; 2
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	ec 0f       	add	r30, r28
     eec:	fd 1f       	adc	r31, r29
     eee:	e1 0f       	add	r30, r17
     ef0:	f1 1d       	adc	r31, r1
     ef2:	80 81       	ld	r24, Z
     ef4:	80 33       	cpi	r24, 0x30	; 48
     ef6:	19 f4       	brne	.+6      	; 0xefe <vfprintf+0x24e>
     ef8:	11 50       	subi	r17, 0x01	; 1
     efa:	11 11       	cpse	r17, r1
     efc:	f4 cf       	rjmp	.-24     	; 0xee6 <vfprintf+0x236>
     efe:	77 fe       	sbrs	r7, 7
     f00:	0e c0       	rjmp	.+28     	; 0xf1e <vfprintf+0x26e>
     f02:	44 24       	eor	r4, r4
     f04:	43 94       	inc	r4
     f06:	41 0e       	add	r4, r17
     f08:	81 2f       	mov	r24, r17
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	c8 16       	cp	r12, r24
     f0e:	d9 06       	cpc	r13, r25
     f10:	2c f4       	brge	.+10     	; 0xf1c <vfprintf+0x26c>
     f12:	1c 19       	sub	r17, r12
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <vfprintf+0x26e>
     f16:	44 24       	eor	r4, r4
     f18:	43 94       	inc	r4
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x26e>
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	77 fe       	sbrs	r7, 7
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <vfprintf+0x280>
     f22:	1c 14       	cp	r1, r12
     f24:	1d 04       	cpc	r1, r13
     f26:	3c f4       	brge	.+14     	; 0xf36 <vfprintf+0x286>
     f28:	96 01       	movw	r18, r12
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <vfprintf+0x28a>
     f30:	25 e0       	ldi	r18, 0x05	; 5
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x28a>
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	66 20       	and	r6, r6
     f3c:	11 f0       	breq	.+4      	; 0xf42 <vfprintf+0x292>
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	11 23       	and	r17, r17
     f44:	31 f0       	breq	.+12     	; 0xf52 <vfprintf+0x2a2>
     f46:	41 2f       	mov	r20, r17
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	4f 5f       	subi	r20, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	24 0f       	add	r18, r20
     f50:	35 1f       	adc	r19, r21
     f52:	45 2d       	mov	r20, r5
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	24 17       	cp	r18, r20
     f58:	35 07       	cpc	r19, r21
     f5a:	14 f4       	brge	.+4      	; 0xf60 <vfprintf+0x2b0>
     f5c:	52 1a       	sub	r5, r18
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <vfprintf+0x2b2>
     f60:	51 2c       	mov	r5, r1
     f62:	87 2d       	mov	r24, r7
     f64:	89 70       	andi	r24, 0x09	; 9
     f66:	49 f4       	brne	.+18     	; 0xf7a <vfprintf+0x2ca>
     f68:	55 20       	and	r5, r5
     f6a:	39 f0       	breq	.+14     	; 0xf7a <vfprintf+0x2ca>
     f6c:	b7 01       	movw	r22, r14
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     f76:	5a 94       	dec	r5
     f78:	f7 cf       	rjmp	.-18     	; 0xf68 <vfprintf+0x2b8>
     f7a:	66 20       	and	r6, r6
     f7c:	29 f0       	breq	.+10     	; 0xf88 <vfprintf+0x2d8>
     f7e:	b7 01       	movw	r22, r14
     f80:	86 2d       	mov	r24, r6
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     f88:	73 fc       	sbrc	r7, 3
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <vfprintf+0x2ee>
     f8c:	55 20       	and	r5, r5
     f8e:	39 f0       	breq	.+14     	; 0xf9e <vfprintf+0x2ee>
     f90:	b7 01       	movw	r22, r14
     f92:	80 e3       	ldi	r24, 0x30	; 48
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     f9a:	5a 94       	dec	r5
     f9c:	f7 cf       	rjmp	.-18     	; 0xf8c <vfprintf+0x2dc>
     f9e:	77 fe       	sbrs	r7, 7
     fa0:	5f c0       	rjmp	.+190    	; 0x1060 <vfprintf+0x3b0>
     fa2:	9c 2d       	mov	r25, r12
     fa4:	8d 2d       	mov	r24, r13
     fa6:	d7 fe       	sbrs	r13, 7
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x2fe>
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	69 2e       	mov	r6, r25
     fb0:	78 2e       	mov	r7, r24
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	c6 01       	movw	r24, r12
     fb8:	84 19       	sub	r24, r4
     fba:	91 09       	sbc	r25, r1
     fbc:	9d 87       	std	Y+13, r25	; 0x0d
     fbe:	8c 87       	std	Y+12, r24	; 0x0c
     fc0:	96 01       	movw	r18, r12
     fc2:	26 19       	sub	r18, r6
     fc4:	37 09       	sbc	r19, r7
     fc6:	28 0d       	add	r18, r8
     fc8:	39 1d       	adc	r19, r9
     fca:	81 2f       	mov	r24, r17
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	ee 27       	eor	r30, r30
     fd0:	ff 27       	eor	r31, r31
     fd2:	e8 1b       	sub	r30, r24
     fd4:	f9 0b       	sbc	r31, r25
     fd6:	ff 87       	std	Y+15, r31	; 0x0f
     fd8:	ee 87       	std	Y+14, r30	; 0x0e
     fda:	ff ef       	ldi	r31, 0xFF	; 255
     fdc:	6f 16       	cp	r6, r31
     fde:	7f 06       	cpc	r7, r31
     fe0:	69 f4       	brne	.+26     	; 0xffc <vfprintf+0x34c>
     fe2:	b7 01       	movw	r22, r14
     fe4:	8e e2       	ldi	r24, 0x2E	; 46
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	2b 8b       	std	Y+19, r18	; 0x13
     fea:	3a 8b       	std	Y+18, r19	; 0x12
     fec:	48 8b       	std	Y+16, r20	; 0x10
     fee:	59 8b       	std	Y+17, r21	; 0x11
     ff0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
     ff4:	59 89       	ldd	r21, Y+17	; 0x11
     ff6:	48 89       	ldd	r20, Y+16	; 0x10
     ff8:	3a 89       	ldd	r19, Y+18	; 0x12
     ffa:	2b 89       	ldd	r18, Y+19	; 0x13
     ffc:	c6 14       	cp	r12, r6
     ffe:	d7 04       	cpc	r13, r7
    1000:	54 f0       	brlt	.+20     	; 0x1016 <vfprintf+0x366>
    1002:	6c 85       	ldd	r22, Y+12	; 0x0c
    1004:	7d 85       	ldd	r23, Y+13	; 0x0d
    1006:	66 15       	cp	r22, r6
    1008:	77 05       	cpc	r23, r7
    100a:	2c f4       	brge	.+10     	; 0x1016 <vfprintf+0x366>
    100c:	f9 01       	movw	r30, r18
    100e:	e4 0f       	add	r30, r20
    1010:	f5 1f       	adc	r31, r21
    1012:	81 81       	ldd	r24, Z+1	; 0x01
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <vfprintf+0x368>
    1016:	80 e3       	ldi	r24, 0x30	; 48
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	67 1a       	sub	r6, r23
    101c:	71 08       	sbc	r7, r1
    101e:	4f 5f       	subi	r20, 0xFF	; 255
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	ee 85       	ldd	r30, Y+14	; 0x0e
    1024:	ff 85       	ldd	r31, Y+15	; 0x0f
    1026:	6e 16       	cp	r6, r30
    1028:	7f 06       	cpc	r7, r31
    102a:	6c f0       	brlt	.+26     	; 0x1046 <vfprintf+0x396>
    102c:	b7 01       	movw	r22, r14
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	2b 8b       	std	Y+19, r18	; 0x13
    1032:	3a 8b       	std	Y+18, r19	; 0x12
    1034:	48 8b       	std	Y+16, r20	; 0x10
    1036:	59 8b       	std	Y+17, r21	; 0x11
    1038:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    103c:	2b 89       	ldd	r18, Y+19	; 0x13
    103e:	3a 89       	ldd	r19, Y+18	; 0x12
    1040:	48 89       	ldd	r20, Y+16	; 0x10
    1042:	59 89       	ldd	r21, Y+17	; 0x11
    1044:	ca cf       	rjmp	.-108    	; 0xfda <vfprintf+0x32a>
    1046:	6c 14       	cp	r6, r12
    1048:	7d 04       	cpc	r7, r13
    104a:	39 f4       	brne	.+14     	; 0x105a <vfprintf+0x3aa>
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	96 33       	cpi	r25, 0x36	; 54
    1050:	18 f4       	brcc	.+6      	; 0x1058 <vfprintf+0x3a8>
    1052:	95 33       	cpi	r25, 0x35	; 53
    1054:	11 f4       	brne	.+4      	; 0x105a <vfprintf+0x3aa>
    1056:	04 ff       	sbrs	r16, 4
    1058:	81 e3       	ldi	r24, 0x31	; 49
    105a:	b7 01       	movw	r22, r14
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	4b c0       	rjmp	.+150    	; 0x10f6 <vfprintf+0x446>
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	81 33       	cpi	r24, 0x31	; 49
    1064:	09 f0       	breq	.+2      	; 0x1068 <vfprintf+0x3b8>
    1066:	0f 7e       	andi	r16, 0xEF	; 239
    1068:	b7 01       	movw	r22, r14
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1070:	11 11       	cpse	r17, r1
    1072:	05 c0       	rjmp	.+10     	; 0x107e <vfprintf+0x3ce>
    1074:	74 fe       	sbrs	r7, 4
    1076:	18 c0       	rjmp	.+48     	; 0x10a8 <vfprintf+0x3f8>
    1078:	85 e4       	ldi	r24, 0x45	; 69
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	17 c0       	rjmp	.+46     	; 0x10ac <vfprintf+0x3fc>
    107e:	b7 01       	movw	r22, r14
    1080:	8e e2       	ldi	r24, 0x2E	; 46
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	66 24       	eor	r6, r6
    108c:	63 94       	inc	r6
    108e:	68 0e       	add	r6, r24
    1090:	f4 01       	movw	r30, r8
    1092:	e8 0f       	add	r30, r24
    1094:	f1 1d       	adc	r31, r1
    1096:	80 81       	ld	r24, Z
    1098:	b7 01       	movw	r22, r14
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    10a0:	11 50       	subi	r17, 0x01	; 1
    10a2:	41 f3       	breq	.-48     	; 0x1074 <vfprintf+0x3c4>
    10a4:	86 2d       	mov	r24, r6
    10a6:	f1 cf       	rjmp	.-30     	; 0x108a <vfprintf+0x3da>
    10a8:	85 e6       	ldi	r24, 0x65	; 101
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	b7 01       	movw	r22, r14
    10ae:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    10b2:	d7 fc       	sbrc	r13, 7
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfprintf+0x410>
    10b6:	c1 14       	cp	r12, r1
    10b8:	d1 04       	cpc	r13, r1
    10ba:	39 f4       	brne	.+14     	; 0x10ca <vfprintf+0x41a>
    10bc:	04 ff       	sbrs	r16, 4
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <vfprintf+0x41a>
    10c0:	d1 94       	neg	r13
    10c2:	c1 94       	neg	r12
    10c4:	d1 08       	sbc	r13, r1
    10c6:	8d e2       	ldi	r24, 0x2D	; 45
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <vfprintf+0x41c>
    10ca:	8b e2       	ldi	r24, 0x2B	; 43
    10cc:	b7 01       	movw	r22, r14
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    10d4:	80 e3       	ldi	r24, 0x30	; 48
    10d6:	6a e0       	ldi	r22, 0x0A	; 10
    10d8:	c6 16       	cp	r12, r22
    10da:	d1 04       	cpc	r13, r1
    10dc:	2c f0       	brlt	.+10     	; 0x10e8 <vfprintf+0x438>
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	fa e0       	ldi	r31, 0x0A	; 10
    10e2:	cf 1a       	sub	r12, r31
    10e4:	d1 08       	sbc	r13, r1
    10e6:	f7 cf       	rjmp	.-18     	; 0x10d6 <vfprintf+0x426>
    10e8:	b7 01       	movw	r22, r14
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    10f0:	b7 01       	movw	r22, r14
    10f2:	c6 01       	movw	r24, r12
    10f4:	c0 96       	adiw	r24, 0x30	; 48
    10f6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    10fa:	41 c1       	rjmp	.+642    	; 0x137e <vfprintf+0x6ce>
    10fc:	83 36       	cpi	r24, 0x63	; 99
    10fe:	31 f0       	breq	.+12     	; 0x110c <vfprintf+0x45c>
    1100:	83 37       	cpi	r24, 0x73	; 115
    1102:	79 f0       	breq	.+30     	; 0x1122 <vfprintf+0x472>
    1104:	83 35       	cpi	r24, 0x53	; 83
    1106:	09 f0       	breq	.+2      	; 0x110a <vfprintf+0x45a>
    1108:	58 c0       	rjmp	.+176    	; 0x11ba <vfprintf+0x50a>
    110a:	21 c0       	rjmp	.+66     	; 0x114e <vfprintf+0x49e>
    110c:	56 01       	movw	r10, r12
    110e:	72 e0       	ldi	r23, 0x02	; 2
    1110:	a7 0e       	add	r10, r23
    1112:	b1 1c       	adc	r11, r1
    1114:	f6 01       	movw	r30, r12
    1116:	80 81       	ld	r24, Z
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	01 e0       	ldi	r16, 0x01	; 1
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	64 01       	movw	r12, r8
    1120:	14 c0       	rjmp	.+40     	; 0x114a <vfprintf+0x49a>
    1122:	56 01       	movw	r10, r12
    1124:	f2 e0       	ldi	r31, 0x02	; 2
    1126:	af 0e       	add	r10, r31
    1128:	b1 1c       	adc	r11, r1
    112a:	f6 01       	movw	r30, r12
    112c:	c0 80       	ld	r12, Z
    112e:	d1 80       	ldd	r13, Z+1	; 0x01
    1130:	26 ff       	sbrs	r18, 6
    1132:	03 c0       	rjmp	.+6      	; 0x113a <vfprintf+0x48a>
    1134:	61 2f       	mov	r22, r17
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <vfprintf+0x48e>
    113a:	6f ef       	ldi	r22, 0xFF	; 255
    113c:	7f ef       	ldi	r23, 0xFF	; 255
    113e:	c6 01       	movw	r24, r12
    1140:	2b 8b       	std	Y+19, r18	; 0x13
    1142:	0e 94 ed 0a 	call	0x15da	; 0x15da <strnlen>
    1146:	8c 01       	movw	r16, r24
    1148:	2b 89       	ldd	r18, Y+19	; 0x13
    114a:	2f 77       	andi	r18, 0x7F	; 127
    114c:	15 c0       	rjmp	.+42     	; 0x1178 <vfprintf+0x4c8>
    114e:	56 01       	movw	r10, r12
    1150:	f2 e0       	ldi	r31, 0x02	; 2
    1152:	af 0e       	add	r10, r31
    1154:	b1 1c       	adc	r11, r1
    1156:	f6 01       	movw	r30, r12
    1158:	c0 80       	ld	r12, Z
    115a:	d1 80       	ldd	r13, Z+1	; 0x01
    115c:	26 ff       	sbrs	r18, 6
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <vfprintf+0x4b6>
    1160:	61 2f       	mov	r22, r17
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <vfprintf+0x4ba>
    1166:	6f ef       	ldi	r22, 0xFF	; 255
    1168:	7f ef       	ldi	r23, 0xFF	; 255
    116a:	c6 01       	movw	r24, r12
    116c:	2b 8b       	std	Y+19, r18	; 0x13
    116e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <strnlen_P>
    1172:	8c 01       	movw	r16, r24
    1174:	2b 89       	ldd	r18, Y+19	; 0x13
    1176:	20 68       	ori	r18, 0x80	; 128
    1178:	72 2e       	mov	r7, r18
    117a:	23 fd       	sbrc	r18, 3
    117c:	1a c0       	rjmp	.+52     	; 0x11b2 <vfprintf+0x502>
    117e:	85 2d       	mov	r24, r5
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	08 17       	cp	r16, r24
    1184:	19 07       	cpc	r17, r25
    1186:	a8 f4       	brcc	.+42     	; 0x11b2 <vfprintf+0x502>
    1188:	b7 01       	movw	r22, r14
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1192:	5a 94       	dec	r5
    1194:	f4 cf       	rjmp	.-24     	; 0x117e <vfprintf+0x4ce>
    1196:	f6 01       	movw	r30, r12
    1198:	77 fc       	sbrc	r7, 7
    119a:	85 91       	lpm	r24, Z+
    119c:	77 fe       	sbrs	r7, 7
    119e:	81 91       	ld	r24, Z+
    11a0:	6f 01       	movw	r12, r30
    11a2:	b7 01       	movw	r22, r14
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    11aa:	51 10       	cpse	r5, r1
    11ac:	5a 94       	dec	r5
    11ae:	01 50       	subi	r16, 0x01	; 1
    11b0:	11 09       	sbc	r17, r1
    11b2:	01 15       	cp	r16, r1
    11b4:	11 05       	cpc	r17, r1
    11b6:	79 f7       	brne	.-34     	; 0x1196 <vfprintf+0x4e6>
    11b8:	e2 c0       	rjmp	.+452    	; 0x137e <vfprintf+0x6ce>
    11ba:	84 36       	cpi	r24, 0x64	; 100
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <vfprintf+0x512>
    11be:	89 36       	cpi	r24, 0x69	; 105
    11c0:	51 f5       	brne	.+84     	; 0x1216 <vfprintf+0x566>
    11c2:	56 01       	movw	r10, r12
    11c4:	27 ff       	sbrs	r18, 7
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <vfprintf+0x52a>
    11c8:	f4 e0       	ldi	r31, 0x04	; 4
    11ca:	af 0e       	add	r10, r31
    11cc:	b1 1c       	adc	r11, r1
    11ce:	f6 01       	movw	r30, r12
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <vfprintf+0x53e>
    11da:	f2 e0       	ldi	r31, 0x02	; 2
    11dc:	af 0e       	add	r10, r31
    11de:	b1 1c       	adc	r11, r1
    11e0:	f6 01       	movw	r30, r12
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	88 27       	eor	r24, r24
    11e8:	77 fd       	sbrc	r23, 7
    11ea:	80 95       	com	r24
    11ec:	98 2f       	mov	r25, r24
    11ee:	02 2f       	mov	r16, r18
    11f0:	0f 76       	andi	r16, 0x6F	; 111
    11f2:	97 ff       	sbrs	r25, 7
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <vfprintf+0x556>
    11f6:	90 95       	com	r25
    11f8:	80 95       	com	r24
    11fa:	70 95       	com	r23
    11fc:	61 95       	neg	r22
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8f 4f       	sbci	r24, 0xFF	; 255
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	00 68       	ori	r16, 0x80	; 128
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	a4 01       	movw	r20, r8
    120c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    1210:	c8 2e       	mov	r12, r24
    1212:	c8 18       	sub	r12, r8
    1214:	3e c0       	rjmp	.+124    	; 0x1292 <vfprintf+0x5e2>
    1216:	02 2f       	mov	r16, r18
    1218:	85 37       	cpi	r24, 0x75	; 117
    121a:	21 f4       	brne	.+8      	; 0x1224 <vfprintf+0x574>
    121c:	0f 7e       	andi	r16, 0xEF	; 239
    121e:	2a e0       	ldi	r18, 0x0A	; 10
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	1d c0       	rjmp	.+58     	; 0x125e <vfprintf+0x5ae>
    1224:	09 7f       	andi	r16, 0xF9	; 249
    1226:	8f 36       	cpi	r24, 0x6F	; 111
    1228:	91 f0       	breq	.+36     	; 0x124e <vfprintf+0x59e>
    122a:	18 f4       	brcc	.+6      	; 0x1232 <vfprintf+0x582>
    122c:	88 35       	cpi	r24, 0x58	; 88
    122e:	59 f0       	breq	.+22     	; 0x1246 <vfprintf+0x596>
    1230:	b0 c0       	rjmp	.+352    	; 0x1392 <vfprintf+0x6e2>
    1232:	80 37       	cpi	r24, 0x70	; 112
    1234:	19 f0       	breq	.+6      	; 0x123c <vfprintf+0x58c>
    1236:	88 37       	cpi	r24, 0x78	; 120
    1238:	11 f0       	breq	.+4      	; 0x123e <vfprintf+0x58e>
    123a:	ab c0       	rjmp	.+342    	; 0x1392 <vfprintf+0x6e2>
    123c:	00 61       	ori	r16, 0x10	; 16
    123e:	04 ff       	sbrs	r16, 4
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <vfprintf+0x5a4>
    1242:	04 60       	ori	r16, 0x04	; 4
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <vfprintf+0x5a4>
    1246:	24 ff       	sbrs	r18, 4
    1248:	08 c0       	rjmp	.+16     	; 0x125a <vfprintf+0x5aa>
    124a:	06 60       	ori	r16, 0x06	; 6
    124c:	06 c0       	rjmp	.+12     	; 0x125a <vfprintf+0x5aa>
    124e:	28 e0       	ldi	r18, 0x08	; 8
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	05 c0       	rjmp	.+10     	; 0x125e <vfprintf+0x5ae>
    1254:	20 e1       	ldi	r18, 0x10	; 16
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0x5ae>
    125a:	20 e1       	ldi	r18, 0x10	; 16
    125c:	32 e0       	ldi	r19, 0x02	; 2
    125e:	56 01       	movw	r10, r12
    1260:	07 ff       	sbrs	r16, 7
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <vfprintf+0x5c6>
    1264:	f4 e0       	ldi	r31, 0x04	; 4
    1266:	af 0e       	add	r10, r31
    1268:	b1 1c       	adc	r11, r1
    126a:	f6 01       	movw	r30, r12
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <vfprintf+0x5d6>
    1276:	f2 e0       	ldi	r31, 0x02	; 2
    1278:	af 0e       	add	r10, r31
    127a:	b1 1c       	adc	r11, r1
    127c:	f6 01       	movw	r30, r12
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a4 01       	movw	r20, r8
    1288:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    128c:	c8 2e       	mov	r12, r24
    128e:	c8 18       	sub	r12, r8
    1290:	0f 77       	andi	r16, 0x7F	; 127
    1292:	06 ff       	sbrs	r16, 6
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <vfprintf+0x5fc>
    1296:	20 2f       	mov	r18, r16
    1298:	2e 7f       	andi	r18, 0xFE	; 254
    129a:	c1 16       	cp	r12, r17
    129c:	50 f4       	brcc	.+20     	; 0x12b2 <vfprintf+0x602>
    129e:	04 ff       	sbrs	r16, 4
    12a0:	0a c0       	rjmp	.+20     	; 0x12b6 <vfprintf+0x606>
    12a2:	02 fd       	sbrc	r16, 2
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <vfprintf+0x606>
    12a6:	20 2f       	mov	r18, r16
    12a8:	2e 7e       	andi	r18, 0xEE	; 238
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <vfprintf+0x606>
    12ac:	dc 2c       	mov	r13, r12
    12ae:	20 2f       	mov	r18, r16
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <vfprintf+0x608>
    12b2:	dc 2c       	mov	r13, r12
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <vfprintf+0x608>
    12b6:	d1 2e       	mov	r13, r17
    12b8:	24 ff       	sbrs	r18, 4
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <vfprintf+0x626>
    12bc:	fe 01       	movw	r30, r28
    12be:	ec 0d       	add	r30, r12
    12c0:	f1 1d       	adc	r31, r1
    12c2:	80 81       	ld	r24, Z
    12c4:	80 33       	cpi	r24, 0x30	; 48
    12c6:	11 f4       	brne	.+4      	; 0x12cc <vfprintf+0x61c>
    12c8:	29 7e       	andi	r18, 0xE9	; 233
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <vfprintf+0x62e>
    12cc:	22 ff       	sbrs	r18, 2
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <vfprintf+0x62c>
    12d0:	d3 94       	inc	r13
    12d2:	d3 94       	inc	r13
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <vfprintf+0x62e>
    12d6:	82 2f       	mov	r24, r18
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	09 f0       	breq	.+2      	; 0x12de <vfprintf+0x62e>
    12dc:	d3 94       	inc	r13
    12de:	23 fd       	sbrc	r18, 3
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <vfprintf+0x658>
    12e2:	20 ff       	sbrs	r18, 0
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <vfprintf+0x642>
    12e6:	1c 2d       	mov	r17, r12
    12e8:	d5 14       	cp	r13, r5
    12ea:	18 f4       	brcc	.+6      	; 0x12f2 <vfprintf+0x642>
    12ec:	15 0d       	add	r17, r5
    12ee:	1d 19       	sub	r17, r13
    12f0:	d5 2c       	mov	r13, r5
    12f2:	d5 14       	cp	r13, r5
    12f4:	68 f4       	brcc	.+26     	; 0x1310 <vfprintf+0x660>
    12f6:	b7 01       	movw	r22, r14
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	2b 8b       	std	Y+19, r18	; 0x13
    12fe:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1302:	d3 94       	inc	r13
    1304:	2b 89       	ldd	r18, Y+19	; 0x13
    1306:	f5 cf       	rjmp	.-22     	; 0x12f2 <vfprintf+0x642>
    1308:	d5 14       	cp	r13, r5
    130a:	10 f4       	brcc	.+4      	; 0x1310 <vfprintf+0x660>
    130c:	5d 18       	sub	r5, r13
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <vfprintf+0x662>
    1310:	51 2c       	mov	r5, r1
    1312:	24 ff       	sbrs	r18, 4
    1314:	12 c0       	rjmp	.+36     	; 0x133a <vfprintf+0x68a>
    1316:	b7 01       	movw	r22, r14
    1318:	80 e3       	ldi	r24, 0x30	; 48
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	2b 8b       	std	Y+19, r18	; 0x13
    131e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1322:	2b 89       	ldd	r18, Y+19	; 0x13
    1324:	22 ff       	sbrs	r18, 2
    1326:	17 c0       	rjmp	.+46     	; 0x1356 <vfprintf+0x6a6>
    1328:	21 ff       	sbrs	r18, 1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <vfprintf+0x682>
    132c:	88 e5       	ldi	r24, 0x58	; 88
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x686>
    1332:	88 e7       	ldi	r24, 0x78	; 120
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	b7 01       	movw	r22, r14
    1338:	0c c0       	rjmp	.+24     	; 0x1352 <vfprintf+0x6a2>
    133a:	82 2f       	mov	r24, r18
    133c:	86 78       	andi	r24, 0x86	; 134
    133e:	59 f0       	breq	.+22     	; 0x1356 <vfprintf+0x6a6>
    1340:	21 fd       	sbrc	r18, 1
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <vfprintf+0x698>
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	01 c0       	rjmp	.+2      	; 0x134a <vfprintf+0x69a>
    1348:	8b e2       	ldi	r24, 0x2B	; 43
    134a:	27 fd       	sbrc	r18, 7
    134c:	8d e2       	ldi	r24, 0x2D	; 45
    134e:	b7 01       	movw	r22, r14
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1356:	c1 16       	cp	r12, r17
    1358:	38 f4       	brcc	.+14     	; 0x1368 <vfprintf+0x6b8>
    135a:	b7 01       	movw	r22, r14
    135c:	80 e3       	ldi	r24, 0x30	; 48
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    1364:	11 50       	subi	r17, 0x01	; 1
    1366:	f7 cf       	rjmp	.-18     	; 0x1356 <vfprintf+0x6a6>
    1368:	ca 94       	dec	r12
    136a:	f4 01       	movw	r30, r8
    136c:	ec 0d       	add	r30, r12
    136e:	f1 1d       	adc	r31, r1
    1370:	80 81       	ld	r24, Z
    1372:	b7 01       	movw	r22, r14
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    137a:	c1 10       	cpse	r12, r1
    137c:	f5 cf       	rjmp	.-22     	; 0x1368 <vfprintf+0x6b8>
    137e:	55 20       	and	r5, r5
    1380:	09 f4       	brne	.+2      	; 0x1384 <vfprintf+0x6d4>
    1382:	c2 cc       	rjmp	.-1660   	; 0xd08 <vfprintf+0x58>
    1384:	b7 01       	movw	r22, r14
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <fputc>
    138e:	5a 94       	dec	r5
    1390:	f6 cf       	rjmp	.-20     	; 0x137e <vfprintf+0x6ce>
    1392:	f7 01       	movw	r30, r14
    1394:	86 81       	ldd	r24, Z+6	; 0x06
    1396:	97 81       	ldd	r25, Z+7	; 0x07
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x6ee>
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f ef       	ldi	r25, 0xFF	; 255
    139e:	63 96       	adiw	r28, 0x13	; 19
    13a0:	e2 e1       	ldi	r30, 0x12	; 18
    13a2:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__epilogue_restores__>

000013a6 <__prologue_saves__>:
    13a6:	2f 92       	push	r2
    13a8:	3f 92       	push	r3
    13aa:	4f 92       	push	r4
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	ca 1b       	sub	r28, r26
    13d0:	db 0b       	sbc	r29, r27
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	09 94       	ijmp

000013de <__epilogue_restores__>:
    13de:	2a 88       	ldd	r2, Y+18	; 0x12
    13e0:	39 88       	ldd	r3, Y+17	; 0x11
    13e2:	48 88       	ldd	r4, Y+16	; 0x10
    13e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    13ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f0:	b9 84       	ldd	r11, Y+9	; 0x09
    13f2:	c8 84       	ldd	r12, Y+8	; 0x08
    13f4:	df 80       	ldd	r13, Y+7	; 0x07
    13f6:	ee 80       	ldd	r14, Y+6	; 0x06
    13f8:	fd 80       	ldd	r15, Y+5	; 0x05
    13fa:	0c 81       	ldd	r16, Y+4	; 0x04
    13fc:	1b 81       	ldd	r17, Y+3	; 0x03
    13fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1400:	b9 81       	ldd	r27, Y+1	; 0x01
    1402:	ce 0f       	add	r28, r30
    1404:	d1 1d       	adc	r29, r1
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	ed 01       	movw	r28, r26
    1412:	08 95       	ret

00001414 <__ftoa_engine>:
    1414:	28 30       	cpi	r18, 0x08	; 8
    1416:	08 f0       	brcs	.+2      	; 0x141a <__ftoa_engine+0x6>
    1418:	27 e0       	ldi	r18, 0x07	; 7
    141a:	33 27       	eor	r19, r19
    141c:	da 01       	movw	r26, r20
    141e:	99 0f       	add	r25, r25
    1420:	31 1d       	adc	r19, r1
    1422:	87 fd       	sbrc	r24, 7
    1424:	91 60       	ori	r25, 0x01	; 1
    1426:	00 96       	adiw	r24, 0x00	; 0
    1428:	61 05       	cpc	r22, r1
    142a:	71 05       	cpc	r23, r1
    142c:	39 f4       	brne	.+14     	; 0x143c <__ftoa_engine+0x28>
    142e:	32 60       	ori	r19, 0x02	; 2
    1430:	2e 5f       	subi	r18, 0xFE	; 254
    1432:	3d 93       	st	X+, r19
    1434:	30 e3       	ldi	r19, 0x30	; 48
    1436:	2a 95       	dec	r18
    1438:	e1 f7       	brne	.-8      	; 0x1432 <__ftoa_engine+0x1e>
    143a:	08 95       	ret
    143c:	9f 3f       	cpi	r25, 0xFF	; 255
    143e:	30 f0       	brcs	.+12     	; 0x144c <__ftoa_engine+0x38>
    1440:	80 38       	cpi	r24, 0x80	; 128
    1442:	71 05       	cpc	r23, r1
    1444:	61 05       	cpc	r22, r1
    1446:	09 f0       	breq	.+2      	; 0x144a <__ftoa_engine+0x36>
    1448:	3c 5f       	subi	r19, 0xFC	; 252
    144a:	3c 5f       	subi	r19, 0xFC	; 252
    144c:	3d 93       	st	X+, r19
    144e:	91 30       	cpi	r25, 0x01	; 1
    1450:	08 f0       	brcs	.+2      	; 0x1454 <__ftoa_engine+0x40>
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	91 1d       	adc	r25, r1
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	1f 93       	push	r17
    145c:	0f 93       	push	r16
    145e:	ff 92       	push	r15
    1460:	ef 92       	push	r14
    1462:	19 2f       	mov	r17, r25
    1464:	98 7f       	andi	r25, 0xF8	; 248
    1466:	96 95       	lsr	r25
    1468:	e9 2f       	mov	r30, r25
    146a:	96 95       	lsr	r25
    146c:	96 95       	lsr	r25
    146e:	e9 0f       	add	r30, r25
    1470:	ff 27       	eor	r31, r31
    1472:	e6 53       	subi	r30, 0x36	; 54
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	99 27       	eor	r25, r25
    1478:	33 27       	eor	r19, r19
    147a:	ee 24       	eor	r14, r14
    147c:	ff 24       	eor	r15, r15
    147e:	a7 01       	movw	r20, r14
    1480:	e7 01       	movw	r28, r14
    1482:	05 90       	lpm	r0, Z+
    1484:	08 94       	sec
    1486:	07 94       	ror	r0
    1488:	28 f4       	brcc	.+10     	; 0x1494 <__ftoa_engine+0x80>
    148a:	36 0f       	add	r19, r22
    148c:	e7 1e       	adc	r14, r23
    148e:	f8 1e       	adc	r15, r24
    1490:	49 1f       	adc	r20, r25
    1492:	51 1d       	adc	r21, r1
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	88 1f       	adc	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	06 94       	lsr	r0
    149e:	a1 f7       	brne	.-24     	; 0x1488 <__ftoa_engine+0x74>
    14a0:	05 90       	lpm	r0, Z+
    14a2:	07 94       	ror	r0
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <__ftoa_engine+0x9c>
    14a6:	e7 0e       	add	r14, r23
    14a8:	f8 1e       	adc	r15, r24
    14aa:	49 1f       	adc	r20, r25
    14ac:	56 1f       	adc	r21, r22
    14ae:	c1 1d       	adc	r28, r1
    14b0:	77 0f       	add	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	66 1f       	adc	r22, r22
    14b8:	06 94       	lsr	r0
    14ba:	a1 f7       	brne	.-24     	; 0x14a4 <__ftoa_engine+0x90>
    14bc:	05 90       	lpm	r0, Z+
    14be:	07 94       	ror	r0
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <__ftoa_engine+0xb8>
    14c2:	f8 0e       	add	r15, r24
    14c4:	49 1f       	adc	r20, r25
    14c6:	56 1f       	adc	r21, r22
    14c8:	c7 1f       	adc	r28, r23
    14ca:	d1 1d       	adc	r29, r1
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	66 1f       	adc	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	06 94       	lsr	r0
    14d6:	a1 f7       	brne	.-24     	; 0x14c0 <__ftoa_engine+0xac>
    14d8:	05 90       	lpm	r0, Z+
    14da:	07 94       	ror	r0
    14dc:	20 f4       	brcc	.+8      	; 0x14e6 <__ftoa_engine+0xd2>
    14de:	49 0f       	add	r20, r25
    14e0:	56 1f       	adc	r21, r22
    14e2:	c7 1f       	adc	r28, r23
    14e4:	d8 1f       	adc	r29, r24
    14e6:	99 0f       	add	r25, r25
    14e8:	66 1f       	adc	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	06 94       	lsr	r0
    14f0:	a9 f7       	brne	.-22     	; 0x14dc <__ftoa_engine+0xc8>
    14f2:	84 91       	lpm	r24, Z
    14f4:	10 95       	com	r17
    14f6:	17 70       	andi	r17, 0x07	; 7
    14f8:	41 f0       	breq	.+16     	; 0x150a <__ftoa_engine+0xf6>
    14fa:	d6 95       	lsr	r29
    14fc:	c7 95       	ror	r28
    14fe:	57 95       	ror	r21
    1500:	47 95       	ror	r20
    1502:	f7 94       	ror	r15
    1504:	e7 94       	ror	r14
    1506:	1a 95       	dec	r17
    1508:	c1 f7       	brne	.-16     	; 0x14fa <__ftoa_engine+0xe6>
    150a:	e0 e7       	ldi	r30, 0x70	; 112
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	68 94       	set
    1510:	15 90       	lpm	r1, Z+
    1512:	15 91       	lpm	r17, Z+
    1514:	35 91       	lpm	r19, Z+
    1516:	65 91       	lpm	r22, Z+
    1518:	95 91       	lpm	r25, Z+
    151a:	05 90       	lpm	r0, Z+
    151c:	7f e2       	ldi	r23, 0x2F	; 47
    151e:	73 95       	inc	r23
    1520:	e1 18       	sub	r14, r1
    1522:	f1 0a       	sbc	r15, r17
    1524:	43 0b       	sbc	r20, r19
    1526:	56 0b       	sbc	r21, r22
    1528:	c9 0b       	sbc	r28, r25
    152a:	d0 09       	sbc	r29, r0
    152c:	c0 f7       	brcc	.-16     	; 0x151e <__ftoa_engine+0x10a>
    152e:	e1 0c       	add	r14, r1
    1530:	f1 1e       	adc	r15, r17
    1532:	43 1f       	adc	r20, r19
    1534:	56 1f       	adc	r21, r22
    1536:	c9 1f       	adc	r28, r25
    1538:	d0 1d       	adc	r29, r0
    153a:	7e f4       	brtc	.+30     	; 0x155a <__ftoa_engine+0x146>
    153c:	70 33       	cpi	r23, 0x30	; 48
    153e:	11 f4       	brne	.+4      	; 0x1544 <__ftoa_engine+0x130>
    1540:	8a 95       	dec	r24
    1542:	e6 cf       	rjmp	.-52     	; 0x1510 <__ftoa_engine+0xfc>
    1544:	e8 94       	clt
    1546:	01 50       	subi	r16, 0x01	; 1
    1548:	30 f0       	brcs	.+12     	; 0x1556 <__ftoa_engine+0x142>
    154a:	08 0f       	add	r16, r24
    154c:	0a f4       	brpl	.+2      	; 0x1550 <__ftoa_engine+0x13c>
    154e:	00 27       	eor	r16, r16
    1550:	02 17       	cp	r16, r18
    1552:	08 f4       	brcc	.+2      	; 0x1556 <__ftoa_engine+0x142>
    1554:	20 2f       	mov	r18, r16
    1556:	23 95       	inc	r18
    1558:	02 2f       	mov	r16, r18
    155a:	7a 33       	cpi	r23, 0x3A	; 58
    155c:	28 f0       	brcs	.+10     	; 0x1568 <__ftoa_engine+0x154>
    155e:	79 e3       	ldi	r23, 0x39	; 57
    1560:	7d 93       	st	X+, r23
    1562:	2a 95       	dec	r18
    1564:	e9 f7       	brne	.-6      	; 0x1560 <__ftoa_engine+0x14c>
    1566:	10 c0       	rjmp	.+32     	; 0x1588 <__ftoa_engine+0x174>
    1568:	7d 93       	st	X+, r23
    156a:	2a 95       	dec	r18
    156c:	89 f6       	brne	.-94     	; 0x1510 <__ftoa_engine+0xfc>
    156e:	06 94       	lsr	r0
    1570:	97 95       	ror	r25
    1572:	67 95       	ror	r22
    1574:	37 95       	ror	r19
    1576:	17 95       	ror	r17
    1578:	17 94       	ror	r1
    157a:	e1 18       	sub	r14, r1
    157c:	f1 0a       	sbc	r15, r17
    157e:	43 0b       	sbc	r20, r19
    1580:	56 0b       	sbc	r21, r22
    1582:	c9 0b       	sbc	r28, r25
    1584:	d0 09       	sbc	r29, r0
    1586:	98 f0       	brcs	.+38     	; 0x15ae <__ftoa_engine+0x19a>
    1588:	23 95       	inc	r18
    158a:	7e 91       	ld	r23, -X
    158c:	73 95       	inc	r23
    158e:	7a 33       	cpi	r23, 0x3A	; 58
    1590:	08 f0       	brcs	.+2      	; 0x1594 <__ftoa_engine+0x180>
    1592:	70 e3       	ldi	r23, 0x30	; 48
    1594:	7c 93       	st	X, r23
    1596:	20 13       	cpse	r18, r16
    1598:	b8 f7       	brcc	.-18     	; 0x1588 <__ftoa_engine+0x174>
    159a:	7e 91       	ld	r23, -X
    159c:	70 61       	ori	r23, 0x10	; 16
    159e:	7d 93       	st	X+, r23
    15a0:	30 f0       	brcs	.+12     	; 0x15ae <__ftoa_engine+0x19a>
    15a2:	83 95       	inc	r24
    15a4:	71 e3       	ldi	r23, 0x31	; 49
    15a6:	7d 93       	st	X+, r23
    15a8:	70 e3       	ldi	r23, 0x30	; 48
    15aa:	2a 95       	dec	r18
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <__ftoa_engine+0x192>
    15ae:	11 24       	eor	r1, r1
    15b0:	ef 90       	pop	r14
    15b2:	ff 90       	pop	r15
    15b4:	0f 91       	pop	r16
    15b6:	1f 91       	pop	r17
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	99 27       	eor	r25, r25
    15be:	87 fd       	sbrc	r24, 7
    15c0:	90 95       	com	r25
    15c2:	08 95       	ret

000015c4 <strnlen_P>:
    15c4:	fc 01       	movw	r30, r24
    15c6:	05 90       	lpm	r0, Z+
    15c8:	61 50       	subi	r22, 0x01	; 1
    15ca:	70 40       	sbci	r23, 0x00	; 0
    15cc:	01 10       	cpse	r0, r1
    15ce:	d8 f7       	brcc	.-10     	; 0x15c6 <strnlen_P+0x2>
    15d0:	80 95       	com	r24
    15d2:	90 95       	com	r25
    15d4:	8e 0f       	add	r24, r30
    15d6:	9f 1f       	adc	r25, r31
    15d8:	08 95       	ret

000015da <strnlen>:
    15da:	fc 01       	movw	r30, r24
    15dc:	61 50       	subi	r22, 0x01	; 1
    15de:	70 40       	sbci	r23, 0x00	; 0
    15e0:	01 90       	ld	r0, Z+
    15e2:	01 10       	cpse	r0, r1
    15e4:	d8 f7       	brcc	.-10     	; 0x15dc <strnlen+0x2>
    15e6:	80 95       	com	r24
    15e8:	90 95       	com	r25
    15ea:	8e 0f       	add	r24, r30
    15ec:	9f 1f       	adc	r25, r31
    15ee:	08 95       	ret

000015f0 <fputc>:
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	18 2f       	mov	r17, r24
    15fa:	09 2f       	mov	r16, r25
    15fc:	eb 01       	movw	r28, r22
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 fd       	sbrc	r24, 1
    1602:	03 c0       	rjmp	.+6      	; 0x160a <fputc+0x1a>
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	20 c0       	rjmp	.+64     	; 0x164a <fputc+0x5a>
    160a:	82 ff       	sbrs	r24, 2
    160c:	10 c0       	rjmp	.+32     	; 0x162e <fputc+0x3e>
    160e:	4e 81       	ldd	r20, Y+6	; 0x06
    1610:	5f 81       	ldd	r21, Y+7	; 0x07
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	42 17       	cp	r20, r18
    1618:	53 07       	cpc	r21, r19
    161a:	7c f4       	brge	.+30     	; 0x163a <fputc+0x4a>
    161c:	e8 81       	ld	r30, Y
    161e:	f9 81       	ldd	r31, Y+1	; 0x01
    1620:	9f 01       	movw	r18, r30
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	39 83       	std	Y+1, r19	; 0x01
    1628:	28 83       	st	Y, r18
    162a:	10 83       	st	Z, r17
    162c:	06 c0       	rjmp	.+12     	; 0x163a <fputc+0x4a>
    162e:	e8 85       	ldd	r30, Y+8	; 0x08
    1630:	f9 85       	ldd	r31, Y+9	; 0x09
    1632:	81 2f       	mov	r24, r17
    1634:	09 95       	icall
    1636:	89 2b       	or	r24, r25
    1638:	29 f7       	brne	.-54     	; 0x1604 <fputc+0x14>
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	3f 83       	std	Y+7, r19	; 0x07
    1644:	2e 83       	std	Y+6, r18	; 0x06
    1646:	81 2f       	mov	r24, r17
    1648:	90 2f       	mov	r25, r16
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <sprintf>:
    1654:	ae e0       	ldi	r26, 0x0E	; 14
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	fb e0       	ldi	r31, 0x0B	; 11
    165c:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__prologue_saves__+0x1c>
    1660:	0d 89       	ldd	r16, Y+21	; 0x15
    1662:	1e 89       	ldd	r17, Y+22	; 0x16
    1664:	86 e0       	ldi	r24, 0x06	; 6
    1666:	8c 83       	std	Y+4, r24	; 0x04
    1668:	1a 83       	std	Y+2, r17	; 0x02
    166a:	09 83       	std	Y+1, r16	; 0x01
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	9f e7       	ldi	r25, 0x7F	; 127
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	ae 01       	movw	r20, r28
    1676:	47 5e       	subi	r20, 0xE7	; 231
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	6f 89       	ldd	r22, Y+23	; 0x17
    167c:	78 8d       	ldd	r23, Y+24	; 0x18
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 58 06 	call	0xcb0	; 0xcb0 <vfprintf>
    1686:	ef 81       	ldd	r30, Y+7	; 0x07
    1688:	f8 85       	ldd	r31, Y+8	; 0x08
    168a:	e0 0f       	add	r30, r16
    168c:	f1 1f       	adc	r31, r17
    168e:	10 82       	st	Z, r1
    1690:	2e 96       	adiw	r28, 0x0e	; 14
    1692:	e4 e0       	ldi	r30, 0x04	; 4
    1694:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__epilogue_restores__+0x1c>

00001698 <__ultoa_invert>:
    1698:	fa 01       	movw	r30, r20
    169a:	aa 27       	eor	r26, r26
    169c:	28 30       	cpi	r18, 0x08	; 8
    169e:	51 f1       	breq	.+84     	; 0x16f4 <__ultoa_invert+0x5c>
    16a0:	20 31       	cpi	r18, 0x10	; 16
    16a2:	81 f1       	breq	.+96     	; 0x1704 <__ultoa_invert+0x6c>
    16a4:	e8 94       	clt
    16a6:	6f 93       	push	r22
    16a8:	6e 7f       	andi	r22, 0xFE	; 254
    16aa:	6e 5f       	subi	r22, 0xFE	; 254
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	af 4f       	sbci	r26, 0xFF	; 255
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	3e d0       	rcall	.+124    	; 0x1734 <__ultoa_invert+0x9c>
    16b8:	b4 e0       	ldi	r27, 0x04	; 4
    16ba:	3c d0       	rcall	.+120    	; 0x1734 <__ultoa_invert+0x9c>
    16bc:	67 0f       	add	r22, r23
    16be:	78 1f       	adc	r23, r24
    16c0:	89 1f       	adc	r24, r25
    16c2:	9a 1f       	adc	r25, r26
    16c4:	a1 1d       	adc	r26, r1
    16c6:	68 0f       	add	r22, r24
    16c8:	79 1f       	adc	r23, r25
    16ca:	8a 1f       	adc	r24, r26
    16cc:	91 1d       	adc	r25, r1
    16ce:	a1 1d       	adc	r26, r1
    16d0:	6a 0f       	add	r22, r26
    16d2:	71 1d       	adc	r23, r1
    16d4:	81 1d       	adc	r24, r1
    16d6:	91 1d       	adc	r25, r1
    16d8:	a1 1d       	adc	r26, r1
    16da:	20 d0       	rcall	.+64     	; 0x171c <__ultoa_invert+0x84>
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__ultoa_invert+0x48>
    16de:	68 94       	set
    16e0:	3f 91       	pop	r19
    16e2:	2a e0       	ldi	r18, 0x0A	; 10
    16e4:	26 9f       	mul	r18, r22
    16e6:	11 24       	eor	r1, r1
    16e8:	30 19       	sub	r19, r0
    16ea:	30 5d       	subi	r19, 0xD0	; 208
    16ec:	31 93       	st	Z+, r19
    16ee:	de f6       	brtc	.-74     	; 0x16a6 <__ultoa_invert+0xe>
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret
    16f4:	46 2f       	mov	r20, r22
    16f6:	47 70       	andi	r20, 0x07	; 7
    16f8:	40 5d       	subi	r20, 0xD0	; 208
    16fa:	41 93       	st	Z+, r20
    16fc:	b3 e0       	ldi	r27, 0x03	; 3
    16fe:	0f d0       	rcall	.+30     	; 0x171e <__ultoa_invert+0x86>
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__ultoa_invert+0x5c>
    1702:	f6 cf       	rjmp	.-20     	; 0x16f0 <__ultoa_invert+0x58>
    1704:	46 2f       	mov	r20, r22
    1706:	4f 70       	andi	r20, 0x0F	; 15
    1708:	40 5d       	subi	r20, 0xD0	; 208
    170a:	4a 33       	cpi	r20, 0x3A	; 58
    170c:	18 f0       	brcs	.+6      	; 0x1714 <__ultoa_invert+0x7c>
    170e:	49 5d       	subi	r20, 0xD9	; 217
    1710:	31 fd       	sbrc	r19, 1
    1712:	40 52       	subi	r20, 0x20	; 32
    1714:	41 93       	st	Z+, r20
    1716:	02 d0       	rcall	.+4      	; 0x171c <__ultoa_invert+0x84>
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__ultoa_invert+0x6c>
    171a:	ea cf       	rjmp	.-44     	; 0x16f0 <__ultoa_invert+0x58>
    171c:	b4 e0       	ldi	r27, 0x04	; 4
    171e:	a6 95       	lsr	r26
    1720:	97 95       	ror	r25
    1722:	87 95       	ror	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	ba 95       	dec	r27
    172a:	c9 f7       	brne	.-14     	; 0x171e <__ultoa_invert+0x86>
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 05       	cpc	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	08 95       	ret
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	0a 2e       	mov	r0, r26
    173a:	06 94       	lsr	r0
    173c:	57 95       	ror	r21
    173e:	47 95       	ror	r20
    1740:	37 95       	ror	r19
    1742:	27 95       	ror	r18
    1744:	ba 95       	dec	r27
    1746:	c9 f7       	brne	.-14     	; 0x173a <__ultoa_invert+0xa2>
    1748:	62 0f       	add	r22, r18
    174a:	73 1f       	adc	r23, r19
    174c:	84 1f       	adc	r24, r20
    174e:	95 1f       	adc	r25, r21
    1750:	a0 1d       	adc	r26, r0
    1752:	08 95       	ret

00001754 <_exit>:
    1754:	f8 94       	cli

00001756 <__stop_program>:
    1756:	ff cf       	rjmp	.-2      	; 0x1756 <__stop_program>
